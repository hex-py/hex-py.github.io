<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>shell基础之EOF的用法</title>
    <url>/2021/01/14/bash-2021-01-14-shell%E5%9F%BA%E7%A1%80%E4%B9%8BEOF%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>EOF是（END Of File）的缩写，表示自定义终止符。既然自定义，那么EOF就不是固定的，可以随意设置别名，在linux按ctrl-d 就代表EOF。</p>
<p>EOF一般会配合cat能够多行文本输出。</p>
<h1 id="2-用法说明"><a href="#2-用法说明" class="headerlink" title="2. 用法说明"></a>2. 用法说明</h1><p>其用法如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">&lt;&lt;EOF        <span class="comment">#开始</span></span><br><span class="line">....         <span class="comment">#输入内容</span></span><br><span class="line">EOF          <span class="comment">#结束</span></span><br></pre></td></tr></tbody></table></figure>

<p>还可以自定义，比如自定义：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#开始</span></span><br><span class="line">&lt;&lt;ABC        </span><br><span class="line">....</span><br><span class="line"><span class="comment"># 结束</span></span><br><span class="line">ABC</span><br></pre></td></tr></tbody></table></figure>

<p>通过cat配合重定向能够生成文件并追加操作，在它之前先熟悉几个特殊符号<br><code>&lt;</code>:  输入重定向<br><code>&gt;</code>:  输出重定向<br><code>&gt;&gt;</code>: 输出重定向,进行追加,不会覆盖之前内容<br><code>&lt;&lt;</code>: 标准输入来自命令行的一对分隔号的中间内容</p>
<p>例子1：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF</span><br><span class="line">hello</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure>
<p>输出为：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></tbody></table></figure>

<p>我们知道cat的操作对象是文件，但是例1中cat的操作对象不是文件，而是用户输入；那么我们可以这样理解例1：先在文件file中输入“Hello”，再用cat file输出其中的内容。<br>也就是说我们可以用一个文件来替代”&lt;&lt; EOF EOF”。</p>
<p>反过来说，如果操作命令中的文件是输入对象，也可以用”&lt;&lt; EOF EOF”来替代的。</p>
<p>例子2：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建1.txt文件，文件中有字段`abc`</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"abc"</span> &gt; 1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 向文件1.txt输入覆盖内容（也可以：cat &gt; 1.txt &lt;&lt;EOF）</span></span><br><span class="line">cat &lt;&lt;EOF &gt; 1.txt </span><br><span class="line">11</span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">lol</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># "&lt;&lt; EOF EOF" 的作用是在命令执行过程中用户自定义输入，它类似于起到一个临时文件的作用，只是比使用文件更方便灵活。</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="3-cat-lt-lt-EOF-与-cat-lt-lt-EOF-的区别"><a href="#3-cat-lt-lt-EOF-与-cat-lt-lt-EOF-的区别" class="headerlink" title="3. cat <<EOF 与 cat <<-EOF 的区别"></a>3. <code>cat &lt;&lt;EOF</code> 与 <code>cat &lt;&lt;-EOF</code> 的区别</h1><p>两个都是获取stdin，并在EOF处结束stdin，输出stdout。</p>
<p>使用<code>cat &lt;&lt;EOF</code>时，输入完成后，需要在一个新的一行输入EOF结束stdin的输入。EOF必须顶行写，前面不能用制表符或者空格。<br>使用<code>cat &lt;&lt;-EOF</code>时，分界符（EOF）所在行的开头部分的制表符（Tab）都将被去除。这可以解决由于脚本中的自然缩进产生的制表符。</p>
<p>如果结束分解符EOF前有制表符或者空格，则EOF不会被当做结束分界符，只会继续被当做stdin来输入。所以会报如下报错</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">2.sh: line 5: warning: here-document at line 1 delimited by end-of-file (wanted `EOF')</span><br></pre></td></tr></tbody></table></figure>
<p>脚本内容如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">你好，EOF！</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure>
<p>正确写法如下 - 2种：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 虽然最后的EOF前面有多个制表符和空格，但仍然会被当做结束分界符，表示stdin的结束。</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line"></span><br><span class="line">你好，EOF！</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然最后的EOF前面有多个制表符和空格，但仍然会被当做结束分界符，表示stdin的结束。</span></span><br><span class="line">cat &lt;&lt;-EOF</span><br><span class="line"></span><br><span class="line">你好，EOF！</span><br><span class="line"></span><br><span class="line">      EOF</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>Bash</category>
      </categories>
      <tags>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>gogs-drone-dockercompose</title>
    <url>/2019/12/30/devops-20191230-gogs-drone-dockercompose/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><blockquote>
<ol>
<li><code>Drone</code>登录的账号需要在<code>Gogs</code>设置为管理员，他俩兄弟的账密是互通的</li>
<li><code>Gogs</code>的仓库会自动同步到<code>Drone</code>上，此时，需要在<code>Drone</code>开启激活该项目才能正常运行，激活后能在Gogs仓库WeHooks多一个记录。</li>
<li>Drone默认读取的配置文件名为项目根下<code>.drone.yml</code>，如果仓库内文件名不是。需要再Drone-setting中做修改。</li>
</ol>
</blockquote>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><code>CI / CD</code>( 持续集成 / 持续部署  )方案是DevOps中不可或缺的流程之一，本文简单介绍选择 <code>Gogs</code> + <code>Drone</code> 通过<code>docker compose</code>部署。</p>
<table>
<thead>
<tr>
<th>主机名</th>
<th>gitLab + jenkins</th>
<th>Gogs + Drone</th>
<th>NUM</th>
</tr>
</thead>
<tbody><tr>
<td>成熟度</td>
<td>GitLab是一个非常成熟的git工具之一，同时Jenkins也是非常成熟的CICD组件，功能非常强大。</td>
<td>性能高，并且简单易用</td>
<td>1</td>
</tr>
<tr>
<td>语言技术栈</td>
<td><code>GitLab</code>是使用<code>Ruby</code>编写的，<code>Jenkins</code>更是了不起，使用<code>Java</code>来编写的，项目整体比较膨大，同时它们对硬件、CPU等开销比较高</td>
<td><code>Drone</code>、<code>Gogs</code>皆是使用<code>Go</code>语言来编写构建，在整体的语言性能与内存开销算是有一定的优势</td>
<td>2</td>
</tr>
</tbody></table>
<blockquote>
<p>Drone是一种基于容器技术的持续交付系统。Drone使用简单的YAML配置文件（docker-compose的超集）来定义和执行Docker容器中的Pipelines。Drone与流行的源代码管理系统无缝集成，包括GitHub，GitHub Enterprise，Gogs，Bitbucket等。</p>
</blockquote>
<h2 id="镜像说明"><a href="#镜像说明" class="headerlink" title="镜像说明"></a>镜像说明</h2><p><code>drone</code>升级使用<code>1.0.0-rc6</code>版本，此版本并非稳定版本，推荐使用<code>1</code>版本甚至是<code>0.8.6</code>更稳定的版本。<code>1.0</code>后的版本较之前而言，配置更加灵活、优化版本，同时界面也变化了。<a href="https://drone.io/" target="_blank" rel="noopener">drone</a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>使用的前提，必须符合以下条件</p>
<ul>
<li>系统安装了<code>Docker</code>，同时要安装了<code>Docker</code>编排工具<code>docker-compose</code></li>
<li>主流的<code>x64</code>位系统，<code>Linux</code>、<code>Mac</code>、<code>Window</code>等</li>
<li>安装了<code>git</code>版本控制工具</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装非常简单，拉取<code>docker-compose.yml</code>编排文件，基于<code>Docker</code>环境自动构建即可！</p>
<p>docker-compose: <code>https://github.com/alicfeng/gogs-drone-docker.git/deployment/</code></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gogs:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gogs</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gogs/gogs:0.11.91</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10022</span><span class="string">:22</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/gogs/data:/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dronenet</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">drone-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone:1.6.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/drone/:/var/lib/drone</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_OPEN=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=drone-server:8000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GIT_ALWAYS_AUTH=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GOGS=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GOGS_SKIP_VERIFY=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GOGS_SERVER={http://gogs:3000}</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_PROVIDER=gogs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=7b4eb5caee376cf81a2fcf7181e66175</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_USER_CREATE=username:alic,admin:true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DRIVER=sqlite3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dronenet</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">drone-agent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/agent:1.6.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone-agent</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone-server</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SERVER={docker-server:8000}</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=7b4eb5caee376cf81a2fcf7181e66175</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_CAPACITY=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone_nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dronenet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">dronenet:</span></span><br></pre></td></tr></tbody></table></figure>

<p>执行以下命令，创建容器、网络</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure>
<p>修改Nginx配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx ash</span><br></pre></td></tr></tbody></table></figure>
<p>容器内执行以下命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/drone.conf</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name drone.qloud.com;</span><br><span class="line">    location / {</span><br><span class="line">        proxy_pass http://drone-server:8000;</span><br><span class="line">        proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></tbody></table></figure>

<p>运行 <code>docker-runner</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">           -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">           -e DRONE_RPC_PROTO=http \</span><br><span class="line">           -e DRONE_RPC_HOST=10.8.3.206:8000 \</span><br><span class="line">           -e DRONE_RPC_SECRET=7b4eb5caee376cf81a2fcf7181e66175 \</span><br><span class="line">           -e DRONE_RUNNER_CAPACITY=2 \</span><br><span class="line">           -e DRONE_RUNNER_NAME=<span class="variable">${HOSTNAME}</span> \</span><br><span class="line">           -p 3002:3000 \</span><br><span class="line">           --restart always \</span><br><span class="line">           --name docker-runner \</span><br><span class="line">           drone/drone-runner-docker:1</span><br></pre></td></tr></tbody></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>每当分支的代码更新的时候，Gogs会动过钩子同步通知Drone，而Drone收到通知后根据<code>.drone.yml</code>配置执行命令。</p>
<ul>
<li>通过git <code>clone</code>分支代码到容器里面</li>
<li>单元测试, 代码静态检查</li>
<li>编译代码，构建可执行文件</li>
<li>build image镜像，发布到<code>Registry</code></li>
<li>部署至生产环境</li>
<li>发送邮件等通知信息，这里还有很多插件，比如微信、钉钉、电报等</li>
</ul>
<p><strong><a href="https://github.com/hex-py" target="_blank" rel="noopener">价值源于技术，技术源于分享</a></strong></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/5d36ccb5af88" target="_blank" rel="noopener">Nginx代理</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>CI/CD</tag>
        <tag>Drone</tag>
        <tag>Gogs</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Jenkins、gitlab、docker、helm和Kubernetes的CI/CD</title>
    <url>/2019/12/31/devops-20191231-%E5%9F%BA%E4%BA%8EJenkins%E3%80%81gitlab%E3%80%81docker%E3%80%81helm%E5%92%8CKubernetes%E7%9A%84CI-CD/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="提前说明"><a href="#提前说明" class="headerlink" title="提前说明"></a>提前说明</h1><blockquote>
<ol>
<li>开发人员提交代码到 Gitlab 代码仓库</li>
<li>通过 Gitlab 配置的 Jenkins Webhook 触发 Pipeline 自动构建</li>
<li>Jenkins 触发构建构建任务，根据 Pipeline 脚本定义分步骤构建</li>
<li>先进行代码静态分析，单元测试</li>
<li>然后进行 Maven 构建（Java 项目）</li>
<li>根据构建结果构建 Docker 镜像</li>
<li>推送 Docker 镜像到 Harbor 仓库</li>
<li>触发更新服务阶段，使用 Helm 安装/更新 Release</li>
<li>查看服务是否更新成功。</li>
</ol>
</blockquote>
<h1 id="部署Jenkins"><a href="#部署Jenkins" class="headerlink" title="部署Jenkins"></a>部署Jenkins</h1><p>chart地址: <code>https://github.com/helm/charts/tree/master/stable/jenkins</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">helm install --name jenkins stable/jenkins</span><br></pre></td></tr></tbody></table></figure>


<h1 id="1-后端服务容器化"><a href="#1-后端服务容器化" class="headerlink" title="1.后端服务容器化"></a>1.后端服务容器化</h1><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.6</span>-alpine as BUILD</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src /usr/app/src</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> pom.xml /usr/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mvn -f /usr/app/pom.xml clean package -Dmaven.test.skip=<span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE en_US:en</span><br><span class="line"><span class="keyword">ENV</span> LC_ALL en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=BUILD /usr/app/target/polls-0.0.1-SNAPSHOT.jar /app/polls.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>, <span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>, <span class="string">"-jar"</span>,<span class="string">"/app/polls.jar"</span>]</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<ol>
<li>页面打包到一个jar文件<code>build-container-/usr/app/target/polls-0.0.1-SNAPSHOT.jar</code></li>
<li>将上面jar文件添加到 <code>jdk-container-/app/polls.jar</code>目录</li>
</ol>
</blockquote>
<h1 id="2-前段服务容器化"><a href="#2-前段服务容器化" class="headerlink" title="2. 前段服务容器化"></a>2. 前段服务容器化</h1><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:alpine as BUILD</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install &amp;&amp; \</span></span><br><span class="line"><span class="bash">    npm run build</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.15</span>.<span class="number">10</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=BUILD /usr/src/app/build /usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx.conf</span></span><br><span class="line">/etc/nginx/conf.d/default.conf</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<ol>
<li>页面打包到一个build目录<code>build-container-/usr/src/app/build</code></li>
<li>将上面目录添加到 <code>nginx-container-/usr/share/nginx/html</code>目录</li>
</ol>
</blockquote>
<h1 id="3-Jenkins-task配置"><a href="#3-Jenkins-task配置" class="headerlink" title="3. Jenkins task配置"></a>3. Jenkins task配置</h1><p>在 Pipeline 中去自定义<code>Slave Pod</code>中所需要用到的容器模板，需要什么镜像只需要在<code>Slave Pod Template</code>中声明即可，不需要安装了所有工具的<code>Slave</code>镜像。<br>首先Jenkins 中 kubernetes 配置，Jenkins -&gt; 系统管理 -&gt; 系统设置 -&gt; 云 -&gt; Kubernetes区域</p>
<p><img alt="jenkins-k8s-plugin" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1gaqezdn991j30v40u040o.jpg"></p>
<p>新建一个名为<code>polling-app-server</code>类型为<code>流水线(Pipeline)</code>的任务：</p>
<p><img alt="jenkins-new-job" data-src="https://tvax4.sinaimg.cn/large/006hT4w1ly1gaqf0wt3l1j31ac0u0dka.jpg"></p>
<p>勾选<code>触发远程构建</code>的触发器，其中令牌我们可以随便写一个字符串，然后记住下面的 URL，将 JENKINS_URL 替换成 Jenkins 的地址,我们这里的地址就是：<code>http://jenkins.qikqiak.com/job/polling-app-server/build?token=server321</code></p>
<p><img alt="jenkins-trigger" data-src="https://tva1.sinaimg.cn/large/006hT4w1ly1gaqf34zhm7j31g80lcdie.jpg"></p>
<p>在下面的流水线区域，可以选择<code>Pipeline script</code>，测试流水线脚本。正常配置选择<code>Pipeline script from SCM</code>，就是从代码仓库中通过<code>Jenkinsfile</code>文件获取<code>Pipeline script</code>脚本定义，选择 SCM 来源为Git。配置仓库地址<code>http://git.qikqiak.com/course/polling-app-server.git</code>，由于是在一个 Slave Pod 中去进行构建，所以如果使用 SSH 的方式去访问 Gitlab 代码仓库的话就需要频繁的去更新 SSH-KEY，所以直接采用用户名和密码的形式来访问：</p>
<p><img alt="pipeline-scm" data-src="https://tva4.sinaimg.cn/large/006hT4w1ly1gaqf7s2oj7j31eo0tstcd.jpg"></p>
<p>在Credentials区域点击添加按钮添加我们访问 Gitlab 的用户名和密码：</p>
<p><img alt="credentials" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1gaqf98q79tj31gi0qu76m.jpg"></p>
<p>配置用于构建的分支，如果所有的分支需要进行构建，将<code>Branch Specifier</code>区域留空即可，一般情况下，只有不同的环境对应的分支才需要构建，比如 master、develop、test 等，平时开发的 feature 或者 bugfix 的分支没必要频繁构建，下图只配置 master 和 develop 两个分支用户构建：</p>
<p><img alt="git-branch" data-src="https://tva4.sinaimg.cn/large/006hT4w1ly1gaqfbg7lanj31960u076m.jpg"></p>
<p>然后前往 Gitlab 中配置项目polling-app-server Webhook，settings -&gt; Integrations，填写上面得到的 trigger 地址：</p>
<p><img alt="jenkins-webhook" data-src="https://tva2.sinaimg.cn/large/006hT4w1ly1gaqfch7v2tj31m80nan0a.jpg"></p>
<p>保存后，可以直接点击<code>Test</code> -&gt; <code>Push Event</code>测试是否可以正常访问 Webhook 地址，这里需要注意的是我们需要配置下 Jenkins 的安全配置，否则这里的触发器没权限访问 Jenkins，系统管理 -&gt; 全局安全配置：取消<code>防止跨站点请求伪造</code>，勾选上<code>匿名用户具有可读权限</code>：</p>
<p><img alt="jenkins-webhook-security-config" data-src="https://tva4.sinaimg.cn/large/006hT4w1ly1gaqfe5nn5uj31f00ncgnu.jpg"></p>
<p>如果测试出现了<code>Hook executed successfully: HTTP 201</code>则证明 Webhook 配置成功了，否则就需要检查下 Jenkins 的安全配置是否正确了。</p>
<h1 id="4-JenkinsFile"><a href="#4-JenkinsFile" class="headerlink" title="4. JenkinsFile"></a>4. JenkinsFile</h1><p>Clone 代码 -&gt; 代码静态分析 -&gt; 单元测试 -&gt; Maven 打包 -&gt; Docker 镜像构建/推送 -&gt; Helm 更新服务</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> label = <span class="string">"slave-${UUID.randomUUID().toString()}"</span></span><br><span class="line"></span><br><span class="line">podTemplate(<span class="string">label:</span> label, <span class="string">containers:</span> [</span><br><span class="line">  containerTemplate(<span class="string">name:</span> <span class="string">'maven'</span>, <span class="string">image:</span> <span class="string">'maven:3.6-alpine'</span>, <span class="string">command:</span> <span class="string">'cat'</span>, <span class="string">ttyEnabled:</span> <span class="literal">true</span>),</span><br><span class="line">  containerTemplate(<span class="string">name:</span> <span class="string">'docker'</span>, <span class="string">image:</span> <span class="string">'docker'</span>, <span class="string">command:</span> <span class="string">'cat'</span>, <span class="string">ttyEnabled:</span> <span class="literal">true</span>),</span><br><span class="line">  containerTemplate(<span class="string">name:</span> <span class="string">'kubectl'</span>, <span class="string">image:</span> <span class="string">'hex/kubectl'</span>, <span class="string">command:</span> <span class="string">'cat'</span>, <span class="string">ttyEnabled:</span> <span class="literal">true</span>),</span><br><span class="line">  containerTemplate(<span class="string">name:</span> <span class="string">'helm'</span>, <span class="string">image:</span> <span class="string">'hex/helm'</span>, <span class="string">command:</span> <span class="string">'cat'</span>, <span class="string">ttyEnabled:</span> <span class="literal">true</span>)</span><br><span class="line">], <span class="string">volumes:</span> [</span><br><span class="line">  hostPathVolume(<span class="string">mountPath:</span> <span class="string">'/root/.m2'</span>, <span class="string">hostPath:</span> <span class="string">'/var/run/m2'</span>),</span><br><span class="line">  hostPathVolume(<span class="string">mountPath:</span> <span class="string">'/home/jenkins/.kube'</span>, <span class="string">hostPath:</span> <span class="string">'/root/.kube'</span>),</span><br><span class="line">  hostPathVolume(<span class="string">mountPath:</span> <span class="string">'/var/run/docker.sock'</span>, <span class="string">hostPath:</span> <span class="string">'/var/run/docker.sock'</span>)</span><br><span class="line">]) {</span><br><span class="line">  node(label) {</span><br><span class="line">    <span class="keyword">def</span> myRepo = checkout scm</span><br><span class="line">    <span class="keyword">def</span> gitCommit = myRepo.GIT_COMMIT</span><br><span class="line">    <span class="keyword">def</span> gitBranch = myRepo.GIT_BRANCH</span><br><span class="line"></span><br><span class="line">    stage(<span class="string">'单元测试'</span>) {</span><br><span class="line">      echo <span class="string">"测试阶段"</span></span><br><span class="line">    }</span><br><span class="line">    stage(<span class="string">'代码编译打包'</span>) {</span><br><span class="line">      container(<span class="string">'maven'</span>) {</span><br><span class="line">        echo <span class="string">"打码编译打包阶段"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    stage(<span class="string">'构建 Docker 镜像'</span>) {</span><br><span class="line">      container(<span class="string">'docker'</span>) {</span><br><span class="line">        echo <span class="string">"构建 Docker 镜像阶段"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    stage(<span class="string">'运行 Kubectl'</span>) {</span><br><span class="line">      container(<span class="string">'kubectl'</span>) {</span><br><span class="line">        echo <span class="string">"查看 K8S 集群 Pod 列表"</span></span><br><span class="line">        sh <span class="string">"kubectl get pods"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    stage(<span class="string">'运行 Helm'</span>) {</span><br><span class="line">      container(<span class="string">'helm'</span>) {</span><br><span class="line">        echo <span class="string">"查看 Helm Release 列表"</span></span><br><span class="line">        sh <span class="string">"helm list"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<ol>
<li><code>/root/.m2</code> 挂载为了<code>maven</code>构建添加缓存，否则每次构建重新下载依赖，太慢。</li>
<li><code>~/.kube</code> 挂载为了让<code>kubectl</code>和<code>helm</code>访问 <code>Kubernetes</code> 集群。</li>
<li><code>/var/run/docker.sock</code> 挂载为了<code>docker</code>客户端与<code>Docker Daemon</code>通信，构建镜像。</li>
<li><code>label标签的定义</code> 使用 、<code>UUID</code>生成随机字符串，让<code>Slave Pod</code>每次的名称不一样，不会被固定在一个<code>Pod</code>上面了，而且有多个构建任务的时候就不会存在等待的情况.</li>
</ol>
</blockquote>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.qikqiak.com/post/kubernetes-jenkins1/" target="_blank" rel="noopener">k8s-deploy jenkins 动态slaves</a><br><a href="https://www.qikqiak.com/post/kubernetes-jenkins2/" target="_blank" rel="noopener">jenkins pipeline 部署k8s应用</a><br><a href="https://www.qikqiak.com/post/kubernetes-jenkins3/" target="_blank" rel="noopener">jenkin Blue Ocean 使用</a><br><a href="https://www.qikqiak.com/post/complete-cicd-demonstrate-1/" target="_blank" rel="noopener">jenkins-pipeline to k8s</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
        <tag>JenkinsFile</tag>
        <tag>gitlab</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>devops-挂载volume权限问题</title>
    <url>/2020/05/28/devops-2020-05-28-devops-%E6%8C%82%E8%BD%BDvolume%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://www.cnblogs.com/woshimrf/p/understand-docker-uid.html" target="_blank" rel="noopener">docker挂载volume的用户权限问题</a></strong></p>
<p><a href="https://stackoverflow.com/questions/47197493/docker-mounting-volume-permission-denied" target="_blank" rel="noopener">Docker mounting volume. Permission denied</a></p>
<p>k8s挂载宿主机卷解决权限问题：securityContext fsgroup</p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-10个docker镜像的安全最佳实践</title>
    <url>/2020/05/29/devops-2020-05-29-Docker-10%E4%B8%AAdocker%E9%95%9C%E5%83%8F%E7%9A%84%E5%AE%89%E5%85%A8%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://snyk.io/blog/10-docker-image-security-best-practices/" target="_blank" rel="noopener">10 Docker Image Security Best Practices</a></strong></p>
<p><a href="https://stackoverflow.com/questions/49955097/how-do-i-add-a-user-when-im-using-alpine-as-a-base-image" target="_blank" rel="noopener">使用Alpine基础镜像-add user</a></p>
<p><a href="https://www.grainger.xyz/timezone-in-docker-alpine-not-using-environment-variable-tz/" target="_blank" rel="noopener">使用Alpine基础镜像-set Timezone</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Docker</tag>
        <tag>draft</tag>
        <tag>DockerFile</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-理解容器中的uid和gid</title>
    <url>/2020/06/28/devops-2020-06-28-Docker-%E7%90%86%E8%A7%A3%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84uid%E5%92%8Cgid/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>问题：<a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11245" target="_blank" rel="noopener">安全漏洞 CVE-2019-11245 </a><br>容器中的进程默认以 root 用户权限运行，<br>Docker默认不启用user namespace, 所有的容器共用一个内核，所以内核控制的 uid 和 gid 则仍然只有一套。<br>如果容器内使用root用户，则容器内的进程与宿主机的root具有相同权限。会有很大的安全隐患，一旦容器有权限访问宿主机资源，则将具备宿主机root相同权限。</p>
<p>解决方法：</p>
<ul>
<li><ol>
<li>为容器中的进程指定一个具有合适权限的用户，而不要使用默认的 root 用户。</li>
</ol>
</li>
<li><ol start="2">
<li>应用 Linux 的 user namespace 技术，配置 docker 开启 user namespace 隔离用户。</li>
</ol>
</li>
</ul>
<h1 id="1-配置合适的用户"><a href="#1-配置合适的用户" class="headerlink" title="1. 配置合适的用户"></a>1. 配置合适的用户</h1><p>此处只讨论为进程指定合适用户，指定合适用户的方法有以下两种：</p>
<ul>
<li>在 <code>Dockerfile</code> 中指定用户身份</li>
<li>在 <code>Pod Security Policies</code> 中指定用户身份</li>
</ul>
<blockquote>
<p><code>Pod Security Policies</code>中的配置优先级更高，可以覆盖<code>Dockerfile</code>中的参数。</p>
</blockquote>
<h2 id="1-1-pod-securityContext-中-user只接受uid"><a href="#1-1-pod-securityContext-中-user只接受uid" class="headerlink" title="1.1 pod securityContext 中 user只接受uid"></a>1.1 pod securityContext 中 user只接受uid</h2><p><a href="https://github.com/kubernetes/kubernetes/issues/59819" target="_blank" rel="noopener">Issue with mustrunasnonroot implementation PR:56503 #59819</a></p>
<h2 id="1-2-uid说明"><a href="#1-2-uid说明" class="headerlink" title="1.2 uid说明"></a>1.2 uid说明</h2><p>uid: 范围为0<del>65535（Ubuntu中为65533），0</del>999留给系统用户，普通用户为1000~65533. </p>
<p>进程如果不声明uid，启动时以登录用户uid启动进程；进程可以声明任一存在或不存在的uid启动进程。<br>创建用户时若不指定uid, 默认就是直接从已存在的uid中找到最大的那个加1。</p>
<p>综上，</p>
<ul>
<li>每个uid不一定有对应的用户</li>
<li>每个用户一定有自己的uid</li>
<li>每个进程必定有uid</li>
<li>进程uid不指定，则与启动命令的用户uid一致</li>
<li>创建用户uid不指定，则每多一个用户，uid会max+1递增。</li>
</ul>
<p>容器中的进程uid\gid与宿主机的一致</p>
<h2 id="1-3-容器uid与宿主机冲突产生问题"><a href="#1-3-容器uid与宿主机冲突产生问题" class="headerlink" title="1.3 容器uid与宿主机冲突产生问题"></a>1.3 容器uid与宿主机冲突产生问题</h2><p>因为一个原因：</p>
<p>当pod设置<code>runAsNoneroot</code>，容器uid与宿主机uid一样，但username不一致时。会触发报错<br><code>Error: container has runAsNonRoot and image has non-numeric user (kong), cannot verify user is non-root</code><br>原因待定位，现猜测 pod设置<code>runAsNoneroot</code>会获取容器uid,此时的user会变成宿主机的用户名，之后根据宿主机用户名在容器内获取uid时</p>
<p>尽量要避免容器内的uid与宿主机的uid重复。所以建议在指定uid时，使用20000~65533的数值。</p>
<h1 id="2-docker-开启user-namespace隔离用户"><a href="#2-docker-开启user-namespace隔离用户" class="headerlink" title="2. docker 开启user namespace隔离用户"></a>2. docker 开启<code>user namespace</code>隔离用户</h1><p><a href="https://www.cnblogs.com/sparkdev/p/9614326.html" target="_blank" rel="noopener">隔离 docker 容器中的用户</a></p>
<h1 id="3-使用securityContext设置挂卷文件权限"><a href="#3-使用securityContext设置挂卷文件权限" class="headerlink" title="3. 使用securityContext设置挂卷文件权限"></a>3. 使用securityContext设置挂卷文件权限</h1><p>当设置runAsNoneRoot后，往往会带来权限问题。比如有些私有云挂卷后，权限默认给的755权限。此时普通用户没有写权限，导致无法使用。所以需要</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>Ubuntu下的用户权限</p>
<p><a href="https://blog.csdn.net/u012668018/article/details/37727517" target="_blank" rel="noopener">Ubuntu下的用户权限</a></p>
<p><a href="https://blog.csdn.net/loryliu/article/details/24228045" target="_blank" rel="noopener">/etc/passwd下的uid范围说明</a></p>
<p><a href="https://blog.csdn.net/m0_37605642/article/details/97136282?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.pc_relevant_is_cache&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.pc_relevant_is_cache" target="_blank" rel="noopener">/etc/passwd详细解释</a></p>
<p>容器这种uid说明</p>
<p><a href="https://www.cnblogs.com/sparkdev/p/9614164.html" target="_blank" rel="noopener">理解 docker 容器中的 uid 和 gid</a></p>
<p><a href="https://www.cnblogs.com/sparkdev/p/9614326.html" target="_blank" rel="noopener">隔离 docker 容器中的用户</a></p>
<p><a href="https://medium.com/kubernetes-tutorials/defining-privileges-and-access-control-settings-for-pods-and-containers-in-kubernetes-2cef08fc62b7" target="_blank" rel="noopener">为pod设置权限和AccessControl</a></p>
<p>理解 k8s 中 SecurityContext</p>
<p><a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/security-context/" target="_blank" rel="noopener">k8s文档–为pod配置安全性上下文</a></p>
<p><a href="https://developer.aliyun.com/article/777651" target="_blank" rel="noopener">源码剖析–SecurityContext</a></p>
<p><strong><a href="https://www.cnblogs.com/woshimrf/p/understand-docker-uid.html" target="_blank" rel="noopener">docker挂载volume的用户权限问题</a></strong></p>
<p><a href="https://stackoverflow.com/questions/47197493/docker-mounting-volume-permission-denied" target="_blank" rel="noopener">Docker mounting volume. Permission denied</a></p>
<p>k8s挂载宿主机卷解决权限问题：securityContext fsgroup</p>
<p>为非root用户启动的pod挂卷</p>
<p><a href="https://github.com/moby/moby/issues/2259" target="_blank" rel="noopener">Add ability to mount volume as user other than root</a></p>
<p><a href="https://github.com/kubernetes/kubernetes/issues/2630" target="_blank" rel="noopener">Volumes are created in container with root ownership and strict permissions</a></p>
<p><a href="https://stackoverflow.com/questions/43544370/kubernetes-how-to-set-volumemount-user-group-and-file-permissions" target="_blank" rel="noopener">stack overflow k8s 设置挂卷的userGroup和文件权限</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title>PKI-自签发证书说明</title>
    <url>/2020/07/08/devops-2020-07-08-PKI-%E8%87%AA%E7%AD%BE%E5%8F%91%E8%AF%81%E4%B9%A6%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="生成自签发证书"><a href="#生成自签发证书" class="headerlink" title="生成自签发证书"></a>生成自签发证书</h1><ol>
<li><p>生成CA根证书以及根证书私钥.</p>
<blockquote>
<p>output: <code>ca.crt</code>和 <code>ca.key</code>, pem格式. input ‘’</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Generate a CA private key</span></span><br><span class="line">openssl genrsa -out ca.key 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a self signed Certificate, valid for 10yrs with the 'signing' option set</span></span><br><span class="line">openssl req -x509 -new -nodes -key ca.key -subj <span class="string">"/CN=QLOUDFIN.COM"</span> -days 3650 -reqexts v3_req -extensions v3_ca -out ca.crt</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>生成<code>*.service.consul</code>通配符证书私钥 </p>
<blockquote>
<p>output: <code>service.consul.key</code>, pem格式. input: ‘’</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">openssl genrsa -out service.consul.key 4096</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>根据<code>*.service.consul</code>通配符证书私钥，生成证书请求文件(csr)<code>service.consul.csr</code> </p>
<blockquote>
<p>output: <code>service.consul.csr</code>, pem格式. input: <code>service.consul.key</code>.</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">openssl req -new -sha256 -key service.consul.key -out service.consul.csr -subj <span class="string">"/CN=obp-qmspdp-service-pditdap.service.consul"</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>根据证书请求文件通过根证书、根证书私钥签发证书。</p>
<blockquote>
<p>output: <code>service.consul.crt</code>, pem格式. input: <code>service.consul.csr</code>和<code>ca.crt</code>和<code>ca.key</code> 以及配置文件<code>service.consul.ini</code>.<br>其中，配置文件<code>service.consul.ini</code>的内容如下：</p>
</blockquote>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[ ext ]</span></span><br><span class="line"><span class="attr">subjectAltName</span> = @dns</span><br><span class="line"></span><br><span class="line"><span class="section">[ dns ]</span></span><br><span class="line"><span class="attr">DNS.1</span> = *.service.consul</span><br></pre></td></tr></tbody></table></figure>
<p>执行下面命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> service.consul.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 3560 -out service.consul.crt -extfile service.consul.ini -extensions ext</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>生成k8s中的secret. </p>
<blockquote>
<p>output: k8s-secret <code>ambassador-certs</code>, pem格式. input: <code>service.consul.crt</code> 和 <code>service.consul.key</code> pem格式.</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl create secret tls ambassador-certs --cert=service.consul.crt --key=service.consul.key</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></li>
</ol>
<p><a href="https://www.cnblogs.com/guogangj/p/4118605.html" target="_blank" rel="noopener">概念说明</a><br><a href="https://blog.csdn.net/xiangyuecn/article/details/79179684" target="_blank" rel="noopener">生成证书</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>LDAP-部署手册二-集群部署</title>
    <url>/2020/07/29/devops-2020-07-29-LDAP-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C%E4%BA%8C-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Keycloak-集成OpenLDAP</title>
    <url>/2020/08/06/devops-2020-08-06-Keycloak-%E9%9B%86%E6%88%90OpenLDAP/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.devopsbar.com/2019/08/deploy-apache-web-server-using-openldap.html" target="_blank" rel="noopener">Deploy Apache web server using openLDAP and Keycloak token based authentication</a><br><a href="http://www.useopen.com/blog/2018/keycloak_ldap/" target="_blank" rel="noopener">KEYCLOAK系列(一) — KEYCLOAK集成LDAP</a><br><a href="https://blog.csdn.net/qq_36382225/article/details/103974119" target="_blank" rel="noopener">单点登录keycloak整合LDAP(apacheDS)</a><br><a href="https://idaccessman.wordpress.com/2018/08/26/ldap-federation-with-keycloak/" target="_blank" rel="noopener">LDAP Federation with KeyCloak</a><br><a href="https://keycloak.discourse.group/t/role-ldap-mapper-add-primary-group-to-role/1625" target="_blank" rel="noopener">Role LDAP Mapper : add primary group to role</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Keycloak-集成Rancker</title>
    <url>/2020/08/06/devops-2020-08-06-Keycloak-%E9%9B%86%E6%88%90Rancker/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Keycloak-集成grafana</title>
    <url>/2020/08/06/devops-2020-08-06-Keycloak-%E9%9B%86%E6%88%90grafana/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Keycloak-配置说明+问题汇总</title>
    <url>/2020/08/10/devops-2020-08-10-Keycloak-%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>问题<br><a href="https://github.com/helm/charts/issues/11396#issuecomment-479155738" target="_blank" rel="noopener">Keycloak Invalid parameter: redirect_uri nginx-ingress</a><br>配置<br><a href="https://www.jianshu.com/p/044eb7624e1f" target="_blank" rel="noopener">Keycloak 与前后端服务整合</a><br><a href="https://blog.csdn.net/qq_33430322/article/details/105861261/" target="_blank" rel="noopener">keycloak界面配置及认证流程详解</a><br><a href="https://blog.csdn.net/weixin_34407348/article/details/91815697" target="_blank" rel="noopener">Keycloak授权服务指南-译官方文档</a><br><a href="https://www.jianshu.com/p/982b67d42a07" target="_blank" rel="noopener">Spring Security整合KeyCloak保护Rest API</a><br><a href="https://blog.csdn.net/londa/article/details/94430057" target="_blank" rel="noopener">通过 Keycloak + Pgsql 实现 Grafana 单点登录</a><br><a href="https://stackoverflow.com/questions/56743109/keycloak-create-admin-user-in-a-realm" target="_blank" rel="noopener">^^ Keycloak - Create Admin User in a Realm</a><br><a href="https://developers.redhat.com/blog/2020/01/29/api-login-and-jwt-token-generation-using-keycloak/" target="_blank" rel="noopener">API login and JWT token generation using Keycloak</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Buildpacks--研究、使用</title>
    <url>/2020/08/14/devops-2020-08-14-Buildpacks-%E7%A0%94%E7%A9%B6%E3%80%81%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.pivotal.io/pivotalcf/2-6/buildpacks/understand-buildpacks.html" target="_blank" rel="noopener">Buildpack脚本说明</a><br><a href="https://buildpacks.io/docs/app-developer-guide/" target="_blank" rel="noopener">Buildpacks.io–应用开发者使用说明</a><br><a href="https://buildpacks.io/docs/buildpack-author-guide/" target="_blank" rel="noopener">Buildpacks.io–buildpack开发说明</a><br><a href="https://buildpacks.io/docs/operator-guide/" target="_blank" rel="noopener">Buildpacks.io–builder开发说明</a></p>
<p><a href="https://devcenter.heroku.com/articles/buildpacks" target="_blank" rel="noopener">heroku-buildpacks</a><br><a href="https://devcenter.heroku.com/articles/getting-started-with-java#deploy-the-app" target="_blank" rel="noopener">heroku-Getting Started with Java</a><br><a href="https://devcenter.heroku.com/articles/using-a-custom-maven-settings-xml" target="_blank" rel="noopener">heroku-Using a Custom Maven Settings File</a><br><a href="https://github.com/heroku/heroku-buildpack-java" target="_blank" rel="noopener">heroku-buildpack for java(include mvn ops set)</a></p>
<p><a href="https://github.com/flynn/flynn/tree/master/gitreceive" target="_blank" rel="noopener">flynn-gitreceive</a><br><a href="https://github.com/flynn/flynn/tree/master/slugbuilder" target="_blank" rel="noopener">flynn-sluggerBuilder</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>DevOps-kpack-使用汇总</title>
    <url>/2020/09/23/devops-2020-09-23-DevOps-kpack-%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/GoogleCloudPlatform/buildpacks/issues/62" target="_blank" rel="noopener">buildpack issue - 存在Dockerfile时,使用dockerfile构建镜像</a></p>
<p><a href="https://thenewstack.io/part-1-how-to-improve-enhance-your-kubernetes-ci-cd-pipelines-with-gitlab-and-open-source/" target="_blank" rel="noopener">How Containerized CI/CD Pipelines Work with Kubernetes and GitLab</a></p>
<p><a href="https://github.com/pivotal/kpack/blob/master/docs/secrets.md" target="_blank" rel="noopener">kpack-secret</a><br><a href="https://github.com/pivotal/kpack/blob/master/docs/tutorial.md" target="_blank" rel="noopener">kpack-Tutorial</a><br><a href="https://github.com/pivotal/kpack/blob/master/docs/builders.md" target="_blank" rel="noopener">kpack-builders</a><br><a href="https://starkandwayne.com/blog/investigating-kpack-automatically-updating-kubernetes-pods-with-buildpacks/" target="_blank" rel="noopener">使用kpack-云构建镜像</a><br><a href="https://docs.cloudfoundry.org/buildpacks/custom.html" target="_blank" rel="noopener">CloudFoundry - CreatingCustomBuildpacks</a><br><a href="https://buildpacks.io/docs/concepts/components/builder/" target="_blank" rel="noopener">buildpack.io-Builder</a><br><a href="https://buildpacks.io/docs/concepts/components/buildpack/" target="_blank" rel="noopener">buildpack.io-Buildpack</a><br><a href="https://paketo.io/docs/create-paketo-buildpack/" target="_blank" rel="noopener">paketo - Write_Buildpack_Using_Packit</a><br><a href="https://godoc.org/github.com/cloudfoundry/packit" target="_blank" rel="noopener">Packit - godoc</a><br><a href="https://medium.com/paketo-buildpacks/building-apps-for-kubernetes-get-to-know-paketo-buildpacks-6dc29b0f3cf3" target="_blank" rel="noopener">Get to Know Paketo Buildpacks.</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>DevOps-trivy-镜像扫描汇总</title>
    <url>/2020/11/06/devops-2020-11-06-DevOps-trivy-%E9%95%9C%E5%83%8F%E6%89%AB%E6%8F%8F%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>trivy用来扫描镜像的安全漏洞。如果用于生产环境，需要将漏洞库离线，安全人员将镜像的基础镜像或者buildpack的stack进行升级。之后再升级安全漏洞。</p>
<p>将安全漏洞修复变成可计划，分期实施的过程。如果一直使用在线库，则不能采取存在漏洞立即删除的策略。</p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>trivy version 0.4.4</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>扫描镜像的命令</p>
<h2 id="采用server-client模式启动服务"><a href="#采用server-client模式启动服务" class="headerlink" title="采用server-client模式启动服务"></a>采用<code>server-client</code>模式启动服务</h2><p>trivy采取<code>server-client</code>模式，server端将漏洞库离线打在镜像内</p>
<h3 id="1-获取离线漏洞库"><a href="#1-获取离线漏洞库" class="headerlink" title="1. 获取离线漏洞库"></a>1. 获取离线漏洞库</h3><p>在trivy版本Release时，会发布漏洞库<br><a href="https://github.com/aquasecurity/trivy-db/releases" target="_blank" rel="noopener">下载连接</a><br><a href="https://github.com/aquasecurity/trivy/issues/423" target="_blank" rel="noopener">参考issue</a></p>
<p>或者选择执行命令下载</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">trivy --download-db-only</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-启动server端"><a href="#2-启动server端" class="headerlink" title="2. 启动server端"></a>2. 启动server端</h3><p>server端命令如下</p>
<blockquote>
<p>–token用于客户端与server连接时，认证使用。<br>–skip-update 跳过漏洞库更新</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">trivy server -d --listen 0.0.0.0:4954 --skip-update --token mail2Uyu</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-启动client端"><a href="#3-启动client端" class="headerlink" title="3. 启动client端"></a>3. 启动client端</h3><p>client端命令如下</p>
<blockquote>
<p>–cache-dir 声明缓存的路径<br>–severity  扫描的漏洞安全级别<br>–vuln-type 扫描的漏洞类型<br>–format    声明报告格式<br>–output    输出的日志位置<br>–ignore-unfixed 忽略未修复的漏洞</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">trivy client --remote http://10.15.6.105:32449 --token mail2Uyu \</span><br><span class="line">             --cache-dir /root/.cache/trivy \</span><br><span class="line">             --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL \</span><br><span class="line">             --vuln-type os \</span><br><span class="line">             --ignore-unfixed \</span><br><span class="line">             --format json \</span><br><span class="line">             --output /root/.cache/reports/scan_report_984890059.json \</span><br><span class="line">             ubuntu:20.04</span><br></pre></td></tr></tbody></table></figure>

<h2 id="使用-trivy-直接扫描"><a href="#使用-trivy-直接扫描" class="headerlink" title="使用 trivy 直接扫描"></a>使用 trivy 直接扫描</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">trivy  --cache-dir /root/.cache/trivy \</span><br><span class="line">       --severity CRITICAL \</span><br><span class="line">       --vuln-type os \</span><br><span class="line">       --format json \</span><br><span class="line">       --output /root/.cache/reports/18.04.json \</span><br><span class="line">       centos:centos7.8.2003</span><br></pre></td></tr></tbody></table></figure>

<h2 id="trivy-跳过-误报漏洞"><a href="#trivy-跳过-误报漏洞" class="headerlink" title="trivy 跳过 误报漏洞"></a>trivy 跳过 误报漏洞</h2><p>在trivy命令执行的同级目录下， 创建<code>.trivyignore</code>文件。以类似下面内容配置忽略的漏洞</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ cat .trivyignore</span><br><span class="line"><span class="comment"># Accept the risk</span></span><br><span class="line">CVE-2018-14618</span><br><span class="line"></span><br><span class="line"><span class="comment"># No impact in our settings</span></span><br><span class="line">CVE-2019-1543</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/aquasecurity/trivy/issues/423" target="_blank" rel="noopener">获取trivy漏洞库</a><br><a href="https://github.com/aquasecurity/trivy#ignore-the-specified-vulnerabilities" target="_blank" rel="noopener">忽略特定的漏洞</a></p>
<p><a href="https://github.com/aquasecurity/trivy#os-packages" target="_blank" rel="noopener">trivy支持的os</a></p>
<p><a href="https://github.com/aquasecurity/trivy/issues/310" target="_blank" rel="noopener">bug-使用厂商(比如. Redhat)提供的危险等级</a><br><a href="https://github.com/aquasecurity/trivy/issues/403" target="_blank" rel="noopener">issue-不能使用非官方源装包(包括自制的包or国内源装包)</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub-drone-dockercompose</title>
    <url>/2020/01/06/devops-20200106-GitHub-drone-dockercompose/</url>
    <content><![CDATA[<html><head></head><body><h1 id="申请Github-OAuth-Application"><a href="#申请Github-OAuth-Application" class="headerlink" title="申请Github OAuth Application"></a>申请Github OAuth Application</h1><blockquote>
<p>Github OAuth Application是为了授权<code>Drone Server</code>读取<code>Github</code>信息。<br><a href="https://blog.yiranzai.cn/posts/26845/" target="_blank" rel="noopener">参考连接</a></p>
</blockquote>
<h1 id="部署drone-mysql-nginx"><a href="#部署drone-mysql-nginx" class="headerlink" title="部署drone+mysql+nginx"></a>部署drone+mysql+nginx</h1><p>部署的组件</p>
<ul>
<li>Drone-server (中央Drone服务器)</li>
<li>Drone-agent  (接受来自中央Drone服务器的指令以执行构建Pipeline)</li>
<li>Mysql        (<code>Drone</code>默认的数据存储是<code>sqlite3</code>, 本次部署改用mysql)</li>
<li>Nginx        (使用<code>Nginx</code>来做对外服务代理)</li>
</ul>
<p>Reference:</p>
<ul>
<li><p><a href="https://docs.drone.io/installation/overview/" target="_blank" rel="noopener">Drone安装官方文档</a></p>
</li>
<li><p><a href="https://docs.drone.io/installation/providers/github/" target="_blank" rel="noopener">Drone集成GitHub官方文档</a></p>
</li>
<li><p><a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">DockerHub Mysql</a></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.7"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone_nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dronenet</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone_mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=drone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=drone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=drone_password</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dronenet</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/to/conf/my.cnf:/etc/mysql/my.cnf:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/to/data:/var/lib/mysql/:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/to/logs:/var/log/mysql/:rw</span></span><br><span class="line">  <span class="attr">drone-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone:1.0.0-rc.5</span> <span class="comment">#不要用latest,latest并非稳定版本</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">drone-server</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">dronenet</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">${DRONE_DATA}:/var/lib/drone/:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock:rw</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DATASOURCE=drone:drone_password@tcp(drone_mysql:3306)/drone?parseTime=true</span>  <span class="comment">#mysql配置，要与上边mysql容器中的配置一致</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DATABASE_DRIVER=mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITHUB_SERVER=https://github.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITHUB_CLIENT_ID=${Your-Github-Client-Id}</span>                                            <span class="comment">#Github Client ID</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITHUB_CLIENT_SECRET=${Your-Github-Client-Secret}</span>                                    <span class="comment">#Github Client Secret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_CAPACITY=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=YOU_KEY_ALQU2M0KdptXUdTPKcEw</span>                                              <span class="comment">#RPC秘钥</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=http</span>			                                                           <span class="comment">#这个配置决定了你激活时仓库中的webhook地址的proto</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=dronetest.qloud.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_USER_CREATE=username:hex,admin:true</span>                                                  <span class="comment">#管理员账号，一般是你github用户名</span></span><br><span class="line">  <span class="attr">drone-agent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/agent:1.0.0-rc.5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">dronetest_agent</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">dronenet</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone-server</span>                                                                               <span class="comment">#依赖drone_server，并在其后启动</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock:rw</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SERVER=http://drone-server:8000</span>	                                               <span class="comment">#drone用的http请求包，url一定要写上协议才能支持</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=YOU_KEY_ALQU2M0KdptXUdTPKcEw</span>                                              <span class="comment">#RPC秘钥，与drone_server中的一致</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_DEBUG=true</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">dronenet:</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行以下命令，创建容器、网络</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure>
<p>修改Nginx配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx ash</span><br></pre></td></tr></tbody></table></figure>
<p>容器内执行以下命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/drone.conf</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name drone.qloud.com;</span><br><span class="line">    location / {</span><br><span class="line">        proxy_pass http://drone-server:8000;</span><br><span class="line">        proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></tbody></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1></li>
<li><ol>
<li>创建仓库，并保证仓库中存在<code>.drone.yml</code>文件;</li>
</ol>
</li>
<li><ol start="2">
<li>访问drone服务， 并刷新。找到刷新出的新项目,点击active;</li>
</ol>
</li>
<li><ol start="3">
<li>查看webhook中是否多出drone的webhook记录；</li>
</ol>
</li>
<li><ol start="4">
<li>手动出发，看是否出发Drone构建过程。<blockquote>
<p>注意： </p>
</blockquote>
<ol>
<li>如果文件名要自定义，需要再drone active的设置里修改成自定义的名字， 负责会发生正常事件触发drone时失败，返回状态码与信息均为<code>N/A</code></li>
<li>Drone 的编写总体符合yaml格式, 但要注意，第一个构建步骤之前是不能加注释的, 否则会报错</li>
</ol>
</li>
</ol>
</li>
</ul>
<p>举例</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">pipeline:</span></span><br><span class="line">  <span class="attr">restore-cache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drillster/drone-volume-cache</span></span><br><span class="line">    <span class="attr">restore:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">mount:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./node_modules</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># Mount the cache volume, needs "Trusted" | https://docs.drone.io/administration/user/admins/</span></span><br><span class="line">    <span class="comment"># DRONE_USER_CREATE=username:{alicfeng},admin:true</span></span><br><span class="line">    <span class="comment"># source path {/tmp/cache/composer need to mkdir on server}</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/tmp/cache/node_modules:/cache</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">build-tests:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span> <span class="string">-v</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">-v</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">cnpm</span> <span class="string">--registry=https://registry.npm.taobao.org</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">rebuild-cache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drillster/drone-volume-cache</span></span><br><span class="line">    <span class="attr">rebuild:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">mount:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./node_modules</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/tmp/cache/node_modules:/cache</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">sit-deploy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">appleboy/drone-ssh</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$host</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$password</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$port</span></span><br><span class="line">    <span class="attr">command_timeout:</span> <span class="string">300s</span></span><br><span class="line">    <span class="attr">script:</span></span><br><span class="line">    <span class="comment"># sit env deploy shell script list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">/www/code.samego.com/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span> <span class="string">-ddd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span> <span class="string">-ddd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">prod-deploy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">appleboy/drone-ssh</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$host</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$password</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$port</span></span><br><span class="line">    <span class="attr">command_timeout:</span> <span class="string">300s</span></span><br><span class="line">    <span class="attr">script:</span></span><br><span class="line">      <span class="comment"># prod env deploy shell script list</span></span><br><span class="line">      <span class="comment"># todo awaiting extend to deploy | main scp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node</span> <span class="string">-v</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">-v</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">/www/code.samego.com/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span> <span class="string">-ddd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span> <span class="string">-ddd</span></span><br><span class="line">    <span class="attr">when:</span></span><br><span class="line">      <span class="attr">event:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">push</span></span><br><span class="line">      <span class="attr">branch:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">mail-notify:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drillster/drone-email</span></span><br><span class="line">    <span class="attr">from:</span> <span class="string">$from</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$password</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="attr">subject:</span> <span class="string">CICD</span> <span class="string">fail</span> <span class="string">notify</span></span><br><span class="line">    <span class="attr">recipients:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">a@test.com</span></span><br><span class="line">    <span class="attr">when:</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">[</span> <span class="string">failure</span> <span class="string">]</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://juejin.im/post/5c81f54c5188257e826a9dc7" target="_blank" rel="noopener">Drone CI for GitHub</a><br><a href="https://juejin.im/entry/5bcd760e6fb9a05d382819fa" target="_blank" rel="noopener">DrONE CD for k8s</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>CI/CD</tag>
        <tag>Drone</tag>
        <tag>Docker</tag>
        <tag>Deployment</tag>
      </tags>
  </entry>
  <entry>
    <title>Gogs集成LDAP</title>
    <url>/2020/01/06/devops-20200106-Gogs%E9%9B%86%E6%88%90LDAP/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><blockquote>
<ol>
<li>Gogs 支持 本地认证+LDAP认证 模式。</li>
<li>Gogs 要求LDAP中的DN必须具备<code>mail</code>属性。</li>
</ol>
</blockquote>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>使用安装时配置的管理帐号登陆gogs系统，点击头像进入<code>管理面板</code>—&gt;<code>认证管理源</code>—&gt;<code>添加新的源</code>,根据自己的ldap配置填入即可。<br>这里就是一个绑定帐号，配置过gitlab的也差不多，也是需要一个帐号来获取ldap 帐号树的信息.</p>
<p><img alt="image" data-src="https://tva1.sinaimg.cn/large/006hT4w1ly1gap9ln0n3uj30ri0jkn0e.jpg"><br><img alt="image" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1gap9q12dy3j30q70iswgb.jpg"></p>
<p>说明:</p>
<p>非必填项都未做配置</p>
<ul>
<li><em>认证名称</em>: 必填项, 随意填写。</li>
<li><em>安全协议</em>: 不加密。</li>
<li><em>主机地址</em>: 此处部署k8s中，用的主机名。如果虚拟机部署可以填IP。</li>
<li><em>主机端口</em>: ldap服务端口。</li>
<li><em>绑定DN</em>: 绑定的dn，此处绑定的admi账号。</li>
<li><em>绑定密码</em>: 上面dn的密码。</li>
<li><em>用户搜索基准</em>: 从<code>ou=Product</code>往下查找匹配用户</li>
<li><em>用户过滤规则</em>: dn的属性<code>objectClass</code>=<code>posixAccount</code> &amp; <code>uid</code>=<code>用户登录输入的用户名</code></li>
<li><em>邮箱属性</em>: 由于Gogs要求邮箱属性必填，所以ldap创建的用户条目，必须具备mail属性。此处填写mail属性的键名</li>
<li><em>该授权认证将作为默认登录源</em>: 勾选该配置。Gogs支持本地认证+ldap认证。比jenkins强太多了。</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.58jb.com/html/gogs-use-ldap-login.html" target="_blank" rel="noopener">Gogs 集成 LDAP</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Gogs</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins集成LDAP</title>
    <url>/2020/01/06/devops-20200106-jenkins%E9%9B%86%E6%88%90LDAP/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><blockquote>
<ol>
<li>ldap创建两个group<code>jenkins-admin</code>和<code>jenkins-manager</code>。并分别将用户<code>admin</code>， <code>operator</code>各自分配到两个组下。（ldapadmin工具操作用户分配组: 在用户条目上右键<code>View\Edit Group Membership</code>，选择要加入的组。</li>
<li>配置之前备份一下config.xml配置文件，方便出错恢复。文件地址<code>/var/lib/jenkins_home/config.xml</code>。</li>
<li>Jenkins一旦集成LDAP认证就无法使用本地认证。因此在保存ldap配置之前多测试下ldap连接，否则配置错误就无法登录jenkins，参考后面，<code>解决错误配置ldap，导致无法登录问题</code>。</li>
<li>Jenkins 的<code>root DN</code>和<code>User search base</code>需要重点注意。</li>
</ol>
</blockquote>
<h1 id="配置jenkins-ldap"><a href="#配置jenkins-ldap" class="headerlink" title="配置jenkins-ldap"></a>配置jenkins-ldap</h1><h2 id="0-LDAP准备"><a href="#0-LDAP准备" class="headerlink" title="0. LDAP准备"></a>0. LDAP准备</h2><p>添加jenkins相关的测试账户和组</p>
<ol>
<li>在group这个ou里面创建2个组，名为jenkins-admin,jenkins-manager。</li>
<li>在ou=people下面创建4个账户，名为admin,test01,test02,test03,配置好邮箱和密码。</li>
<li>在三个组上面添加对应的用户， jenkins-admin组添加admin， jenkins-manager组添加operator用户<br>最终组织图如下：</li>
</ol>
<p><img alt="ldap-group+user" data-src="https://tvax1.sinaimg.cn/large/006hT4w1ly1gap61auymhj30bk0bejrk.jpg"></p>
<h2 id="1-jenkins插件安装"><a href="#1-jenkins插件安装" class="headerlink" title="1. jenkins插件安装"></a>1. jenkins插件安装</h2><p>使用LDAP认证需要安装LDAP插件，安装插件有两种方法：</p>
<p>方法一：后台插件管理里直接安装</p>
<blockquote>
<ul>
<li>优点：简单方便，不需要考虑插件依赖问题</li>
<li>缺点：因为网络等各种问题安装不成功<br>安装方法：登录Jenkins –&gt; 系统管理 –&gt; 插件管理 –&gt; 可选插件 –&gt; 搜索LDAP –&gt; 选中 –&gt; 直接安装 –&gt; 安装完成重启</li>
</ul>
</blockquote>
<p><img alt="jenkins-ldap" data-src="https://tvax1.sinaimg.cn/large/006hT4w1ly1gap6m6gdzij311q08eglw.jpg"><br>如果安装失败，网上也有说在插件管理 –&gt; 高级 –&gt; 升级站点里替换URL为<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code>，但替换了之后依然没有成功，最后还是使用方法二安装成功</p>
<p>方法二：官网下载安装文件后台上传</p>
<blockquote>
<ul>
<li>优点：一定可以安装成功的</li>
<li>缺点：麻烦，要去官网找插件并解决依赖<br>插件下载地址：<a href="https://updates.jenkins-ci.org/download/plugins/" target="_blank" rel="noopener">https://updates.jenkins-ci.org/download/plugins/</a></li>
</ul>
</blockquote>
<p>安装方法：官网下载插件 –&gt; 登录Jenkins –&gt; 系统管理 –&gt; 插件管理 –&gt; 高级 –&gt; 上传插件 –&gt; 选择文件 –&gt; 上传 –&gt; 安装完成后重启<br>上传插件安装可能会失败，大部分都是提示你当前插件依赖某些插件，只需要下载全部依赖插件，按照顺序上传安装即可，LDAP插件安装完成后，所有依赖的插件如下：</p>
<p><img alt="jenkins-ldap-install" data-src="https://tvax1.sinaimg.cn/large/006hT4w1ly1gap6qkkd95j31040eqq3z.jpg"></p>
<h2 id="2-配置LDAP认证"><a href="#2-配置LDAP认证" class="headerlink" title="2. 配置LDAP认证"></a>2. 配置LDAP认证</h2><p>登录Jenkins –&gt; 系统管理 –&gt; 全局安全配置</p>
<p><img alt="jenkin-global-sec-config" data-src="https://tvax1.sinaimg.cn/large/006hT4w1ly1gap6r9uyv0j30wq0ed0tz.jpg"></p>
<p>访问控制选择“LDAP”，Server输入LDAP服务器地址，有其他配置可以点击“Advanced Server Configuration…”</p>
<p><img alt="image" data-src="https://tvax1.sinaimg.cn/large/006hT4w1ly1gap89aax6fj30zy0lijv1.jpg"></p>
<p>说明：</p>
<ul>
<li><strong>root DN</strong>：这里的<code>root DN只</code>是指搜索的根，并非LDAP服务器的<code>root dn</code>。由于LDAP数据库的数据组织结构类似一颗大树，而搜索是递归执行的，理论上，我们如果从子节点（而不是根节点）开始搜索，因为缩小了搜索范围那么就可以获得更高的性能。这里的<code>root DN</code>指的就是这个子节点的DN，当然也可以不填，表示从LDAP的根节点开始搜索</li>
<li><strong>User search base</strong>：这个配置也是为了缩小LDAP搜索的范围，例如Jenkins系统只允许ou为Admin下的用户才能登陆，那么你这里可以填写<code>ou=Admin</code>，这是一个相对的值，相对于上边的root DN，例如你上边的root DN填写的是dc=domain,dc=com，那么user search base这里填写了ou=Admin，那么登陆用户去LDAP搜索时就只会搜索ou=Admin,dc=domain,dc=com下的用户</li>
<li><strong>User search filter</strong>：这个配置定义登陆的“用户名”对应LDAP中的哪个字段，如果你想用LDAP中的uid作为用户名来登录，那么这里可以配置为uid={0}（{0}会自动的替换为用户提交的用户名），如果你想用LDAP中的mail作为用户名来登录，那么这里就需要改为mail={0}。在测试的时候如果提示你user xxx does not exist，而你确定密码输入正确时，就要考虑下输入的用户名是不是这里定义的这个值了</li>
<li><strong>Group search base</strong>：参考上边User search base解释</li>
<li><strong>Group search filter</strong>：这个配置允许你将过滤器限制为所需的objectClass来提高搜索性能，也就是说可以只搜索用户属性中包含某个objectClass的用户，这就要求你对你的LDAP足够了解，一般我们也不配置</li>
<li><strong>Group membership</strong>：没配置，没有详细研究</li>
<li><strong>Manager DN</strong>：这个配置在你的LDAP服务器不允许匿名访问的情况下用来做认证，通常DN为cn=admin,dc=domain,dc=com这样</li>
<li><strong>Manager Password</strong>：上边配置dn的密码</li>
<li><strong>Display Name LDAP attribute</strong>：配置用户的显示名称，一般为显示名称就配置为uid，如果你想显示其他字段属性也可以这里配置，例如mail</li>
<li><strong>Email Address LDAP attribute</strong>：配置用户Email对应的字段属性，一般没有修改过的话都是mail，除非你用其他的字段属性来标识用户邮箱，这里可以配置</li>
<li><strong>Enable Cache</strong>: 当你的LDAP数据量很大或者LDAP服务器性能较差时，可以开启缓存，配置缓存条数和过期时间，那么在过期时间内新请求优先查找本地缓存认证，认证通过则不会去LDAP服务器请求，以减轻LDAP服务器的压力。</li>
</ul>
<p>配置完成后，不要立刻保存，点击``Test LDAP Settings`验证配置的准确性。</p>
<p><img alt="jenkins-test-ldap" data-src="https://tvax1.sinaimg.cn/large/006hT4w1ly1gap7jsk7quj30tn05n0sm.jpg"></p>
<p>这里输入的用户名就是你上边配置的User search filter里定义的LDAP中的属性, 本文配置的是uid 密码就是LDAP的密码</p>
<p><img alt="jekins-ldap-test" data-src="https://tvax1.sinaimg.cn/large/006hT4w1ly1gap7kydsxpj30n60a20sz.jpg"></p>
<h2 id="3-配置ldap分组认证"><a href="#3-配置ldap分组认证" class="headerlink" title="3. 配置ldap分组认证"></a>3. 配置ldap分组认证</h2><p>操作步骤: 选择 <code>jenkins</code> -&gt; <code>系统管理</code>-&gt; <code>全局安全设置</code> -&gt; <code>访问控制</code> -&gt; <code>ldap</code> -&gt; <code>授权策略</code>，选择安全矩阵授权策略。</p>
<p><img alt="image" data-src="https://tvax1.sinaimg.cn/large/006hT4w1ly1gap85k0n35j310g0m0jvt.jpg"></p>
<h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><h2 id="解决错误配置ldap，导致无法登录问题"><a href="#解决错误配置ldap，导致无法登录问题" class="headerlink" title="解决错误配置ldap，导致无法登录问题"></a>解决错误配置ldap，导致无法登录问题</h2><p>为方便用户管理，想通过ldap集中式认证，接入harbor， Gogs， Gitlab， Jenkins，省去每个系统分别创建账号，并管理的问题。但Jenkins集成LDAP配置不当导致Jenkins无法登陆。下面是解决办法：</p>
<ol>
<li>首先在配置LDAP之前，可以先备份配置文件<code>/var/lib/jenkins_home/config.xml</code>， ldap的配置只会影响这个文件，可以在无法登录时，重新还原该文件，并重启jenkins服务.</li>
<li>如果没有备份该文件，也可以手动修改已变化的部分。在config.xml配置文件中找到这段关于ldap认证的信息：<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">securityRealm</span> <span class="attr">class</span>=<span class="string">"hudson.security.LDAPSecurityRealm"</span> <span class="attr">plugin</span>=<span class="string">"ldap@1.20"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disableMailAddrexxxesolver</span>&gt;</span>false<span class="tag">&lt;/<span class="name">disableMailAddrexxxesolver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configurations</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jenkins.security.plugins.ldap.LDAPConfiguration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span>ldap://XXXXXX.com:389<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rootDN</span>&gt;</span>dc=XXXXXX,dc=com<span class="tag">&lt;/<span class="name">rootDN</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inhibitInferRootDN</span>&gt;</span>false<span class="tag">&lt;/<span class="name">inhibitInferRootDN</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userSearchBase</span>&gt;</span><span class="tag">&lt;/<span class="name">userSearchBase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userSearch</span>&gt;</span>uid={0}<span class="tag">&lt;/<span class="name">userSearch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupMembershipStrategy</span> <span class="attr">class</span>=<span class="string">"jenkins.security.plugins.ldap.FromGroupSearchLDAPGroupMembershipStrategy"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">filter</span>&gt;</span>cn=jenkins<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">groupMembershipStrategy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">managerDN</span>&gt;</span>uid=jarry,ou=People,dc=XXXXXX,dc=com<span class="tag">&lt;/<span class="name">managerDN</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">managerPasswordSecret</span>&gt;</span>{AQAAABAAAAAQWfZrb7qoIjeM=}<span class="tag">&lt;/<span class="name">managerPasswordSecret</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">displayNameAttributeName</span>&gt;</span>uid<span class="tag">&lt;/<span class="name">displayNameAttributeName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mailAddressAttributeName</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">mailAddressAttributeName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ignoreIfUnavailable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">ignoreIfUnavailable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extraEnvVars</span> <span class="attr">class</span>=<span class="string">"linked-hash-map"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extraEnvVars</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">jenkins.security.plugins.ldap.LDAPConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configurations</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userIdStrategy</span> <span class="attr">class</span>=<span class="string">"jenkins.model.IdStrategy$CaseInsensitive"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupIdStrategy</span> <span class="attr">class</span>=<span class="string">"jenkins.model.IdStrategy$CaseInsensitive"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disableRolePrefixing</span>&gt;</span>true<span class="tag">&lt;/<span class="name">disableRolePrefixing</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">securityRealm</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
上面的配置不当无法通过ldap认证，jenkins也无法正常登陆。可以把上面一段替换成以下内容：<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">securityRealm</span> <span class="attr">class</span>=<span class="string">"hudson.security.HudsonPrivateSecurityRealm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">disableSignup</span>&gt;</span>false<span class="tag">&lt;/<span class="name">disableSignup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">enableCaptcha</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enableCaptcha</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">securityRealm</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.58jb.com/html/jenkins_ldap_login_failure.html" target="_blank" rel="noopener">Jenkins ldap配置不当导致无法登录</a><br><a href="https://www.cnblogs.com/37Y37/p/9430272.html" target="_blank" rel="noopener">运维吧-ldap4-Jenkins集成OpenLDAP认证</a><br><a href="https://www.cnblogs.com/zhaojiedi1992/p/zhaojiedi_liunx_52_ldap_for_jenkins.html" target="_blank" rel="noopener">ldap-jenkins</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Jenkins</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Drone-Pipeline使用举例</title>
    <url>/2020/01/07/devops-20200107-Drone-Pipeline%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><blockquote>
<ol>
<li>如果使用multi-pipeline， 则在<code>---</code>之后不能跟注释。而且multi-pipeline之间的无法共通数据，每个新的pipeline就是一个完全新的环境。</li>
<li>能在DockerFile中处理的，就不要放在drone中处理。</li>
<li>同一Pipeline不同step可以相互引用生成的文件，不同Pipeline完全独立。都是重新的目录，新的clone文件。</li>
<li><code>Drone Pipeline</code>的构建命令都是在一个容器中去执行的，比如要使用<code>Helm</code>来部署应用，就需要容器有<code>helm</code>，并能够目标<code>Kubernetes</code>集群联通。一种方式：可以自己做一个镜像，把 helm 命令和连接集群的配置文件都内置到里面去，但这样不是很灵活，不具有通用性。另一种方法： Drone 的插件机制，使用插件配置。</li>
</ol>
</blockquote>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="go项目"><a href="#go项目" class="headerlink" title="go项目"></a>go项目</h2><h3 id="项目-go代码："><a href="#项目-go代码：" class="headerlink" title="项目 go代码："></a>项目 go代码：</h3><p>下面是用<code>go-web</code>框架<code>gin</code>创建一个简单的 web 服务，在 GitHub 上创建一个名为 drone-demo 的代码仓库，Clone 到本地，添加名为 main.go 的文件，内容如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line">  <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">  <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">  r := gin.Default()</span><br><span class="line"></span><br><span class="line">  r.GET(<span class="string">"/health"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">    c.JSON(http.StatusOK, gin.H {</span><br><span class="line">      <span class="string">"health"</span>: <span class="literal">true</span>,</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := r.Run(<span class="string">":8080"</span>); err != <span class="literal">nil</span> {</span><br><span class="line">    logrus.WithError(err).Fatal(<span class="string">"Couldn't listen"</span>)</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>服务监听在 8080 端口，提供了一个简单的/health路由，返回一个简单的 JSON 消息表示应用状态状态，本地我们使用的是 go1.11.4 版本，所以可以通过 Go Modules 来管理应用的依赖，在项目目录下面执行 mod init：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">go mod init dronek8s</span><br></pre></td></tr></tbody></table></figure>

<h3 id="项目DockerFile："><a href="#项目DockerFile：" class="headerlink" title="项目DockerFile："></a>项目DockerFile：</h3><blockquote>
<p>生产环境，建议在DockerFile中多阶段构建来将项目的构建和打包工作放在同一个 <code>Dockerfile</code>， 此处为了研究Drone的Pipeline使用，将两步分开。</p>
</blockquote>
<p>在项目根目录下面创建 Dockerfile 文件，内容如下：</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改alpine源为阿里云</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g'</span> /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">  apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">  apk upgrade &amp;&amp; \</span></span><br><span class="line"><span class="bash">  apk add ca-certificates &amp;&amp; update-ca-certificates &amp;&amp; \</span></span><br><span class="line"><span class="bash">  apk add --update tzdata &amp;&amp; \</span></span><br><span class="line"><span class="bash">  rm -rf /var/cache/apk/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> demo-app /home/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> ./demo-app</span></span><br></pre></td></tr></tbody></table></figure>
<p>构建结果文件<code>demo-app</code>拷贝到镜像中去执行来构建镜像，手动构建生成该文件命令是在根目录下面执行 go build 命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># build</span></span><br><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o demo-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker image</span></span><br><span class="line">docker build -t hex/drone-demo .</span><br></pre></td></tr></tbody></table></figure>

<h3 id="项目-drone-yml"><a href="#项目-drone-yml" class="headerlink" title="项目 .drone.yml"></a>项目 <code>.drone.yml</code></h3><p>项目根目录下创建一个名为<code>.drone.yml</code>文件，文件内容如下：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">linter</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">golang:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">GOPROXY:</span> <span class="string">https://mirrors.aliyun.com/goproxy/</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">get</span> <span class="string">-u</span> <span class="string">github.com/golangci/golangci-lint/cmd/golangci-lint</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">golangci-lint</span> <span class="string">run</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">golang:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">GOPROXY:</span> <span class="string">https://mirrors.aliyun.com/goproxy/</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CGO_ENABLED=0</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-o</span> <span class="string">demo-app</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plugins/docker</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">repo:</span> <span class="string">hex/drone-demo</span></span><br><span class="line">      <span class="attr">use_cache:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">username:</span></span><br><span class="line">        <span class="attr">from_secret:</span> <span class="string">docker_username</span></span><br><span class="line">      <span class="attr">password:</span></span><br><span class="line">        <span class="attr">from_secret:</span> <span class="string">docker_password</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">latest</span></span><br><span class="line">    <span class="attr">when:</span></span><br><span class="line">      <span class="attr">event:</span> <span class="string">push</span></span><br><span class="line">      <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">      </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/ipedrazas/drone-helm</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">STABLE_REPO_URL:</span> <span class="string">https://mirror.azure.cn/kubernetes/charts/</span></span><br><span class="line">      <span class="attr">SERVICE_ACCOUNT:</span> <span class="string">tiller</span></span><br><span class="line">      <span class="attr">API_SERVER:</span></span><br><span class="line">        <span class="attr">from_secret:</span> <span class="string">api_server</span></span><br><span class="line">      <span class="attr">KUBERNETES_TOKEN:</span></span><br><span class="line">        <span class="attr">from_secret:</span> <span class="string">kubernetes_token</span></span><br><span class="line">      <span class="attr">KUBERNETES_CERTIFICATE:</span></span><br><span class="line">        <span class="attr">from_secret:</span> <span class="string">kubernetes_ca</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">client-only:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">wait:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">recreate_pods:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">chart:</span> <span class="string">./helm</span></span><br><span class="line">      <span class="attr">release:</span> <span class="string">drk8d</span></span><br><span class="line">      <span class="attr">values_files:</span> <span class="string">["./helm/my-values.yaml"]</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">kube-ops</span></span><br></pre></td></tr></tbody></table></figure>
<p>说明: </p>
<blockquote>
<ol>
<li>linter: 在<code>golang:latest</code>镜像中执行任务<code>commands</code>中的命令</li>
<li>build: 在<code>golang:latest</code>镜像中执行任务<code>commands</code>中的命令</li>
<li>docker: 使用官方插件<code>plugins/docker</code>，该镜像可以指定<code>Dockerfile</code> 的路径，镜像的<code>tag</code>，以及镜像仓库的用户名和密码。<br>此处用户名密码通过<code>secret</code>的方式传入。该secret可以通过<code>drone-cli</code>创建，也可以Drone网页配置。</li>
</ol>
</blockquote>
<p><img alt="drone-add-secret" data-src="https://tva4.sinaimg.cn/large/006hT4w1ly1gaq5l7x3baj31i00pgwgb.jpg"></p>
<blockquote>
<ol start="4">
<li>deploy: 使用官方插件<code>drone-helm</code><br>Drone 的插件页面找到和 Helm 相关的插件：<a href="http://plugins.drone.io/ipedrazas/drone-helm/，这个插件的基本用法如下" target="_blank" rel="noopener">http://plugins.drone.io/ipedrazas/drone-helm/，这个插件的基本用法如下</a>:</li>
</ol>
</blockquote>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">pipeline:</span></span><br><span class="line">  <span class="attr">helm_deploy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/ipedrazas/drone-helm</span></span><br><span class="line">    <span class="attr">skip_tls_verify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">chart:</span> <span class="string">./charts/my-chart</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">${DRONE_BRANCH}</span></span><br><span class="line">    <span class="attr">values:</span> <span class="string">secret.password=${SECRET_PASSWORD},image.tag=${TAG}</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">STAGING</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">development</span></span><br></pre></td></tr></tbody></table></figure>
<p>上面Pipeline相当于：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">helm upgrade --install <span class="variable">${DRONE_BRANCH}</span> ./charts/my-chart --namespace development --<span class="built_in">set</span> secret.password=<span class="variable">${SECRET_PASSWORD}</span>,image.tag=<span class="variable">${TAG}</span></span><br></pre></td></tr></tbody></table></figure>
<p>helm连接<code>Kubernetes</code>集群可以通过<code>API_SERVER</code>、<code>KUBERNETES_TOKEN</code>、<code>KUBERNETES_CERTIFICATE</code> 三个环境变量来指定。<br><code>API_SERVER</code>就是集群的APIServer服务地址；<code>KUBERNETES_TOKEN</code>获取通过创建一个 <code>ServiceAccount</code>，去绑定一个的集群角色权限(比如<code>cluster-admin</code>)，然后获取<code>ServiceAccount</code> 对应的<code>TOKEN</code>。比如我们 Helm 的服务端 Tiller 服务对应的 ServiceAccount，我们可以这样来获取：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ kubectl -n kube-system get secrets | grep tiller</span><br><span class="line">tiller-token-z4f6k                               kubernetes.io/service-account-token   3      115d</span><br><span class="line">$ kubectl get secret tiller-token-z4f6k -o jsonpath={.data.token} -n kube-system | base64 --decode</span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.xxxxx.jO7vEZCzLbtBg</span><br></pre></td></tr></tbody></table></figure>
<p>证书信息同样可以通过上面的 secret 来获取：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl get secret tiller-token-z4f6k -o jsonpath={.data.ca\\.crt} -n kube-system</span><br></pre></td></tr></tbody></table></figure>
<p>注意： 证书信息不需要用 base64 解码。</p>
<h2 id="node项目"><a href="#node项目" class="headerlink" title="node项目"></a>node项目</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">workspace:</span><br><span class="line">  base: /data/apps/opt</span><br><span class="line">  path: web-im</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">pipeline:</span><br><span class="line"> </span><br><span class="line">  restore-cache:</span><br><span class="line">    image: drillster/drone-volume-cache</span><br><span class="line">    restore: <span class="literal">true</span></span><br><span class="line">    mount:</span><br><span class="line">      - node_modules</span><br><span class="line">      - tag</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/apps/opt/web-im:/cache</span><br><span class="line"> </span><br><span class="line">  build:</span><br><span class="line">    image: node:7.8</span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    commands:</span><br><span class="line">      - npm run build</span><br><span class="line">      - mkdir -p publish/demo/javascript</span><br><span class="line">      - cp -r demo/images publish/demo</span><br><span class="line">      - cp -r demo/stylesheet publish/demo</span><br><span class="line">      - cp -r demo/javascript/dist publish/demo/javascript/</span><br><span class="line">      - cp -r demo/javascript/src publish/demo/javascript/</span><br><span class="line">      - mkdir publish/sdk</span><br><span class="line">      - cp -r sdk/dist publish/sdk</span><br><span class="line">      - cp -r sdk/src publish/sdk</span><br><span class="line">      - cp sdk/*.* publish/sdk</span><br><span class="line">      - cp -r webrtc  publish</span><br><span class="line">      - cp favicon.ico publish/</span><br><span class="line">      - cp index.html publish/</span><br><span class="line">      - cp CHANGELOG.md publish/</span><br><span class="line">      - cp package.json publish/</span><br><span class="line">      - cp webpack.config.js publish/</span><br><span class="line">      - cp README.md publish/</span><br><span class="line">      - cp .babelrc publish/</span><br><span class="line">      - cp -rf publish image/docker/webim/webim</span><br><span class="line">      - <span class="built_in">echo</span> <span class="string">'build success'</span></span><br><span class="line">    when:</span><br><span class="line">      branch: [ dev, online ]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  dockerize-latest:</span><br><span class="line">    image: plugins/docker</span><br><span class="line">    environment:</span><br><span class="line">      - DOCKER_LAUNCH_DEBUG=<span class="literal">true</span></span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">    repo: docker-registry-cn.easemob.com/kubernetes/im/webim</span><br><span class="line">    tags: latest</span><br><span class="line">    registry: docker-registry-cn.easemob.com</span><br><span class="line">    secrets: [ docker_username, docker_password ]</span><br><span class="line">    dockerfile: image/docker/webim/Dockerfile</span><br><span class="line">    context: image/docker/webim/</span><br><span class="line">    when:</span><br><span class="line">      branch: dev</span><br><span class="line"> </span><br><span class="line">  deploy-latest:</span><br><span class="line">    image: docker-registry-cn.easemob.com/kubernetes/im/webim-deploy:latest</span><br><span class="line">    pull: <span class="literal">true</span></span><br><span class="line">    environment:</span><br><span class="line">      - DOCKER_LAUNCH_DEBUG=<span class="literal">true</span></span><br><span class="line">      - TAG=latest</span><br><span class="line">    secrets: [ ssh_key, jumpserver_host, jumpserver_port, sandbox_host ]</span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">    when:</span><br><span class="line">      branch: dev</span><br><span class="line"> </span><br><span class="line">  dockerize-online:</span><br><span class="line">    image: plugins/docker</span><br><span class="line">    environment:</span><br><span class="line">      - DOCKER_LAUNCH_DEBUG=<span class="literal">true</span></span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">    repo: docker-registry-cn.easemob.com/kubernetes/im/webim</span><br><span class="line">    tags: <span class="variable">${DRONE_COMMIT:0:7}</span></span><br><span class="line">    registry: docker-registry-cn.easemob.com</span><br><span class="line">    secrets: [ docker_username, docker_password ]</span><br><span class="line">    dockerfile: image/docker/webim/Dockerfile</span><br><span class="line">    context: image/docker/webim/</span><br><span class="line">    when:</span><br><span class="line">      branch: online</span><br><span class="line"> </span><br><span class="line">  deploy-online:</span><br><span class="line">    image: docker-registry-cn.easemob.com/kubernetes/im/webim-online:latest</span><br><span class="line">    pull: <span class="literal">true</span></span><br><span class="line">    environment:</span><br><span class="line">      - DOCKER_LAUNCH_DEBUG=<span class="literal">true</span></span><br><span class="line">      - TAG=<span class="variable">${DRONE_COMMIT:0:7}</span></span><br><span class="line">    secrets: [ ssh_key, jumpserver_host, jumpserver_port, online_host ]</span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">    when:</span><br><span class="line">      branch: online</span><br><span class="line"> </span><br><span class="line">  rollback-online:</span><br><span class="line">    image: docker-registry-cn.easemob.com/kubernetes/im/webim-rollback:latest</span><br><span class="line">    pull: <span class="literal">true</span></span><br><span class="line">    environment:</span><br><span class="line">      - DOCKER_LAUNCH_DEBUG=<span class="literal">true</span></span><br><span class="line">    secrets: [ ssh_key, jumpserver_host, jumpserver_port, online_host ]</span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">    when:</span><br><span class="line">      branch: rollback</span><br><span class="line"> </span><br><span class="line">  rebuild-cache:</span><br><span class="line">      image: drillster/drone-volume-cache</span><br><span class="line">      rebuild: <span class="literal">true</span></span><br><span class="line">      mount:</span><br><span class="line">        - node_modules</span><br><span class="line">        - tag</span><br><span class="line">      volumes:</span><br><span class="line">        - /data/apps/opt/web-im:/cache</span><br><span class="line"> </span><br><span class="line">  notify:</span><br><span class="line">    image: drillster/drone-email</span><br><span class="line">    port: 25</span><br><span class="line">    secrets: [ plugin_host, plugin_from, plugin_username, plugin_password ]</span><br><span class="line">    when:</span><br><span class="line">      status:  [ failure, success ]</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Drone</tag>
        <tag>Pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-Pipeline使用举例</title>
    <url>/2020/01/07/devops-20200107-Jenkins-Pipeline%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><blockquote>
<ol>
<li>能在DockerFile中做的，比如多阶段构建，就在dockerfile中做。不能再jenkinsfile中做太多特例化的事情，否则不好管理迁移。</li>
<li>如果有时间，可以做一个简单的ui来配置生成jenkinsfile，这样就可以省去开发学习jenkinsFile的成本。也可以限制住，把控标准。</li>
</ol>
</blockquote>
<h1 id="JenkinsFile-文档目录"><a href="#JenkinsFile-文档目录" class="headerlink" title="JenkinsFile 文档目录"></a>JenkinsFile 文档目录</h1><ol>
<li>拉代码</li>
<li>代码构建</li>
<li>构建+推送镜像</li>
<li>推送初始化脚本</li>
<li>推送chart</li>
</ol>
<h2 id="1-拉带码"><a href="#1-拉带码" class="headerlink" title="1 拉带码"></a>1 拉带码</h2><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">stage(<span class="string">'Check out'</span>) {</span><br><span class="line">    checkout scm</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-1-镜像版本控制-–-ver"><a href="#1-1-镜像版本控制-–-ver" class="headerlink" title="1.1 镜像版本控制  –  {ver}"></a>1.1 镜像版本控制  –  {ver}</h3><p>master  –&gt; latest<br>release –&gt; stable<br>TAG       –&gt; 保持不便 </p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">name_list     = <span class="string">"$JOB_NAME"</span>.split(<span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">def</span> ver       = name_list[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> ver_map = [<span class="string">"master"</span>: <span class="string">"latest"</span>, <span class="string">"release"</span>: <span class="string">"stable"</span>]</span><br><span class="line"><span class="keyword">if</span>(ver_map.containsKey(ver)){</span><br><span class="line">    ver = ver_map.get(ver)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-2-镜像版本控制-–-ver"><a href="#1-2-镜像版本控制-–-ver" class="headerlink" title="1.2 镜像版本控制  –  {ver}"></a>1.2 镜像版本控制  –  {ver}</h3><p>举例：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">jenkins配置的job名为 'qloudobp-customer-profiles'  选择 master 分支构建</span><br><span class="line">$JOB_NAME         : qloudobp-customer-profiles/master</span><br><span class="line">name_list         : ['qloudobp-customer-profiles', 'master']</span><br><span class="line">ver               : 'master'</span><br><span class="line">job               : 'qloudobp-customer-profiles'</span><br><span class="line">job_list          : ['qloudobp', 'customer', 'profiles']</span><br><span class="line">project           : qloudobp</span><br><span class="line">job_size          : 2</span><br><span class="line">img_list          : ['customer', 'profiles']</span><br><span class="line">img               : customer-profiles</span><br><span class="line">ver               : 'latest' (重赋值)</span><br><span class="line">tag               : "reg.qloud.com/qloudobp/customer-profiles:latest"</span><br><span class="line">script_dir        :  qloudobp/customer-profiles/latest</span><br><span class="line">slug_dir          : /tmp/qloudobp/customer-profiles/latest</span><br><span class="line">slug_file         : /tmp/qloudobp/customer-profiles/latest/slug.tgz</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">name_list     = <span class="string">"$JOB_NAME"</span>.split(<span class="string">'/'</span>) </span><br><span class="line"><span class="keyword">def</span> ver       = name_list[<span class="number">1</span>]           </span><br><span class="line"><span class="keyword">def</span> job       = name_list[<span class="number">0</span>]     </span><br><span class="line">job_list      = <span class="string">"$job"</span>.split(<span class="string">'-'</span>)      </span><br><span class="line"><span class="keyword">def</span> project   = job_list[<span class="number">0</span>]         </span><br><span class="line">job_size      = job_list.size()<span class="number">-1</span></span><br><span class="line">img_list      = []</span><br><span class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> (<span class="number">1.</span>.job_size)){</span><br><span class="line">    img_list.add(job_list[x])</span><br><span class="line">}</span><br><span class="line"><span class="keyword">def</span> img       = img_list.join(<span class="string">'-'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> ver_map   = [<span class="string">"master"</span>: <span class="string">"latest"</span>, <span class="string">"release"</span>: <span class="string">"stable"</span>]</span><br><span class="line"><span class="keyword">if</span>(ver_map.containsKey(ver)){</span><br><span class="line">    ver       = ver_map.get(ver)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> tag       = <span class="string">"reg.qloud.com/'${ project }'/'${ img }':'${ ver }'"</span></span><br><span class="line"><span class="comment">//  def tag   = "reg.qloud.com"+"/"+project+'/'+img+':'+ver</span></span><br><span class="line"><span class="keyword">def</span> script_dir= project+<span class="string">'/'</span>+img+<span class="string">'/'</span>+ver</span><br><span class="line"><span class="keyword">def</span> slug_dir  = <span class="string">"/tmp/'${script_dir}'"</span></span><br><span class="line"><span class="keyword">def</span> slug_file = <span class="string">"'${slug_dir}'/qloudmart.tgz"</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-代码构建"><a href="#2-代码构建" class="headerlink" title="2. 代码构建"></a>2. 代码构建</h2><h3 id="2-1-mvn项目构建"><a href="#2-1-mvn项目构建" class="headerlink" title="2.1 mvn项目构建"></a>2.1 mvn项目构建</h3><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> mvnHome   = tool <span class="string">'maven_3_5_4'</span></span><br><span class="line"></span><br><span class="line">stage(<span class="string">'Build'</span>) {</span><br><span class="line">    withEnv([<span class="string">"PATH+MAVEN=${ mvnHome }/bin"</span>]) {</span><br><span class="line">        sh <span class="string">"mvn clean package -DskipTests=true"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-2-Node项目构建"><a href="#2-2-Node项目构建" class="headerlink" title="2.2 Node项目构建"></a>2.2 Node项目构建</h3><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> nodeHome  = tool <span class="string">'NodeJS_8.12'</span></span><br><span class="line">stage(<span class="string">'Build'</span>) {</span><br><span class="line"></span><br><span class="line">    withEnv([<span class="string">"PATH+NODE=${ nodeHome }/bin"</span>]) {</span><br><span class="line">        dir(<span class="string">'QloudMartUI'</span>){</span><br><span class="line">            sh <span class="string">'npm install'</span></span><br><span class="line">            sh <span class="string">"${ng_cmd}"</span></span><br><span class="line">        }</span><br><span class="line">        dir(<span class="string">'QloudMartUI/qloudmart'</span>){</span><br><span class="line">            sh <span class="string">'npm install'</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-Build-Push-镜像"><a href="#3-Build-Push-镜像" class="headerlink" title="3. Build+Push 镜像"></a>3. Build+Push 镜像</h2><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> script_dir= project+<span class="string">'/'</span>+img+<span class="string">'/'</span>+ver</span><br><span class="line"><span class="keyword">def</span> slug_dir  = <span class="string">"/tmp/'${script_dir}'"</span></span><br><span class="line"><span class="keyword">def</span> slug_file = <span class="string">"'${slug_dir}'/slug.tgz"</span></span><br><span class="line">stage(<span class="string">'Docker build'</span>) {</span><br><span class="line">    <span class="comment">// 创建存放代码slug包的目录</span></span><br><span class="line">    sh(<span class="string">"mkdir -p '${ slug_dir }'"</span>)</span><br><span class="line">    <span class="comment">// 在QloudMartUI目录，将当前文件夹除去.git src 的所有内容打成 slug.tgz包</span></span><br><span class="line">    <span class="comment">// 目录结构为： /tmp/{project}/{img}/{ver}/slug.tgz</span></span><br><span class="line">    dir(<span class="string">'QloudMartUI'</span>){</span><br><span class="line">       sh(<span class="string">"tar -z --exclude='.git' --exclude='src' -cf '${slug_file}' ."</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 将/tmp/{project}/{img}/{ver}/slug.tgz 拷贝到 Dockerfile 同级</span></span><br><span class="line">    sh(<span class="string">"cp ${slug_file} ."</span>)</span><br><span class="line">    <span class="comment">// docker构建</span></span><br><span class="line">    sh(<span class="string">"docker build -t ${tag} ."</span>)</span><br><span class="line">    <span class="comment">// 推送镜像</span></span><br><span class="line">    sh(<span class="string">"docker push ${tag}"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-推送初始化脚本"><a href="#4-推送初始化脚本" class="headerlink" title="4. 推送初始化脚本"></a>4. 推送初始化脚本</h2><p>项目根目录下如果没有/deploy/install.sh 那么说明该项目不需要初始化脚本，paas</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">stage(<span class="string">'Send script'</span>) {</span><br><span class="line">    <span class="keyword">def</span> exists = fileExists <span class="string">'./deploy/install.sh'</span></span><br><span class="line">    <span class="keyword">if</span> (exists) {</span><br><span class="line">        sh(<span class="string">"tar -zcvf deploy.tgz deploy/"</span>)</span><br><span class="line">        sh(<span class="string">"curl -v -u qloudinstall:qloudinstall123 -X POST 'http://qloudnexus.mart.service.sd/service/rest/v1/components?repository=qloudinstall' -H 'accept: application/json' -H 'Content-Type: multipart/form-data' -F 'raw.directory=${script_dir}' -F 'raw.asset1=@deploy.tgz;type=application/x-compressed-tar' -F 'raw.asset1.filename=deploy.tgz'"</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        println <span class="string">"File doesn't exist"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="5-推送chart"><a href="#5-推送chart" class="headerlink" title="5. 推送chart"></a>5. 推送chart</h2><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">stage(<span class="string">'Send Helm'</span>) {</span><br><span class="line">    <span class="keyword">def</span> gitUrl = <span class="string">'https://192.168.11.21/plugins/git/qloudlet/charts.git'</span></span><br><span class="line">    <span class="keyword">def</span> gitCredentialsId = <span class="string">'4116a55e-8551-46b7-b864-d182d6e16657'</span></span><br><span class="line">    git <span class="string">credentialsId:</span> <span class="string">"${ gitCredentialsId }"</span>, <span class="string">url:</span> <span class="string">"${ gitUrl }"</span></span><br><span class="line">    helm <span class="keyword">package</span> <span class="string">''</span></span><br><span class="line">    curl -X POST <span class="string">"http://192.168.11.130:8081/service/rest/v1/components?repository=market"</span> -H <span class="string">"accept: application/json"</span> -H <span class="string">"Content-Type: multipart/form-data"</span> -F <span class="string">"helm.asset=@qloudmonitor-1.2.1.tgz;type=application/x-compressed-tar"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="6-清理环境"><a href="#6-清理环境" class="headerlink" title="6. 清理环境"></a>6. 清理环境</h2><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">stage(<span class="string">'Cleanup'</span>) {</span><br><span class="line">    withEnv([<span class="string">"PATH+MAVEN=${ mvnHome }/bin"</span>]) {</span><br><span class="line">        sh <span class="string">"mvn -Dmaven.test.failure.ignore clean"</span></span><br><span class="line">    }</span><br><span class="line">    sh(<span class="string">"docker rmi ${tag}"</span>)</span><br><span class="line">    sh(<span class="string">"rm -f ${slug_file}"</span>)</span><br><span class="line">    sh <span class="string">"rm -rf *"</span></span><br><span class="line">    sh <span class="string">"rm -rf .git"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="项目个性化需求"><a href="#项目个性化需求" class="headerlink" title="项目个性化需求"></a>项目个性化需求</h1><h2 id="前端命令"><a href="#前端命令" class="headerlink" title="前端命令"></a>前端命令</h2><p>如果job名末尾为<code>-onlyapi</code> ng命令为 <code>ng build -c=onlyApi</code><br>                否则     ng命令为 <code>ng build --prod</code></p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> nodeHome  = tool <span class="string">'NodeJS_8.12'</span></span><br><span class="line"><span class="keyword">def</span> label = <span class="string">"$project"</span>.split(<span class="string">'-'</span>)[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">def</span> ng_cmd = <span class="string">"ng build --prod"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> ng_map = [<span class="string">"onlyapi"</span>: <span class="string">"ng build -c=onlyApi"</span>]</span><br><span class="line"><span class="keyword">if</span>(ng_map.containsKey(label)){</span><br><span class="line">    ng_cmd = ng_map.get(label)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">withEnv([<span class="string">"PATH+NODE=${ nodeHome }/bin"</span>]) {</span><br><span class="line">    sh <span class="string">'npm install'</span></span><br><span class="line">    sh <span class="string">"${ng_cmd}"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="在某个目录下执行命令"><a href="#在某个目录下执行命令" class="headerlink" title="在某个目录下执行命令"></a>在某个目录下执行命令</h2><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//例 在 **.git/QloudMartUI 目录下 执行编译命令</span></span><br><span class="line">dir(<span class="string">'QloudMartUI/qloudmart'</span>){</span><br><span class="line">    sh <span class="string">'npm install'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h1><h2 id="node-项目"><a href="#node-项目" class="headerlink" title="node 项目"></a>node 项目</h2><p>jenkinsFile:</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">node {</span><br><span class="line">    currentBuild.result = <span class="string">"SUCCESS"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> ng_cmd = <span class="string">"ng build --prod"</span></span><br><span class="line">    <span class="keyword">def</span> nodeHome  = tool <span class="string">'NodeJS_8.12'</span></span><br><span class="line">    <span class="keyword">def</span> ng_map = [<span class="string">"onlyapi"</span>: <span class="string">"ng build -c=onlyApi"</span>]</span><br><span class="line">    <span class="keyword">if</span>(ng_map.containsKey(label)){</span><br><span class="line">        ng_cmd = ng_map.get(label)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    name_list     = <span class="string">"$JOB_NAME"</span>.split(<span class="string">'/'</span>) <span class="comment">//eg : 'qloudservice-qloudapi/master' --&gt; ['qloudservice-qloudapi', 'master']</span></span><br><span class="line">    <span class="keyword">def</span> ver       = name_list[<span class="number">1</span>]           <span class="comment">//eg : 'master'</span></span><br><span class="line">    <span class="keyword">def</span> job       = name_list[<span class="number">0</span>]           <span class="comment">//eg : 'qloudservice-qloudapi'</span></span><br><span class="line">    job_list      = <span class="string">"$job"</span>.split(<span class="string">'-'</span>)      <span class="comment">//eg : 'qloudservice-qloudapi' --&gt; ['qloudservice', 'qloudapi']</span></span><br><span class="line">    <span class="keyword">def</span> project   = job_list[<span class="number">0</span>]            <span class="comment">//eg : 'qloudservice'</span></span><br><span class="line">    job_size      = job_list.size()<span class="number">-1</span></span><br><span class="line">    img_list      = []</span><br><span class="line">    <span class="keyword">for</span>(x <span class="keyword">in</span> (<span class="number">1.</span>.job_size)){</span><br><span class="line">    img_list.add(job_list[x])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">def</span> img       = img_list.join(<span class="string">'-'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> ver_map = [<span class="string">"master"</span>: <span class="string">"latest"</span>, <span class="string">"release"</span>: <span class="string">"stable"</span>]</span><br><span class="line">    <span class="keyword">if</span>(ver_map.containsKey(ver)){</span><br><span class="line">        ver = ver_map.get(ver)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> tag = <span class="string">"reg.qloud.com/'${ project }'/'${ img }':'${ ver }'"</span></span><br><span class="line">    <span class="comment">//  def tag = "reg.qloud.com"+"/"+project+'/'+img+':'+ver</span></span><br><span class="line">    <span class="keyword">def</span> script_dir= project+<span class="string">'/'</span>+img+<span class="string">'/'</span>+ver</span><br><span class="line">    <span class="keyword">def</span> slug_dir  = <span class="string">"/tmp/'${script_dir}'"</span></span><br><span class="line">    <span class="keyword">def</span> slug_file = <span class="string">"'${slug_dir}'/qloudmart.tgz"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        stage(<span class="string">'Check out'</span>) {</span><br><span class="line">            checkout scm</span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'Cleanup-before'</span>) {</span><br><span class="line"></span><br><span class="line">            withEnv([<span class="string">"PATH+NODE=${ nodeHome }/bin"</span>]) {</span><br><span class="line">                <span class="comment">// sh 'npm prune'</span></span><br><span class="line">                 sh <span class="string">"rm -rf QloudMartUI/node_modules"</span></span><br><span class="line">                 sh <span class="string">"rm -rf QloudMartUI/package-lock.json"</span></span><br><span class="line">                 sh <span class="string">"rm -rf QloudMartUI/qloudmart/node_modules"</span></span><br><span class="line">                 sh <span class="string">"rm -rf QloudMartUI/qloudmart/package-lock.json"</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'Build'</span>) {</span><br><span class="line"></span><br><span class="line">            withEnv([<span class="string">"PATH+NODE=${ nodeHome }/bin"</span>]) {</span><br><span class="line">                dir(<span class="string">'QloudMartUI'</span>){</span><br><span class="line">                    sh <span class="string">'npm install'</span></span><br><span class="line">                    sh <span class="string">"${ng_cmd}"</span></span><br><span class="line">            }</span><br><span class="line">                dir(<span class="string">'QloudMartUI/qloudmart'</span>){</span><br><span class="line">                    sh <span class="string">'npm install'</span></span><br><span class="line">            }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'Docker build'</span>) {</span><br><span class="line">            sh(<span class="string">"mkdir -p '${ slug_dir }'"</span>)</span><br><span class="line">            dir(<span class="string">'QloudMartUI'</span>){</span><br><span class="line">                sh(<span class="string">"tar -z --exclude='.git' --exclude='src' -cf '${slug_file}' ."</span>)</span><br><span class="line">            }</span><br><span class="line">            sh(<span class="string">"cp ${slug_file} ."</span>)</span><br><span class="line">            sh(<span class="string">"docker build -t ${tag} ."</span>)</span><br><span class="line">            sh(<span class="string">"docker push ${tag}"</span>)</span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'Send script'</span>) {</span><br><span class="line">            <span class="keyword">def</span> exists = fileExists <span class="string">'./deploy/install.sh'</span></span><br><span class="line">            <span class="keyword">if</span> (exists) {</span><br><span class="line">                sh(<span class="string">"tar -zcvf deploy.tgz deploy/"</span>)</span><br><span class="line">                sh(<span class="string">"curl -v -u admin:admin123 -X POST 'http://qloudnexus.mart.service.sd/service/rest/v1/components?repository=qloudinstall' -H 'accept: application/json' -H 'Content-Type: multipart/form-data' -F 'raw.directory=${script_dir}' -F 'raw.asset1=@deploy.tgz;type=application/x-compressed-tar' -F 'raw.asset1.filename=deploy.tgz'"</span>)</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                println <span class="string">"File doesn't exist"</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'Send Helm'</span>) {</span><br><span class="line">            <span class="keyword">def</span> gitUrl           = <span class="string">'https://192.168.11.21/plugins/git/qloudmart/market-service.git'</span></span><br><span class="line">            <span class="keyword">def</span> gitCredentialsId = <span class="string">'4116a55e-8551-46b7-b864-d182d6e16657'</span></span><br><span class="line">            git <span class="string">credentialsId:</span> <span class="string">"${ gitCredentialsId }"</span>, <span class="string">url:</span> <span class="string">"${ gitUrl }"</span></span><br><span class="line">            curl -X POST <span class="string">"http://192.168.11.130:8081/service/rest/v1/components?repository=market"</span> -H <span class="string">"accept: application/json"</span> -H <span class="string">"Content-Type: multipart/form-data"</span> -F <span class="string">"helm.asset=@qloudmonitor-1.2.1.tgz;type=application/x-compressed-tar"</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Cleanup'</span>) {</span><br><span class="line">            withEnv([<span class="string">"PATH+MAVEN=${ mvnHome }/bin"</span>]) {</span><br><span class="line">                sh <span class="string">"mvn -Dmaven.test.failure.ignore clean"</span></span><br><span class="line">                sh(<span class="string">"docker rmi ${tag}"</span>)</span><br><span class="line">                sh(<span class="string">"rm -f ${slug_file}"</span>)</span><br><span class="line">                sh <span class="string">"rm -rf *"</span></span><br><span class="line">                sh <span class="string">"rm -rf .git"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (err) {</span><br><span class="line">        currentBuild.result = <span class="string">"FAILURE"</span></span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>DockerFile:</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> reg.qloud.com/qloudpaas/node:<span class="number">8.12</span></span><br><span class="line"><span class="comment"># Create app directory</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></span><br><span class="line"><span class="comment"># Bundle app source</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./QloudMartUI/qloudmart.tgz /usr/src/app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app/qloudmart</span></span><br><span class="line"><span class="keyword">ENV</span> NODE_ENV dev</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/src/app/qloudmart/start.sh"</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># Build image</span></span><br><span class="line"><span class="comment"># docker build -t qloud_market:v1 .</span></span><br><span class="line"><span class="comment">#image save</span></span><br><span class="line"><span class="comment">#docker save d38ea8888a73   -o ~/work/thirdCode/QloudMarket/QloudMarket.tar</span></span><br><span class="line"><span class="comment">#docker images|grep none|awk '{print "docker rmi -f " $3}'|sh</span></span><br><span class="line"><span class="comment"># docker rm -f $(docker ps -q -a)</span></span><br><span class="line"><span class="comment">#tar zcvf qloudmart.tgz qloudmart</span></span><br><span class="line"><span class="comment"># Run docker</span></span><br><span class="line"><span class="comment"># docker run -e SYSTEMCONFIG='{"port":"8080","url":"http://49.4.93.173:32090"}' -p 8080:8080  qloud_market:v1</span></span><br><span class="line"><span class="comment">#数据格式 http://localhost:8080/api/products/seed</span></span><br><span class="line"><span class="comment">#{</span></span><br><span class="line"><span class="comment">#  "port":"8080",</span></span><br><span class="line"><span class="comment">#  "url":"http://49.4.93.173:32090"</span></span><br><span class="line"><span class="comment">#}</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="maven-项目"><a href="#maven-项目" class="headerlink" title="maven 项目"></a>maven 项目</h2><p>jenkinsFile:</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">node {</span><br><span class="line">    currentBuild.result = <span class="string">"SUCCESS"</span></span><br><span class="line">    <span class="keyword">def</span> mvnHome   = tool <span class="string">'maven_3_5_4'</span></span><br><span class="line"></span><br><span class="line">    name_list     = <span class="string">"$JOB_NAME"</span>.split(<span class="string">'/'</span>) <span class="comment">//eg : 'qloudservice-qloudapi/master' --&gt; ['qloudservice-qloudapi', 'master']</span></span><br><span class="line">    <span class="keyword">def</span> ver       = name_list[<span class="number">1</span>]           <span class="comment">//eg : 'master'</span></span><br><span class="line">    <span class="keyword">def</span> job       = name_list[<span class="number">0</span>]           <span class="comment">//eg : 'qloudservice-qloudapi'</span></span><br><span class="line">    job_list      = <span class="string">"$job"</span>.split(<span class="string">'-'</span>)      <span class="comment">//eg : 'qloudservice-qloudapi' --&gt; ['qloudservice', 'qloudapi']</span></span><br><span class="line">    <span class="keyword">def</span> project   = job_list[<span class="number">0</span>]            <span class="comment">//eg : 'qloudservice'</span></span><br><span class="line">    job_size      = job_list.size()<span class="number">-1</span></span><br><span class="line">    img_list      = []</span><br><span class="line">    <span class="keyword">for</span>(x <span class="keyword">in</span> (<span class="number">1.</span>.job_size)){</span><br><span class="line">    img_list.add(job_list[x])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">def</span> img       = img_list.join(<span class="string">'-'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> ver_map = [<span class="string">"master"</span>: <span class="string">"latest"</span>, <span class="string">"release"</span>: <span class="string">"stable"</span>]</span><br><span class="line">    <span class="keyword">if</span>(ver_map.containsKey(ver)){</span><br><span class="line">        ver = ver_map.get(ver)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> tag = <span class="string">"reg.qloud.com/'${ project }'/'${ img }':'${ ver }'"</span></span><br><span class="line">    <span class="comment">//  def tag = "reg.qloud.com"+"/"+project+'/'+img+':'+ver</span></span><br><span class="line">    <span class="keyword">def</span> script_dir= project+<span class="string">'/'</span>+img+<span class="string">'/'</span>+ver</span><br><span class="line">    <span class="keyword">def</span> slug_dir  = <span class="string">"/tmp/'${script_dir}'"</span></span><br><span class="line">    <span class="keyword">def</span> slug_file = <span class="string">"'${slug_dir}'/slug.tgz"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        stage(<span class="string">'Check out'</span>) {</span><br><span class="line">            checkout scm</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Build'</span>) {</span><br><span class="line">            withEnv([<span class="string">"PATH+MAVEN=${ mvnHome }/bin"</span>]) {</span><br><span class="line">                sh <span class="string">"mvn clean package -DskipTests=true"</span>        <span class="comment">//执行mvn命令</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Docker build'</span>) {</span><br><span class="line">            sh(<span class="string">"mkdir -p '${ slug_dir }'"</span>)</span><br><span class="line">            sh(<span class="string">"tar -z --exclude='.git' --exclude='src' -cf '${slug_file}' ."</span>)</span><br><span class="line">            sh(<span class="string">"cp ${slug_file} ."</span>)</span><br><span class="line">            sh(<span class="string">"docker build -t ${tag} ."</span>)</span><br><span class="line">            sh(<span class="string">"docker push ${tag}"</span>)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Send script'</span>) {</span><br><span class="line">            <span class="keyword">def</span> exists = fileExists <span class="string">'./deploy/install.sh'</span></span><br><span class="line">            <span class="keyword">if</span> (exists) {</span><br><span class="line">                sh(<span class="string">"tar -zcvf deploy.tgz deploy/"</span>)</span><br><span class="line">                sh(<span class="string">"curl -v -u admin:admin123 -X POST 'http://qloudnexus.mart.service.sd/service/rest/v1/components?repository=qloudinstall' -H 'accept: application/json' -H 'Content-Type: multipart/form-data' -F 'raw.directory=${script_dir}' -F 'raw.asset1=@deploy.tgz;type=application/x-compressed-tar' -F 'raw.asset1.filename=deploy.tgz'"</span>)</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                println <span class="string">"File doesn't exist"</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'Send Helm'</span>) {</span><br><span class="line">            <span class="keyword">def</span> gitUrl           = <span class="string">'https://192.168.11.21/plugins/git/qloudlet/charts.git'</span></span><br><span class="line">            <span class="keyword">def</span> gitCredentialsId = <span class="string">'4116a55e-8551-46b7-b864-d182d6e16657'</span></span><br><span class="line">            git <span class="string">credentialsId:</span> <span class="string">"${ gitCredentialsId }"</span>, <span class="string">url:</span> <span class="string">"${ gitUrl }"</span></span><br><span class="line">            curl -X POST <span class="string">"http://192.168.11.130:8081/service/rest/v1/components?repository=market"</span> -H <span class="string">"accept: application/json"</span> -H <span class="string">"Content-Type: multipart/form-data"</span> -F <span class="string">"helm.asset=@qloudmonitor-1.2.1.tgz;type=application/x-compressed-tar"</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Cleanup'</span>) {</span><br><span class="line">            withEnv([<span class="string">"PATH+MAVEN=${ mvnHome }/bin"</span>]) {</span><br><span class="line">                sh <span class="string">"mvn -Dmaven.test.failure.ignore clean"</span></span><br><span class="line">            }</span><br><span class="line">            sh(<span class="string">"docker rmi ${tag}"</span>)</span><br><span class="line">            sh(<span class="string">"rm -f ${slug_file}"</span>)</span><br><span class="line">            sh <span class="string">"rm -rf *"</span></span><br><span class="line">            sh <span class="string">"rm -rf .git"</span></span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (err) {</span><br><span class="line">        currentBuild.result = <span class="string">"FAILURE"</span></span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>DockerFile:</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> reg.qloud.com/qloudpaas/jrunner:<span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ENV</span> LANG C.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -x; \</span></span><br><span class="line"><span class="bash">    { \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> [program:customer-profile]; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="built_in">command</span>=/runner/init start web; \</span></span><br><span class="line"><span class="bash">        autorestart=<span class="literal">true</span>; \</span></span><br><span class="line"><span class="bash">    } &gt; /etc/supervisor/conf.d/customer-profile.conf</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Jenkins</tag>
        <tag>Pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>LDAP部署手册</title>
    <url>/2020/01/08/devops-20200108-LDAP%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><blockquote>
<ol>
<li>DN 是一条LDAP记录项的名字，并作为唯一标识。可以理解成uuid，具体格式像： “cn=admin,dc=service,dc=corp”</li>
</ol>
</blockquote>
<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h1><blockquote>
<ol>
<li>LDAP：Lightweight Directory Access Protocol，轻量目录访问协议。</li>
<li>LDAP服务是一个为只读（查询、浏览、搜索）访问而优化的非关系型数据库，呈树状结构组织数据。</li>
<li>LDAP主要用做用户信息查询（如邮箱、电话等）或对各种服务访问做后台认证以及用户数据权限管控。</li>
</ol>
</blockquote>
<p>名词解释：</p>
<blockquote>
<p><em>DC</em>: domain component一般为公司名，例如：dc=163,dc=com<br><em>OU</em>: organization unit为组织单元，最多可以有四级，每级最长32个字符，可以为中文<br><em>CN</em>: common name为用户名或者服务器名，最长可以到80个字符，可以为中文<br><em>DN</em>: distinguished name为一条LDAP记录项的名字，有唯一性，例如：dc:”cn=admin,ou=developer,dc=163,dc=com”</p>
</blockquote>
<p>图形示例: </p>
<p><img alt="image" data-src="https://tva2.sinaimg.cn/large/006hT4w1ly1garc2yzj59j30gm0adt95.jpg"></p>
<h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h1><h2 id="2-1docker-安装"><a href="#2-1docker-安装" class="headerlink" title="2.1docker 安装"></a>2.1docker 安装</h2><blockquote>
<ol>
<li><a href="https://github.com/osixia/docker-openldap" target="_blank" rel="noopener">openldap官方镜像-Github</a></li>
<li><a href="https://hub.docker.com/r/ldapaccountmanager/lam" target="_blank" rel="noopener">ldap-account-manager Docker-hub</a></li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull osixia/openldap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run \</span><br><span class="line">       -p 389:389 \</span><br><span class="line">       --name openldap \</span><br><span class="line">       --restart=always \</span><br><span class="line">       --env LDAP_ORGANISATION=<span class="string">"sotemalltest"</span> \</span><br><span class="line">       --env LDAP_DOMAIN=<span class="string">"sotemalltest.com"</span> \</span><br><span class="line">       --env LDAP_ADMIN_PASSWORD=<span class="string">"redhat"</span> \</span><br><span class="line">       --detach osixia/openldap</span><br></pre></td></tr></tbody></table></figure>
<p>说明：</p>
<ul>
<li>389端口：默认ldap服务是使用389端口</li>
<li>LDAP_ORGANISATION 表示ldap的机构组织</li>
<li>LDAP_DOMAIN 配置LDAP域</li>
<li>LDAP_ADMIN_PASSWORD 配置LDAP管理员(admin)的密码</li>
<li>默认用登陆用户名admin</li>
</ul>
<p>如果是Windows用户，建议使用ldapadmin， 这样就省去安装管理ldap的服务，如果使用Ubuntu，建议还是装一个管理服务，毕竟Ubuntu下的管理ldap工具都太原始了，还不如命令来的好用。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取ldap account manager镜像</span></span><br><span class="line">docker pull ldapaccountmanager/lam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -d \</span><br><span class="line">        --restart=always \</span><br><span class="line">        --name ldap-account-manager \</span><br><span class="line">        -p 80:80 \</span><br><span class="line">        --link openldap:ldap-host \</span><br><span class="line">        --env PHPLDAPADMIN_LDAP_HOSTS=ldap-host \</span><br><span class="line">        --env PHPLDAPADMIN_HTTPS=<span class="literal">false</span> \</span><br><span class="line">        --detach ldapaccountmanager/lam</span><br></pre></td></tr></tbody></table></figure>
<p>说明：</p>
<ul>
<li><code>--link</code>这里连接到OpenLDAP容器并起了一个别名ldap-host</li>
<li><code>PHPLDAPADMIN_LDAP_HOSTS</code>这里直接通过别名指向OpenLDAP容器，这样不需要写死IP地址</li>
<li><code>PHPLDAPADMIN_HTTPS</code>不使用443协议</li>
<li><code>--restart=always</code>加入此参数是防止系统重启了容器未启动。(docker服务开机启动)</li>
</ul>
<h2 id="2-2Kubernetes-安装"><a href="#2-2Kubernetes-安装" class="headerlink" title="2.2Kubernetes 安装"></a>2.2Kubernetes 安装</h2><p>获取chart: </p>
<blockquote>
<p>github地址: <code>https://github.com/helm/charts.git</code><br>文件路径:  <code>charts</code>-<code>stable</code>-<code>openldap</code></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">helm install --name=openldap openldap</span><br></pre></td></tr></tbody></table></figure>
<p>具体详细配置，参考该chart readme文件。</p>
<h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h1><h2 id="3-1Docker-版使用"><a href="#3-1Docker-版使用" class="headerlink" title="3.1Docker 版使用"></a>3.1Docker 版使用</h2><p>访问ldap-account-manager,打开网页访问： <code>http://IP</code></p>
<p><img alt="ldap-deploy-1" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1gap5av7hyrj30wq0dvq3m.jpg"></p>
<p>点击上图3号位置，配置lam。如下图所示，点击<code>Edit server profiles</code></p>
<p><img alt="ldap-deploy-2" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1gap5eeob7gj30dz0avq31.jpg"></p>
<p>提示输入Lam密码，默认密码<code>lam</code>，可自行修改。登录后如下图做相应修改:</p>
<p><img alt="ldap-deploy-3" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1gap5gqaj6wj30v90ctq3m.jpg"></p>
<p>修改一下默认的管理员帐号：</p>
<p><img alt="ldap-deploy-4" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1gap5id6z1vj30s004raa0.jpg"></p>
<p>接下来是修改默认创建的两个组，这两个会在首次登陆系统时提示创建</p>
<p><img alt="ldap-deploy-5" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1gap5jfeqb2j30s10c1gm6.jpg"></p>
<p>保存后，登陆系统</p>
<p><img alt="ldap-deploy-6" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1gap5k8ga2fj30gk0am74f.jpg"></p>
<p>提示创建默认的组:</p>
<p><img alt="ldap-deploy-7" data-src="https://tvax2.sinaimg.cn/large/006hT4w1ly1gap5l7uumvj30o507tmx8.jpg"></p>
<p><img alt="ldap-group+user" data-src="https://tva3.sinaimg.cn/large/006hT4w1ly1gap61auymhj30bk0bejrk.jpg"></p>
<p>lam详细使用 参考博客<a href="https://www.58jb.com/html/use-ldap-account-manager.html" target="_blank" rel="noopener">ldap account manager 使用</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://mp.weixin.qq.com/s/JyH5mqwWFt0N1nGYZqBCBQ" target="_blank" rel="noopener">运维吧-ldap1-openldap部署及管理维护</a><br><a href="https://www.cnblogs.com/37Y37/p/9321458.html" target="_blank" rel="noopener">运维吧-ldap2-SVN集成openldap</a><br><a href="https://www.cnblogs.com/37Y37/p/9335034.html" target="_blank" rel="noopener">运维吧-ldap3-GitLab集成OpenLDAP认证</a><br><a href="https://www.cnblogs.com/37Y37/p/9430272.html" target="_blank" rel="noopener">运维吧-ldap4-Jenkins集成OpenLDAP认证</a></p>
<p><a href="https://www.cnblogs.com/zhaojiedi1992/p/zhaojiedi_liunx_52_ldap_for_jenkins.html" target="_blank" rel="noopener">ldap-jenkins</a><br><a href="https://www.cnblogs.com/zhaojiedi1992/p/zhaojiedi_liunx_51_ldap_for_grafana.html" target="_blank" rel="noopener">ldap-grafana</a><br><a href="https://www.58jb.com/html/use-ldap-account-manager.html" target="_blank" rel="noopener">lam 使用说明</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Deployment</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins-pipeline-lib使用</title>
    <url>/2020/01/09/devops-20200109-jenkins-pipeline-lib%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="定义共享库"><a href="#定义共享库" class="headerlink" title="定义共享库"></a>定义共享库</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">(root)</span><br><span class="line">+- src                     # Groovy source files</span><br><span class="line">|   +- org</span><br><span class="line">|       +- foo</span><br><span class="line">|           +- Bar.groovy  # for org.foo.Bar class</span><br><span class="line">+- vars</span><br><span class="line">|   +- foo.groovy          # for global 'foo' variable</span><br><span class="line">|   +- foo.txt             # help for 'foo' variable</span><br><span class="line">+- resources               # resource files (external libraries only)</span><br><span class="line">|   +- org</span><br><span class="line">|       +- foo</span><br><span class="line">|           +- bar.json    # static helper data for org.foo.Bar</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p><code>src</code>目录: Java 源目录结构。当执行流水线时，该目录被添加到类路径下。<br><code>vars</code>目录: 定义Pipeline中使用的全局变量。 <code>*.groovy</code>文件名=<code>variable-name</code>, <code>*.txt</code>该变量说明文档，内容可以是 Markdown 等，但扩展名必须为txt)。<br><code>resources</code>目录: 目录允许从外部库中使用<code>libraryResource</code>加载有关的非 Groovy 文件</p>
</blockquote>
<h2 id="jenkins配置"><a href="#jenkins配置" class="headerlink" title="jenkins配置"></a>jenkins配置</h2><h3 id="全局共享库"><a href="#全局共享库" class="headerlink" title="全局共享库"></a>全局共享库</h3><blockquote>
<p>全局可用 需要 <code>Overall/RunScripts</code> 权限配置这些库，权限过大，不安全。<br><code>Manage Jenkins</code> » <code>Configure System</code> » <code>Global Pipeline Libraries</code></p>
</blockquote>
<p><img alt="jenkins-add-lib" data-src="https://tva1.sinaimg.cn/large/006hT4w1ly1gara20zrtaj30m503fglj.jpg"></p>
<p><img alt="global-pipeline-library-modern-scm" data-src="https://tvax2.sinaimg.cn/large/006hT4w1ly1garb6bkp8sj30jg0dpaaj.jpg"></p>
<h2 id="JenkinsFile引用共享库"><a href="#JenkinsFile引用共享库" class="headerlink" title="JenkinsFile引用共享库"></a>JenkinsFile引用共享库</h2><blockquote>
<ol>
<li>勾选<code>Load implicitly</code>, 可直接引用共享库中变量方法；</li>
<li>不勾选，则需要使用<code>@Library</code>显式引用。</li>
</ol>
</blockquote>
<p><img alt="jenkins-global-pipeline-lib" data-src="https://tva1.sinaimg.cn/large/006hT4w1ly1garauneza5j30lr08wt91.jpg"></p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Library</span>(<span class="string">'my-shared-library'</span>) _</span><br><span class="line"><span class="comment">/* Using a version specifier, such as branch, tag, etc */</span></span><br><span class="line"><span class="meta">@Library</span>(<span class="string">'my-shared-library@1.0'</span>) _</span><br><span class="line"><span class="comment">/* Accessing multiple libraries with one statement */</span></span><br><span class="line"><span class="meta">@Library</span>([<span class="string">'my-shared-library'</span>, <span class="string">'otherlib@abc1234'</span>]) _</span><br></pre></td></tr></tbody></table></figure>

<h2 id="编写Pipeline-lib"><a href="#编写Pipeline-lib" class="headerlink" title="编写Pipeline-lib"></a>编写Pipeline-lib</h2><h3 id="steps"><a href="#steps" class="headerlink" title="steps"></a>steps</h3><p>共享库：</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// src/org/foo/Zot.groovy</span></span><br><span class="line"><span class="keyword">package</span> org.foo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> checkOutFrom(repo) {</span><br><span class="line">  git <span class="string">url:</span> <span class="string">"git@github.com:jenkinsci/${repo}"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span></span><br></pre></td></tr></tbody></table></figure>

<p>jenkinsFile中引用: </p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> z = <span class="keyword">new</span> org.foo.Zot()</span><br><span class="line">z.checkOutFrom(repo)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="vars"><a href="#vars" class="headerlink" title="vars"></a>vars</h3><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">vars/log.groovy</span><br><span class="line"><span class="keyword">def</span> info(message) {</span><br><span class="line">    echo <span class="string">"INFO: ${message}"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> warning(message) {</span><br><span class="line">    echo <span class="string">"WARNING: ${message}"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">Jenkinsfile</span><br><span class="line"><span class="meta">@Library</span>(<span class="string">'utils'</span>) _</span><br><span class="line"></span><br><span class="line">log.info <span class="string">'Starting'</span></span><br><span class="line">log.warning <span class="string">'Nothing to do!'</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://jenkins.io/zh/doc/book/pipeline/shared-libraries/" target="_blank" rel="noopener">jenkins 共享库官方文档</a></p>
</body></html>]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Jenkins</tag>
        <tag>JenkinsFile</tag>
        <tag>Pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang学习资料</title>
    <url>/2019/12/29/golang-20191229-Golang%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<html><head></head><body><div class="note success">
            <p>不错的备查资料 </p>
          </div>

<p><strong><em>超详细备查(利于排查概念模糊点)</em></strong><br><a href="http://c.biancheng.net/golang/" target="_blank" rel="noopener"><strong>Go语言入门教程，Golang入门教程（非常详细）</strong></a></p>
<p><strong>超级实用</strong><br><a href="https://books.studygolang.com/The-Golang-Standard-Library-by-Example/" target="_blank" rel="noopener"><strong>Go语言标准库》The Golang Standard Library by Example</strong></a></p>
<p><a href="https://juejin.im/post/5a113e686fb9a0452936596c" target="_blank" rel="noopener"><strong>Golang设计模式–k8s源码为例</strong></a></p>
<p><a href="https://github.com/senghoo/golang-design-pattern" target="_blank" rel="noopener"><strong>Glang设计模式–概念+示例</strong></a></p>
<p><a href="https://gobyexample.com/" target="_blank" rel="noopener"><strong>Go by Example</strong></a></p>
<p><a href="https://github.com/gocn/knowledge" target="_blank" rel="noopener"><strong>go社区知识图谱</strong></a></p>
<p><a href="https://leetcode.gin.sh/" target="_blank" rel="noopener"><strong>go语言的leetcode刷题</strong></a></p>
<p><strong><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md" target="_blank" rel="noopener">The Way To Go-ZH_CN</a></strong></p>
<p><a href="https://github.com/yunabe/lgo" target="_blank" rel="noopener">交互式go工具–lgo</a></p>
<p><a href="https://github.com/bcicen/ctop" target="_blank" rel="noopener">容器的top–ctop</a></p>
<p><a href="https://github.com/jesseduffield/lazydocker" target="_blank" rel="noopener">docker和docker-compose的终端UI</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Gin-Validator自定义模型绑定和验证</title>
    <url>/2020/05/25/golang-2020-05-25-Gin-Validator%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B%E7%BB%91%E5%AE%9A%E5%92%8C%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://juejin.im/post/5b338516f265da596e4ceb9e" target="_blank" rel="noopener">Golang 中的Tags， validator的实现基础</a></p>
<p><a href="https://github.com/go-playground/validator/issues/288" target="_blank" rel="noopener">issue - validator不打算实现default值功能</a></p>
<p><a href="https://frankhitman.github.io/zh-CN/gin-validator/" target="_blank" rel="noopener">gin中是如何使用validator</a></p>
<p><a href="https://chyroc.cn/posts/source-validator-v2/" target="_blank" rel="noopener">gopkg.in/validator.v2 源码阅读</a></p>
<p><a href="https://www.lagou.com/lgeduarticle/57469.html" target="_blank" rel="noopener">go-gin-api 规划目录和参数验证</a></p>
<p><a href="https://learnku.com/docs/gin-gonic/2019/examples-custom-validators/6193" target="_blank" rel="noopener">gin框架文档-自定义验证器</a></p>
<p><a href="https://gin-gonic.com/zh-cn/docs/examples/binding-and-validation/" target="_blank" rel="noopener">GinWebFramwork模型绑定和验证</a></p>
<p><a href="https://xguox.me/go-gin-validator.html/" target="_blank" rel="noopener">Gin 模型验证 Validator</a></p>
<p><a href="https://juejin.im/post/5d3933cef265da1bc64c07a5" target="_blank" rel="noopener">Gin框架 - 数据绑定和验证</a></p>
<p><a href="https://www.cnblogs.com/cnblogs-wangzhipeng/p/9484460.html" target="_blank" rel="noopener">Viper–方便好用的Golang 配置库</a></p>
<p><a href="https://www.ctolib.com/viper.html" target="_blank" rel="noopener">viper - 一个Go应用程序的完整配置解决方案</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
        <tag>Validator</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Modules版本控制和依赖管理</title>
    <url>/2020/05/25/golang-2020-05-25-Go-Modules%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%92%8C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>版本管理和依赖管理一直是企业采用go的一个障碍，go v1.11引入了对<code>go module</code>的初步支持，希望在整个go生态系统中统一依赖管理。</p>
<p><code>go module</code>引入了一些与其他编程语言的传统依赖关系管理工具不同的概念。</p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul>
<li>go 1.11以上版本</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://medium.com/@aman.sardana/go-modules-versioning-dependency-management-d5f96b490774" target="_blank" rel="noopener"><strong>Go Modules: Versioning &amp; Dependency management</strong></a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
        <tag>Go-Module</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-HttpClien编写访问rest服务的客户端</title>
    <url>/2020/05/26/golang-2020-05-26-Go-HttpClien%E7%BC%96%E5%86%99%E8%AE%BF%E9%97%AErest%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="http://polyglot.ninja/golang-making-http-requests/" target="_blank" rel="noopener">Golang: Making HTTP Requests</a></strong></p>
<p><strong><a href="https://www.scaledrone.com/blog/creating-an-api-client-in-go/" target="_blank" rel="noopener">^Creating an API Client in Go</a></strong></p>
<p><strong><a href="http://polyglot.ninja/golang-making-http-requests/" target="_blank" rel="noopener">^^golang-making-http-requests</a></strong></p>
<p><strong><a href="https://medium.com/@nate510/don-t-use-go-s-default-http-client-4804cb19f779" target="_blank" rel="noopener">Don’t use Go’s default HTTP client (in production)</a></strong></p>
<p><a href="https://www.thegreatcodeadventure.com/mocking-http-requests-in-golang/" target="_blank" rel="noopener">博客 - 接口创建共享的http.client</a></p>
<p>工具<br><a href="https://github.com/gojek/heimdall#making-a-simple-get-request" target="_blank" rel="noopener">heimdall - go 增强型http.client 1.6K</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Gorm-使用UUID作为主键</title>
    <url>/2020/05/28/golang-2020-05-28-Gorm-%E4%BD%BF%E7%94%A8UUID%E4%BD%9C%E4%B8%BA%E4%B8%BB%E9%94%AE/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://medium.com/@the.hasham.ali/how-to-use-uuid-key-type-with-gorm-cc00d4ec7100" target="_blank" rel="noopener">How to Use UUID Key Type with Gorm</a></strong></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
        <tag>gorm</tag>
        <tag>uuid</tag>
      </tags>
  </entry>
  <entry>
    <title>Gorm-使用gormigrate</title>
    <url>/2020/05/28/golang-2020-05-28-Gorm-%E4%BD%BF%E7%94%A8gormigrate%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>基于的gomigrate版本为<code>v1.6.0</code>注意与v2版本不兼容.</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="1-main函数中调用migrate"><a href="#1-main函数中调用migrate" class="headerlink" title="1. main函数中调用migrate"></a>1. main函数中调用migrate</h2><p>main函数</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"test/cmd"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	cmd.Execute()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>cmd包内的Execute函数</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/spf13/cobra"</span></span><br><span class="line">	<span class="string">"test/cmd/api"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rootCmd = &amp;cobra.Command{</span><br><span class="line">	Use:               <span class="string">"heroku"</span>,</span><br><span class="line">	Short:             <span class="string">"heroku API server"</span>,</span><br><span class="line">	SilenceUsage:      <span class="literal">true</span>,</span><br><span class="line">	DisableAutoGenTag: <span class="literal">true</span>,</span><br><span class="line">	Long:              <span class="string">`Start heroku API server`</span>,</span><br><span class="line">	PersistentPreRunE: <span class="function"><span class="keyword">func</span><span class="params">(*cobra.Command, []<span class="keyword">string</span>)</span> <span class="title">error</span></span> { <span class="keyword">return</span> <span class="literal">nil</span> },</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// Add api start cmd</span></span><br><span class="line">	rootCmd.AddCommand(api.StartCmd)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//Execute : run commands</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Execute</span><span class="params">()</span></span> {</span><br><span class="line">	<span class="keyword">if</span> err := rootCmd.Execute(); err != <span class="literal">nil</span> {</span><br><span class="line">		os.Exit(<span class="number">-1</span>)</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>api包的start cmd 配置</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">	<span class="string">"github.com/gin-gonic/gin/binding"</span></span><br><span class="line">	<span class="string">"github.com/rs/zerolog"</span></span><br><span class="line">	<span class="string">"github.com/spf13/cobra"</span></span><br><span class="line">	<span class="string">"github.com/spf13/viper"</span></span><br><span class="line">	<span class="string">"test/cmd/migrate"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	config   <span class="keyword">string</span></span><br><span class="line">	port     <span class="keyword">string</span></span><br><span class="line">	loglevel <span class="keyword">uint8</span></span><br><span class="line">	cors     <span class="keyword">bool</span></span><br><span class="line">	cluster  <span class="keyword">bool</span></span><br><span class="line">	<span class="comment">//StartCmd : set up restful api server</span></span><br><span class="line">	StartCmd = &amp;cobra.Command{</span><br><span class="line">		Use:     <span class="string">"server"</span>,</span><br><span class="line">		Short:   <span class="string">"Start test API server"</span>,</span><br><span class="line">		Example: <span class="string">"test server -p 8083"</span>,</span><br><span class="line">		PreRun: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> {</span><br><span class="line">            <span class="comment">// 服务初始化配置</span></span><br><span class="line">			setup()</span><br><span class="line">		},</span><br><span class="line">		RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> {</span><br><span class="line">            <span class="comment">// 服务启动</span></span><br><span class="line">			<span class="keyword">return</span> run()</span><br><span class="line">		},</span><br><span class="line">	}</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> {</span><br><span class="line">	StartCmd.PersistentFlags().StringVarP(&amp;port, <span class="string">"port"</span>, <span class="string">"p"</span>, <span class="string">"8083"</span>, <span class="string">"Tcp port server listening on"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> {</span><br><span class="line">	<span class="comment">//1. database migrate</span></span><br><span class="line">	err = migrate.New()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		log.Fatal(fmt.Sprintf(<span class="string">"Migrate sql error: %s"</span>, err.Error()))</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span> <span class="title">error</span></span> {</span><br><span class="line">	engine := gin.Default()</span><br><span class="line">	binding.Validator = <span class="built_in">new</span>(validate.DefaultValidator)</span><br><span class="line"></span><br><span class="line">	router.SetUp(engine, cors)</span><br><span class="line">	<span class="keyword">return</span> engine.Run(<span class="string">":"</span> + port)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="2-执行数据库初始化的migrate入口函数"><a href="#2-执行数据库初始化的migrate入口函数" class="headerlink" title="2. 执行数据库初始化的migrate入口函数"></a>2. 执行数据库初始化的migrate入口函数</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Initialize &amp; migrate departments &amp; users &amp; maybe other stuffs</span></span><br><span class="line"><span class="keyword">package</span> migrate</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">	<span class="string">"gopkg.in/gormigrate.v1"</span></span><br><span class="line">	<span class="string">"icosdeploy/pkg/api/dao"</span></span><br><span class="line">	<span class="string">"icosdeploy/pkg/api/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> <span class="title">error</span></span> {</span><br><span class="line">	db := dao.GetDb()</span><br><span class="line">	m := gormigrate.New(db, gormigrate.DefaultOptions, []*gormigrate.Migration{})</span><br><span class="line">	<span class="comment">// 1. 数据库表的初始化</span></span><br><span class="line">	m.InitSchema(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">		err := tx.AutoMigrate(</span><br><span class="line">			&amp;model.App{},</span><br><span class="line">			&amp;model.Log{},</span><br><span class="line">			&amp;model.Rule{},</span><br><span class="line">		).Error</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	})</span><br><span class="line">	_ = m.Migrate()</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 每次不同的migrate</span></span><br><span class="line">	m = gormigrate.New(db, gormigrate.DefaultOptions, []*gormigrate.Migration{</span><br><span class="line">		<span class="comment">// 插入初始化数据</span></span><br><span class="line">        SeedData,</span><br><span class="line">        <span class="comment">// 创建表</span></span><br><span class="line">		AddTable,</span><br><span class="line">        <span class="comment">// 表增加列</span></span><br><span class="line">		AddColumn,</span><br><span class="line">        <span class="comment">// 在此处以下逐次追加 migrate</span></span><br><span class="line">	})</span><br><span class="line">	<span class="keyword">return</span> m.Migrate()</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="3-迁移示例"><a href="#3-迁移示例" class="headerlink" title="3. 迁移示例"></a>3. 迁移示例</h2><h3 id="3-1-插入初始化数据SeedSizes"><a href="#3-1-插入初始化数据SeedSizes" class="headerlink" title="3.1 插入初始化数据SeedSizes"></a>3.1 插入初始化数据<code>SeedSizes</code></h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> migrate</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">	<span class="string">"gopkg.in/gormigrate.v1"</span></span><br><span class="line">	<span class="string">"icosdeploy/pkg/api/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	SizeSmall = &amp;model.QletSize{Name: <span class="string">"small"</span>, Cpu: <span class="string">"1"</span>, Memory: <span class="string">"2"</span>, Status: <span class="string">"1"</span>}</span><br><span class="line">	SizeLarge = &amp;model.QletSize{Name: <span class="string">"large"</span>, Cpu: <span class="string">"2"</span>, Memory: <span class="string">"4"</span>, Status: <span class="string">"1"</span>}</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sizes insert</span></span><br><span class="line"><span class="keyword">var</span> SeedData = &amp;gormigrate.Migration{</span><br><span class="line">	ID: <span class="string">"SEED_DATA"</span>,</span><br><span class="line">	Migrate: <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">		err := db.Create(&amp;SizeSmall).Error</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		}</span><br><span class="line">		err = db.Create(&amp;SizeLarge).Error</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	},</span><br><span class="line">	Rollback: <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">		err := db.Delete(&amp;SizeSmall).Error</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		}</span><br><span class="line">		err = db.Delete(&amp;SizeLarge).Error</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	},</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="3-2-创建表"><a href="#3-2-创建表" class="headerlink" title="3.2 创建表"></a>3.2 创建表</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> migrate</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">	<span class="string">"gopkg.in/gormigrate.v1"</span></span><br><span class="line">	<span class="string">"icosdeploy/pkg/api/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddTable create</span></span><br><span class="line"><span class="keyword">var</span> AddTable = &amp;gormigrate.Migration{</span><br><span class="line">	ID: <span class="string">"Add_TABLE"</span>,</span><br><span class="line">	Migrate: <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">		<span class="comment">//if db.HasTable(&amp;model.Job{}){</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="comment">//}</span></span><br><span class="line">		err := db.CreateTable(&amp;model.Job{}).Error</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	},</span><br><span class="line">	Rollback: <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">		err := db.DropTableIfExists(&amp;model.Job{}).Error</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	},</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="3-3-表添加字段"><a href="#3-3-表添加字段" class="headerlink" title="3.3 表添加字段"></a>3.3 表添加字段</h3><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> migrate</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">	<span class="string">"gopkg.in/gormigrate.v1"</span></span><br><span class="line">	<span class="string">"icosdeploy/pkg/api/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// create column</span></span><br><span class="line"><span class="keyword">var</span> AddColumn = &amp;gormigrate.Migration{</span><br><span class="line">	ID: <span class="string">"ADD_COLUMN"</span>,</span><br><span class="line">	Migrate: <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">		<span class="comment">// when table already exists, it just adds fields as columns</span></span><br><span class="line">		<span class="keyword">return</span> db.AutoMigrate(&amp;model.Algo{}).Error</span><br><span class="line">	},</span><br><span class="line">	Rollback: <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">		<span class="keyword">return</span> db.Model(&amp;model.Algo{}).DropColumn(<span class="string">"sub_path"</span>).Error</span><br><span class="line">	},</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="3-4-添加一个路由"><a href="#3-4-添加一个路由" class="headerlink" title="3.4 添加一个路由"></a>3.4 添加一个路由</h3><ul>
<li>创建此路由存储数据的表</li>
<li>在casbin中增加此路由相关<code>rule</code></li>
<li>修改role, 以后增加的用户,自动在Casbin中增加规则</li>
</ul>
<p>创建表,参考<code>3.2创建表</code></p>
<p>修改casbin-rule和修改role</p>
<ul>
<li>casbin 中剔除用户(v3=’’)和系统管理员(v0=’adminRole’),剩余的为角色+路由+方法+租户的数据,再根据: <code>角色</code>+<code>租户</code>分组,添加规则数据,  插入新数据, 其他信息保持不变, 路由为新插入路由.</li>
<li>role 在每个role数据中增加<code>{"object":"/api/v1/jobs","action":"*"}</code>, 路由为新插入路由, 方法admin为*,其他为<code>GET</code>.</li>
<li>注意角色的回滚,要将数据update为上一次修改role的数据.</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">package migrate</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	"fmt"</span><br><span class="line">	"github.com/jinzhu/gorm"</span><br><span class="line">	"gopkg.in/gormigrate.v1"</span><br><span class="line">	"icosdeploy/pkg/api/log"</span><br><span class="line">	"icosdeploy/pkg/api/model"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">	roleAddJobs1 = &amp;model.Role{Name: "admin", Policy: model.JSON(`[{"object":"/api/v1/jobs","action":"*"},{"object":"/api/v1/pvcs","action":"*"},{"object":"/api/v1/qlet/start","action":"*"},{"object":"/api/v1/qlet/stop","action":"*"},{"object":"/api/v1/application","action":"*"},{"object":"/api/v1/qlet","action":"*"},{"object":"/api/v1/qletSize","action":"GET"},{"object":"/api/v1/results","action":"*"},{"object":"/api/v1/dbaas","action":"*"},{"object":"/api/v1/registry","action":"*"},{"object":"/api/v1/scan","action":"*"},{"object":"/api/v1/chart","action":"*"}]`)}</span><br><span class="line">	roleAddJobs2 = &amp;model.Role{Name: "observer", Policy: model.JSON(`[{"object":"/api/v1/jobs","action":"GET"},{"object":"/api/v1/pvcs","action":"GET"},{"object":"/api/v1/application","action":"GET"},{"object":"/api/v1/qlet","action":"GET"},{"object":"/api/v1/qletSize","action":"GET"},{"object":"/api/v1/results","action":"GET"},{"object":"/api/v1/dbaas","action":"GET"},{"object":"/api/v1/registry","action":"GET"},{"object":"/api/v1/scan","action":"GET"},{"object":"/api/v1/chart","action":"GET"}]`)}</span><br><span class="line">	roleAddJobs3 = &amp;model.Role{Name: "ops", Policy: model.JSON(`[{"object":"/api/v1/jobs","action":"GET"},{"object":"/api/v1/pvcs","action":"GET"},{"object":"/api/v1/qlet/start","action":"*"},{"object":"/api/v1/qlet/stop","action":"*"},{"object":"/api/v1/application","action":"GET"},{"object":"/api/v1/qlet","action":"GET"},{"object":"/api/v1/qletSize","action":"GET"},{"object":"/api/v1/results","action":"GET"},{"object":"/api/v1/dbaas","action":"GET"},{"object":"/api/v1/registry","action":"GET"},{"object":"/api/v1/scan","action":"GET"},{"object":"/api/v1/chart","action":"GET"}]`)}</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// PermJobs create</span><br><span class="line">var PermJobs = &amp;gormigrate.Migration{</span><br><span class="line">	ID: "Perm_JOBS",</span><br><span class="line">	Migrate: func(db *gorm.DB) (err error) {</span><br><span class="line">		err = db.Model(&amp;model.Role{}).Where("name = ?", "admin").Update("Policy", roleAddJobs1.Policy).Error</span><br><span class="line">		if err != nil {</span><br><span class="line">			return err</span><br><span class="line">		}</span><br><span class="line">		err = db.Model(&amp;model.Role{}).Where("name = ?", "observer").Update("Policy", roleAddJobs2.Policy).Error</span><br><span class="line">		if err != nil {</span><br><span class="line">			return err</span><br><span class="line">		}</span><br><span class="line">		err = db.Model(&amp;model.Role{}).Where("name = ?", "ops").Update("Policy", roleAddJobs3.Policy).Error</span><br><span class="line">		if err != nil {</span><br><span class="line">			return err</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		var rules []model.CasbinRule</span><br><span class="line">		// v0=角色\用户 v1=路由 v2=租户 v3=方法()</span><br><span class="line">		// group by v2 and v0 &amp;&amp; v3 != ''  raw-sql</span><br><span class="line">		//db.Where("id = ?", id).Group().Find(&amp;rules)</span><br><span class="line">		db.Raw("SELECT * FROM casbin_rule where v3 &lt;&gt; '' and v0 &lt;&gt; 'adminRole' GROUP BY v2, v0").Scan(&amp;rules)</span><br><span class="line">		for _, r := range rules {</span><br><span class="line">			newRule := &amp;model.CasbinRule{</span><br><span class="line">				PType: r.PType,</span><br><span class="line">				V0:    r.V0,</span><br><span class="line">				V1:    "/api/v1/jobs",</span><br><span class="line">				V2:    r.V2,</span><br><span class="line">				V3:    r.V3,</span><br><span class="line">				V4:    r.V4,</span><br><span class="line">				V5:    r.V5,</span><br><span class="line">			}</span><br><span class="line">			log.Debug(fmt.Sprintf("%#v", newRule))</span><br><span class="line">			db.Create(newRule)</span><br><span class="line">		}</span><br><span class="line">		return err</span><br><span class="line">	},</span><br><span class="line">	Rollback: func(db *gorm.DB) error {</span><br><span class="line">		err := db.DropTableIfExists(&amp;model.Job{}).Error</span><br><span class="line">		if err != nil {</span><br><span class="line">			return err</span><br><span class="line">		}</span><br><span class="line">		err = db.Model(&amp;model.Role{}).Where("name = ?", "admin").Update("Policy", role1.Policy).Error</span><br><span class="line">		if err != nil {</span><br><span class="line">			return err</span><br><span class="line">		}</span><br><span class="line">		err = db.Model(&amp;model.Role{}).Where("name = ?", "observer").Update("Policy", role2.Policy).Error</span><br><span class="line">		if err != nil {</span><br><span class="line">			return err</span><br><span class="line">		}</span><br><span class="line">		err = db.Model(&amp;model.Role{}).Where("name = ?", "ops").Update("Policy", role3.Policy).Error</span><br><span class="line">		if err != nil {</span><br><span class="line">			return err</span><br><span class="line">		}</span><br><span class="line">		err = db.Exec("DELETE FROM casbin_rule WHERE v1 = '/api/v1/jobs'").Error</span><br><span class="line">		err = db.Delete(&amp;role3).Where("v1 = ?", "/api/v1/jobs").Error</span><br><span class="line">		if err != nil {</span><br><span class="line">			return err</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		return err</span><br><span class="line">	},</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>





<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.depado.eu/post/gorm-gotchas" target="_blank" rel="noopener">Gorm Gotchas–gorm+migrate+uuid</a></p>
<p><a href="https://ithelp.ithome.com.tw/articles/10213461" target="_blank" rel="noopener">gorm–gormigrate–uuid</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Gorm-支持json字段格式</title>
    <url>/2020/05/28/golang-2020-05-28-Gorm-%E6%94%AF%E6%8C%81json%E5%AD%97%E6%AE%B5%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://github.com/jinzhu/gorm/issues/1935#issue-330200769" target="_blank" rel="noopener">第一参考 Github-Issue support JSON column for mysql</a></strong></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Gin集成Casbin作为鉴权</title>
    <url>/2020/05/29/golang-2020-05-29-Go-Gin%E9%9B%86%E6%88%90Casbin%E4%BD%9C%E4%B8%BA%E9%89%B4%E6%9D%83/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://dev.to/maxwellhertz/tutorial-integrate-gin-with-cabsin-56m0" target="_blank" rel="noopener">Gin集成Casbin</a></strong></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Makefile编写说明</title>
    <url>/2020/05/29/golang-2020-05-29-Go-Makefile%E7%BC%96%E5%86%99%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/jaegertracing/jaeger-operator/blob/master/Makefile" target="_blank" rel="noopener"><strong>commit生成changelog使用示例</strong></a></p>
<p><a href="https://github.com/pavolloffay/github-changelog/blob/master/templates/all-labels.md" target="_blank" rel="noopener"><strong>github-changelog</strong></a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-jwt原理和使用</title>
    <url>/2020/05/29/golang-2020-05-29-Go-jwt%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener"><strong>JWT(JSON Web Token)协议说明</strong></a></p>
<p><a href="https://www.cnblogs.com/wangshouchang/p/9551748.html" target="_blank" rel="noopener">JWT从入门到精通</a></p>
<p><a href="https://jwt.io/" target="_blank" rel="noopener">jwt校验工具</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-常用函数备忘</title>
    <url>/2020/05/29/golang-2020-05-29-Go-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>记录常用的一些函数</p>
<h2 id="1-字符串转int64"><a href="#1-字符串转int64" class="headerlink" title="1. 字符串转int64"></a>1. 字符串转int64</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Use the max value for signed 64 integer. http://golang.org/pkg/builtin/#int64</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"9223372036854775807"</span></span><br><span class="line">i, err := strconv.ParseInt(s, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">}</span><br><span class="line">fmt.Printf(<span class="string">"Hello, %v with type %s!\n"</span>, i, reflect.TypeOf(i))</span><br></pre></td></tr></tbody></table></figure>

<p>输出：</p>
<blockquote>
<p>Hello, 9223372036854775807 with type int64!</p>
</blockquote>
<h2 id="2-最小化gormigrate"><a href="#2-最小化gormigrate" class="headerlink" title="2. 最小化gormigrate"></a>2. 最小化gormigrate</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"gopkg.in/gormigrate.v1"</span></span><br><span class="line">    <span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">    _ <span class="string">"github.com/jinzhu/gorm/dialects/sqlite"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> {</span><br><span class="line">    gorm.Model</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Pet <span class="keyword">struct</span> {</span><br><span class="line">    gorm.Model</span><br><span class="line">    Name     <span class="keyword">string</span></span><br><span class="line">    PersonID <span class="keyword">int</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    db, err := gorm.Open(<span class="string">"sqlite3"</span>, <span class="string">"mydb.sqlite3"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> err = db.DB().Ping(); err != <span class="literal">nil</span> {</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    db.LogMode(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    m := gormigrate.New(db, gormigrate.DefaultOptions, []*gormigrate.Migration{</span><br><span class="line">        {</span><br><span class="line">            ID: <span class="string">"201608301400"</span>,</span><br><span class="line">            Migrate: <span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">                <span class="keyword">return</span> tx.AutoMigrate(&amp;Person{}).Error</span><br><span class="line">            },</span><br><span class="line">            Rollback: <span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">                <span class="keyword">return</span> tx.DropTable(<span class="string">"people"</span>).Error</span><br><span class="line">            },</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            ID: <span class="string">"201608301430"</span>,</span><br><span class="line">            Migrate: <span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">                <span class="keyword">return</span> tx.AutoMigrate(&amp;Pet{}).Error</span><br><span class="line">            },</span><br><span class="line">            Rollback: <span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> {</span><br><span class="line">                <span class="keyword">return</span> tx.DropTable(<span class="string">"pets"</span>).Error</span><br><span class="line">            },</span><br><span class="line">        },</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    err = m.Migrate()</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> {</span><br><span class="line">        log.Printf(<span class="string">"Migration did run successfully"</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        log.Printf(<span class="string">"Could not migrate: %v"</span>, err)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-判断元素在Slice中"><a href="#3-判断元素在Slice中" class="headerlink" title="3. 判断元素在Slice中"></a>3. 判断元素在<code>Slice</code>中</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line">    items := []<span class="keyword">string</span>{<span class="string">"A"</span>, <span class="string">"1"</span>, <span class="string">"B"</span>, <span class="string">"2"</span>, <span class="string">"C"</span>, <span class="string">"3"</span>}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Missing Example</span></span><br><span class="line">    _, found := Find(items, <span class="string">"golangcode.com"</span>)</span><br><span class="line">    <span class="keyword">if</span> !found {</span><br><span class="line">        fmt.Println(<span class="string">"Value not found in slice"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Found example</span></span><br><span class="line">    k, found := Find(items, <span class="string">"B"</span>)</span><br><span class="line">    <span class="keyword">if</span> !found {</span><br><span class="line">        fmt.Println(<span class="string">"Value not found in slice"</span>)</span><br><span class="line">    }</span><br><span class="line">    fmt.Printf(<span class="string">"B found at key: %d\n"</span>, k)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find takes a slice and looks for an element in it. If found it will</span></span><br><span class="line"><span class="comment">// return it's key, otherwise it will return -1 and a bool of false.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Find</span><span class="params">(slice []<span class="keyword">string</span>, val <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">bool</span>)</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i, item := <span class="keyword">range</span> slice {</span><br><span class="line">        <span class="keyword">if</span> item == val {</span><br><span class="line">            <span class="keyword">return</span> i, <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>, <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Vault配置调用vault相关api</title>
    <url>/2020/06/22/golang-2020-06-22-Go-Vault%E9%85%8D%E7%BD%AE%E8%B0%83%E7%94%A8vault%E7%9B%B8%E5%85%B3api/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="attr">"kind"</span>:<span class="string">"Config"</span>,<span class="attr">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="attr">"preferences"</span>:{},<span class="attr">"clusters"</span>:[{<span class="attr">"name"</span>:<span class="string">"internalCluster"</span>,<span class="attr">"cluster"</span>:{<span class="attr">"server"</span>:<span class="string">"https://10.15.6.59:5443"</span>,<span class="attr">"certificate-authority-data"</span>:<span class="string">"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMxakNDQWI2Z0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFiTVJrd0Z3WURWUVFLRXhCRFEwVWcKVkdWamFHNXZiRzluYVdWek1DQVhEVEl3TURReE9URXhORGswTkZvWUR6SXdOVEF3TkRFeU1URTBPVFEwV2pBYgpNUmt3RndZRFZRUUtFeEJEUTBVZ1ZHVmphRzV2Ykc5bmFXVnpNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF4cS85eS96VmhPVVVwV2p6NnVQZTZqVVl5YWdXR3dFNmJvVktXMzE3R0p4aGNQL1IKWnVOOVFORXhZRFdhSEhsRGkyY0NLYjJlK2U0M1pPejhKV3hxZk5lb1pMMmlETnVoRG41d2hTVm4vYmV4d2dTZgp5UXJ0UnpqZ1dHRjF3UWhBWjdnVWVLdHcweDNXUWZCUHFFWnJmVUlMMEkrTnNoRW1PZ1BUdlQwTzZyaktOSSt2CllPcC9ONjh4cEY4aFFRZDB4WnFpUWhzRzNyVFJ1R3lWalltRk9POG9oa0pUS3VtZTVGc1VZQ0k5UVRlMVkwc0EKM1AyTzBqbU1rVk5xdGN6YmJnNkx3NVhPWlZHT3BLbFJWUFJ5aDZ2VmlCRmVXNGl3U0xUL3RaTDJ4bjlORXZxQwpDVVdiZWhkcW1CMVFtLzhueERKVGl3ME5TR1hKSFE0SW1yaHhFd0lEQVFBQm95TXdJVEFPQmdOVkhROEJBZjhFCkJBTUNBcVF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBY0R2ZWsxQVoKMEpHMTl2SUNPNUtFcXozTndlcC92MmVZWmgzZVpyb3VhL0VYMVM0aUQxaFFwMFBtczNtK2N2NDVLZ1pBMDJ1WQpadGppaWR5T21pNkJJZ2dSOFp3L2hwNmJ4SE8rcUV2MHpLK3NFdEM2WTBaTkJoT09vRGxZdkRjTVJFQ0dvbGtSClMxRDZDUzZoS1U3UUVPZHRuMlhHNHJwNUdKMm9XMGpoTTVCVW1wUE5nekw0WDJjeVBIU2JRb05wTk5ldisyOGMKSnY1bXlwV0tUcU8veVZvaE9MbkNIb255bnFlSk04V1FXUmM0WUVsSzhDTmJrR0l5L1RvRjhZb01hTng0OS84YgpLcVVQL1Y5Z1B5Wnk4Z25lSE9iRXBjNVFzRTU4MzUxNi9qU1JCWkJwS2grRTFxbjNCaGNyTDYvanlQKzBzMkdPCkxVWXhPbmFJYWJZS3lnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="</span>}}],<span class="attr">"users"</span>:[{<span class="attr">"name"</span>:<span class="string">"user"</span>,<span class="attr">"user"</span>:{<span class="attr">"client-certificate-data"</span>:<span class="string">"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQrekNDQXVPZ0F3SUJBZ0lJWllJL3lhUmhuUFl3RFFZSktvWklodmNOQVFFTEJRQXdHekVaTUJjR0ExVUUKQ2hNUVEwTkZJRlJsWTJodWIyeHZaMmxsY3pBZ0Z3MHlNREEwTVRreE1UUTVORFJhR0E4eU1EVXdNRFF4TWpFeApORGswTmxvd01qRVhNQlVHQTFVRUNoTU9jM2x6ZEdWdE9tMWhjM1JsY25NeEZ6QVZCZ05WQkFNVERuTjVjM1JsCmJUcHRZWE4wWlhKek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeHEvOXkvelYKaE9VVXBXano2dVBlNmpVWXlhZ1dHd0U2Ym9WS1czMTdHSnhoY1AvUlp1TjlRTkV4WURXYUhIbERpMmNDS2IyZQorZTQzWk96OEpXeHFmTmVvWkwyaUROdWhEbjV3aFNWbi9iZXh3Z1NmeVFydFJ6amdXR0Yxd1FoQVo3Z1VlS3R3CjB4M1dRZkJQcUVacmZVSUwwSStOc2hFbU9nUFR2VDBPNnJqS05JK3ZZT3AvTjY4eHBGOGhRUWQweFpxaVFoc0cKM3JUUnVHeVZqWW1GT084b2hrSlRLdW1lNUZzVVlDSTlRVGUxWTBzQTNQMk8wam1Na1ZOcXRjemJiZzZMdzVYTwpaVkdPcEtsUlZQUnloNnZWaUJGZVc0aXdTTFQvdFpMMnhuOU5FdnFDQ1VXYmVoZHFtQjFRbS84bnhESlRpdzBOClNHWEpIUTRJbXJoeEV3SURBUUFCbzRJQktEQ0NBU1F3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVcKTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQ0I4Z1lEVlIwUkJJSHFNSUhuZ2hacmRXSmxjbTVsZEdWegpMbVJsWm1GMWJIUXVjM1pqZ2lScmRXSmxjbTVsZEdWekxtUmxabUYxYkhRdWMzWmpMbU5zZFhOMFpYSXViRzlqCllXeUNFbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkSUlLYTNWaVpYSnVaWFJsYzRJbmFYTjBhVzh0YzJsa1pXTmgKY2kxcGJtcGxZM1J2Y2k1cGMzUnBieTF6ZVhOMFpXMHVjM1pqaHhEOUFCSTBBQUFBQUFBQUFBQUFBQUFCaHdSLwpBQUFCaHdRSzl3QUNod1FLOXdBQmh3UmtSa0wwaHdUQXFPeGxod1JrUnJFU2h3VEFxT3ppaHdSa1JoY3pod1RBCnFPelRod1FLRHdiNWh3UUtEd2JhaHdRS0R3Wmpod1FLRHdZN01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmUKTmlqLzhYS29DbGYzbXFwVVplVzNmZW1JOVlDTkJzQW5FcEhBcWdrOWoveTB3RVU4b1F5d3NnbkdRUDdZREhuawpZRUJsWjYvOEVXZEFpSzFJa1VWSlRGcHpiWDlMd25yRXYreFc2L1ZNWXd5Mm1lR1lkMkVtUFcrb0ZsZkRrdDNSClBrTGJPeE1FYzJXaUd6MW1NT0UxMWRYQ3dLZ2dSUDhRZnhDeU5DZ0JCS3JEK1RyYUROb2FBSGJCRVR3YXlMRWkKck53RkpOdmh2QnFZK3lkZU8zVlFsamxaRm9KMlo0cStBQ3l1b1hUZnNkcnB2M0h3WkFYa2Y4Q0ZlSzdXV1lnWAptSzVYa1BobkNaWm9RV2RWU3Z1RjlicUN4eTVocWRuVGpLUVNETmNBWkdzVlRmQVpwYitKRjhGMHdIbzk0NGtNCmp1TUp5VzJwenJ3OXM4Z1ZIYXZ0Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"</span>,<span class="attr">"client-key-data"</span>:<span class="string">"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeHEvOXkvelZoT1VVcFdqejZ1UGU2alVZeWFnV0d3RTZib1ZLVzMxN0dKeGhjUC9SClp1TjlRTkV4WURXYUhIbERpMmNDS2IyZStlNDNaT3o4Sld4cWZOZW9aTDJpRE51aERuNXdoU1ZuL2JleHdnU2YKeVFydFJ6amdXR0Yxd1FoQVo3Z1VlS3R3MHgzV1FmQlBxRVpyZlVJTDBJK05zaEVtT2dQVHZUME82cmpLTkkrdgpZT3AvTjY4eHBGOGhRUWQweFpxaVFoc0czclRSdUd5VmpZbUZPTzhvaGtKVEt1bWU1RnNVWUNJOVFUZTFZMHNBCjNQMk8wam1Na1ZOcXRjemJiZzZMdzVYT1pWR09wS2xSVlBSeWg2dlZpQkZlVzRpd1NMVC90WkwyeG45TkV2cUMKQ1VXYmVoZHFtQjFRbS84bnhESlRpdzBOU0dYSkhRNEltcmh4RXdJREFRQUJBb0lCQVFDMGZjWFIzRUhmY3ZjNQplRWswMVlKNFFubmRIeHZOdG1UdFo1cHYyR0xOcmFuN0svbC9QU05Za1hFSVZFbEdtb1pZaWQvMktUTFZHcWtwCnZ2c2p5QVJJbXVSM2Q2bFJndWNoTW8xbTl0OHNKZ2FPR1FOS2IrbXpMS0RveU1oZTdlOE1DYlpYRkc3dTZnanMKWjdFRlRjdHh3MkRXT3NKZXc2TjFTbXE4VzA1RXZMT0RtbEF0dGsxcXlZMWdwYzlEa0d5Z1RPaEpQdWd2Vng0WgorUXh4YU9PUXNDN08rV3RMbkIxR0hnNmt2MDc0UzZLeVdKbkdXWnhKdHY5SEZ1dENTVkpqMjh5RXhobDBlSHkvCjU1a2E2SzVrak9FTnNMQTd0U2VlUUMwN3BsQUxIV2JCcm5yRGxOMlZ2NjkxR0wzVXV2VllaQnU4RG5QK0l5WUwKY3JsOHl3RHhBb0dCQVB1a3lOM0pBN2ZFT1BxUmNlQjVydUV5eHBxUVg2U1pjSmZSV1lXTW1hbWF6ZTdIOGcwNgozVko0dkhYdnRrcGVTVjRkbTdMQnVxRGZJNHkrWjRpVUhaTmozQVd4c3ZoNk9hMDNxUEtZMnYybzVDOXBQYlBHCjE3dld3eXJtazdmOGZoQjg0RjdkYXhVb2FHNW0zbS9FMDFaUU93RmhGaDF2cUwvVGdZQ1NCQXNwQW9HQkFNb2cKaFBjZGI0Ymh5RkdHMEtaZVluR3g4ZXF4eUdHQ0p6RFVTcHpBMlRPS20rRjBqeU5PTUxjMGxBcTlWTjgzTjRPTwowbkxMVXF4ZWRiVmtBK09BblBUTHB6WUJnQjJNcURqRCtkTlBSWmxVTUtLSlBFdEhSY05sekUyZEFNVFBNNXlUCkh3Wkp1aXpWWjIyV29DdVNoTFlwNnhVbnFjMnVQK1dxKzhPTExWM2JBb0dBVVhPMEpMMjArMTJEUisrZUdaZXAKZUhFMEFjR3JnNTY2NkJrMlRka0Z2L1ZBcFFLSklha2xERlhTUXFaVnJkcTVDc0t3cS9xekN2RlBFM1pxRXJaRwpvSGVaTnlxZWtIa1hoQzdZKzdWb1pPU3UvMzJrSURYRGpLUm1SZE9laXRZcWcvRzN1bDBYRlNFZ05HUU5xY1hlCjFqaGY4UUZZNUN4SlJkWVRPK2VIY1lrQ2dZRUFtVks3cWZ2eEtwN0FabDllaktUU0JpNldOSkp4VHMzOHpvUnEKcUtkODJ5VU1nNlA0SkM3ZXMwbzE5a09TU3RSR3p3dWF4YXRINWlxdEhWQmx4c0E3ejFGZ1lJNFkwZEZ0bGNuTApDeWg1d2dwajdoY3QzbWlOR2VCeGJucG5KK09JNGYrVHJDQm5FalU3QkowYW1KTEhDcXVYZ0crYTFjT1ZBckdGCjB0b1RLcnNDZ1lFQWpVZk5PQ3c1T1ZIanoyZGk2ZTRwV2J5azFLYjIramw2Y25EeGtGTUU2dDBxbXpWd1pId1kKNlRXb1JSakNROXd5WEhCL2JYaUtJQVl0b3NvWjVwT3c1MTdjZWhQS3JUaE5YSU1WdVBVWDBrZ0E1cWpqWmJSeQpTZVg2VGYveTM0NnQ0d0wrVFR6Y3F0WWViTnRwMG8yeWw0RDl1VWcyRjNNVWNjZUtJNnB2QmswPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="</span>}}],<span class="attr">"contexts"</span>:[{<span class="attr">"name"</span>:<span class="string">"internal"</span>,<span class="attr">"context"</span>:{<span class="attr">"cluster"</span>:<span class="string">"internalCluster"</span>,<span class="attr">"user"</span>:<span class="string">"user"</span>}}],<span class="attr">"current-context"</span>:<span class="string">"internal"</span>}</span><br></pre></td></tr></tbody></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/hashicorp/vault-helm/tree/v0.6.0" target="_blank" rel="noopener"><strong>Vault官方部署Chart</strong></a></p>
<p><a href="https://learn.hashicorp.com/vault/kubernetes/minikube" target="_blank" rel="noopener"><strong>Vault官方部署说明</strong></a></p>
<p><a href="https://github.com/hashicorp/docker-vault/blob/master/0.X/Dockerfile" target="_blank" rel="noopener">Vault官方镜像GitHub</a></p>
<p><a href="https://www.hashicorp.com/blog/authenticating-applications-with-vault-approle/" target="_blank" rel="noopener">Vault官方博客–AppRole Auth</a></p>
<p><a href="https://www.vaultproject.io/docs/auth/approle" target="_blank" rel="noopener">Vault官方文档-AppRole Auth</a></p>
<p><a href="https://learn.hashicorp.com/vault/identity-access-management/approle#auth-methods" target="_blank" rel="noopener"><strong>Vault-AppRole配置使用说明</strong></a></p>
<p><a href="https://www.vaultproject.io/api-docs/auth/approle" target="_blank" rel="noopener"><strong>Vault-AuthMethod-AppRole-API说明</strong></a></p>
<p><a href="https://www.vaultproject.io/docs/secrets/databases" target="_blank" rel="noopener">Vault-SecretsEngine-Databases</a></p>
<p><a href="https://www.vaultproject.io/docs/secrets/databases/cassandra" target="_blank" rel="noopener">Vault-SecretsEngine-Cassandra</a></p>
<p><a href="https://www.vaultproject.io/docs/secrets/databases/mongodb" target="_blank" rel="noopener">Vault-SecretsEngine-MongoDB</a></p>
<p><a href="https://www.vaultproject.io/docs/secrets/databases/mongodbatlas" target="_blank" rel="noopener">Vault-SecretsEngine-MongoDBAtlas</a></p>
<p><a href="https://www.vaultproject.io/docs/secrets/databases/mysql-maria" target="_blank" rel="noopener">Vault-SecretsEngine-MySQL/MariaDB</a></p>
<p><a href="https://www.vaultproject.io/docs/secrets/databases/elasticdb" target="_blank" rel="noopener">Vault-SecretsEngine-ElasticSearch</a></p>
<p>Vault配置数据库秘钥引擎的三种方式，以postgresql举例:</p>
<p><a href="https://learn.hashicorp.com/vault/secrets-management/sm-dynamic-secrets#step-3-create-a-role" target="_blank" rel="noopener"><strong>Vault-SecretsEngine-PostgreSQL-DynamicSecret</strong></a></p>
<p><a href="https://learn.hashicorp.com/vault/secrets-management/db-creds-rotation" target="_blank" rel="noopener"><strong>Vault-SecretsEngine-PostgreSQL-StaticRoles</strong></a></p>
<p><a href="https://learn.hashicorp.com/vault/secrets-management/db-root-rotation" target="_blank" rel="noopener"><strong>Vault-SecretsEngine-PostgreSQL-RootCredentialRotation</strong></a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
        <tag>Vault</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Module实现go语言的插件机制</title>
    <url>/2020/07/23/golang-2020-07-23-Go-Module%E5%AE%9E%E7%8E%B0go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最近由于工作需求，需要统一调用各个系统的相同逻辑。并不想每集成一个服务就修改调用的代码，而是想实现插件机制。</p>
<p>利用go包的init特性，将示例插件注册，并在主程序中调用。</p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>代码结构如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">└── src</span><br><span class="line">    └── test</span><br><span class="line">        ├── main.go</span><br><span class="line">        └── adaptor</span><br><span class="line">            ├── init.go</span><br><span class="line">            └── standard</span><br><span class="line">                └── imports.go</span><br><span class="line">            └── cls1</span><br><span class="line">                └── base.go</span><br><span class="line">            └── cls2</span><br><span class="line">                └── base.go</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><a href="https://github.com/hex-py/example-adaptor" target="_blank" rel="noopener">项目代码</a></p>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="类工厂"><a href="#类工厂" class="headerlink" title="类工厂"></a>类工厂</h2><blockquote>
<p>具体文件: ./example-adaptor/adaptor/init.go</p>
</blockquote>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adaptor</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">type</span> Adaptors <span class="keyword">interface</span> {</span><br><span class="line">	CreateUser(user <span class="keyword">string</span>) (status <span class="keyword">bool</span>, err error)</span><br><span class="line">	DeleteUser(user <span class="keyword">string</span>) (status <span class="keyword">bool</span>, err error)</span><br><span class="line">	Policies() (status <span class="keyword">bool</span>, err error)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	<span class="comment">// 插件字典</span></span><br><span class="line">	FactoryByName = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">Adaptors</span>)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册插件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(name <span class="keyword">string</span>, factory <span class="keyword">func</span>()</span> <span class="title">Adaptors</span>)</span> {</span><br><span class="line">	FactoryByName[name] = factory</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="插件类-cls1-cls2"><a href="#插件类-cls1-cls2" class="headerlink" title="插件类 cls1 cls2"></a>插件类 <code>cls1</code> <code>cls2</code></h2><blockquote>
<p>具体文件： <code>adaptor/cls1/base.go</code> 和 <code>adaptor/cls2/base.go</code><br>以cls1举例</p>
</blockquote>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cls1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"example/adaptor"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 Cls1</span></span><br><span class="line"><span class="keyword">type</span> Cls1 <span class="keyword">struct</span> {</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现Class接口， 分别为 CreateUser DeleteUser Policies</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Cls1)</span> <span class="title">CreateUser</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="params">(status <span class="keyword">bool</span>, err error)</span></span> {</span><br><span class="line">	fmt.Println(<span class="string">"Cls1 - create user: "</span>, user)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Cls1)</span> <span class="title">DeleteUser</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="params">(status <span class="keyword">bool</span>, err error)</span></span> {</span><br><span class="line">	fmt.Println(<span class="string">"Cls1 - Delete user: "</span>, user)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Cls1)</span> <span class="title">Policies</span><span class="params">()</span> <span class="params">(status <span class="keyword">bool</span>, err error)</span></span> {</span><br><span class="line">	fmt.Println(<span class="string">"Cls1 - get policies"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入时注册插件的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> {</span><br><span class="line">	<span class="comment">// 导入包时 注册 cls1</span></span><br><span class="line">	adaptor.Register(<span class="string">"Cls1"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">adaptor</span>.<span class="title">Adaptors</span></span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">new</span>(Cls1)</span><br><span class="line">	})</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="导入包-实现插件自动注册到-Struct-FactoryByName"><a href="#导入包-实现插件自动注册到-Struct-FactoryByName" class="headerlink" title="导入包,实现插件自动注册到 Struct FactoryByName"></a>导入包,实现插件自动注册到 Struct <code>FactoryByName</code></h2><blockquote>
<p>具体文件： ./example-adaptor/adaptor/standard/imports.go</p>
</blockquote>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> standard</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="comment">// 统一导入， 触发init() 实现自动注册</span></span><br><span class="line">	_ <span class="string">"example/adaptor/cls1"</span> <span class="comment">// 匿名引用cls1包, 自动注册</span></span><br><span class="line">	_ <span class="string">"example/adaptor/cls2"</span> <span class="comment">// 匿名引用cls2包, 自动注册</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<p>然后在项目入口文件处，导入<code>adaptor/standard</code>包即可</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	_ <span class="string">"example/adaptor/standard"</span> <span class="comment">// 统一导入，实现插件注册</span></span><br><span class="line">	<span class="string">"example/api"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	engine := api.Routers()</span><br><span class="line">	_ = engine.Run(<span class="string">":8887"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="写新的插件"><a href="#写新的插件" class="headerlink" title="写新的插件"></a>写新的插件</h1><ol>
<li>创建插件类<br>创建包<code>cls-new</code>，并在包内做到这几件事：</li>
</ol>
<ul>
<li>创建 struct <code>Cls-new</code></li>
<li>实现在adaptor中interface的方法</li>
<li>在init方法中注册</li>
</ul>
<ol start="2">
<li>在<code>adaptor/standard</code>包处进行导入<blockquote>
<p>文件路径: <code>adaptor/standard/imports.go</code></p>
</blockquote>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> standard</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="comment">// 统一导入， 触发init() 实现自动注册</span></span><br><span class="line">	_ <span class="string">"example/adaptor/cls1"</span></span><br><span class="line">	_ <span class="string">"example/adaptor/cls2"</span></span><br><span class="line">    _ <span class="string">"example/adaptor/cls-new"</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>Useful <a href="http://c.biancheng.net/view/92.html" target="_blank" rel="noopener">Go语言工厂模式自动注册</a><br><a href="https://mritd.me/2018/10/23/golang-code-plugin/" target="_blank" rel="noopener">借鉴caddy插件机制博客</a><br><a href="https://www.jianshu.com/p/ad19dbc25e6c" target="_blank" rel="noopener">Go-Plugin机制说明、简单示例</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-源码解读--grafana-v7.1.0</title>
    <url>/2020/07/24/golang-2020-07-24-Go-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-grafana-v7-1-0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最近研究grafana与keycloak集成，能正常解决认证问题，但用户只会在grafana通过keycloak用户登录时，才会在grafana的数据库中创建用户。<br>需要研究如何通过API触发此操作，为后续在grafana中给此用户授权做准备。grafana本身无此API，相近的功能Openldap与grafana用户同步也是在企业版。<br>由此需要研究grafana源码，首选API实现，无法成功则研究API背后的逻辑，直接操作数据库实现。</p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>grafana: v7.1.0<br>keycloak: 10.0.2</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Template使用-使用示例以及遇坑小记</title>
    <url>/2020/08/14/golang-2020-08-14-Go-Template%E4%BD%BF%E7%94%A8-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E9%81%87%E5%9D%91%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://golangtc.com/t/5778735bb09ecc02f70001d4" target="_blank" rel="noopener">go template href内容(&amp;,=等)被转义 </a><br><a href="https://juejin.im/post/6844903762901860360" target="_blank" rel="noopener">Go 语言标准库 text/template 包深入浅出</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-处理JSON-如何创建和解析复杂Json数据</title>
    <url>/2020/08/14/golang-2020-08-14-Go-%E5%A4%84%E7%90%86JSON-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%92%8C%E8%A7%A3%E6%9E%90%E5%A4%8D%E6%9D%82Json%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://gobyexample.com/json" target="_blank" rel="noopener">^^ Go by Example: JSON</a><br><a href="https://yourbasic.org/golang/json-example/" target="_blank" rel="noopener">^^ How to use JSON with Go (best practices)</a><br><a href="https://blog.csdn.net/shudaqi2010/article/details/100722868" target="_blank" rel="noopener">^^ Json 解析复杂结构(interface{})</a><br><a href="https://www.simpleapples.com/2018/12/24/practice-in-json-with-go/" target="_blank" rel="noopener">^^ go json 实践中遇到的坑</a><br><a href="https://medium.com/@khanakia/golang-extract-value-from-interfaces-without-specifying-the-struct-type-ffb7e23223a7" target="_blank" rel="noopener">Json 不指定struct从interface{}取值(英文)</a><br><a href="https://bingohuang.com/go-json/" target="_blank" rel="noopener">Json 创建、解析、读写文件</a><br><a href="http://polyglot.ninja/golang-json/" target="_blank" rel="noopener">Json 创建、解析、读写文件–英文版本</a><br><a href="https://blog.alexellis.io/golang-json-api-client/" target="_blank" rel="noopener">Json 从API中解析</a><br><a href="https://www.alexedwards.net/blog/how-to-properly-parse-a-json-request-body" target="_blank" rel="noopener">How to Parse a JSON Request Body in Go</a><br><a href="http://xiaorui.cc/archives/2858" target="_blank" rel="noopener">golang解析创建复杂嵌套的json数据-峰云比较乱</a><br><a href="https://www.alexedwards.net/blog/how-to-properly-parse-a-json-request-body" target="_blank" rel="noopener">How to Parse a JSON Request Body in Go</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Strings-字符串操作汇总</title>
    <url>/2020/09/02/golang-2020-09-02-Go-Strings-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<html><head></head><body><p>字符串常见操作有：</p>
<ul>
<li><p>字符串长度；</p>
</li>
<li><p>求子串；</p>
</li>
<li><p>是否存在某个字符或子串；</p>
</li>
<li><p>子串出现的次数（字符串匹配）；</p>
</li>
<li><p>字符串分割（切分）为[]string；</p>
</li>
<li><p>字符串是否有某个前缀或后缀；</p>
</li>
<li><p>字符或子串在字符串中首次出现的位置或最后一次出现的位置；</p>
</li>
<li><p>通过某个字符串将[]string 连接起来；</p>
</li>
<li><p>字符串重复几次；</p>
</li>
<li><p>字符串中子串替换；</p>
</li>
<li><p>大小写转换；</p>
</li>
<li><p>Trim 操作；</p>
</li>
<li><p>…</p>
</li>
</ul>
<blockquote>
<p> <code>string</code> 类型可以看成是一种特殊的 <code>slice</code> 类型，因此获取长度可以用内置的函数 <code>len</code>；同时支持 切片 操作，因此，子串获取很容易。</p>
</blockquote>
<blockquote>
<p>说明：这里说的<code>String</code>，指得是 rune 类型，即一个 UTF-8 字符（Unicode 代码点）。</p>
</blockquote>
<h1 id="1-正文"><a href="#1-正文" class="headerlink" title="1. 正文"></a>1. 正文</h1><h2 id="1-1-字符串长度"><a href="#1-1-字符串长度" class="headerlink" title="1.1 字符串长度"></a>1.1 字符串长度</h2><p>string 类型可以看成是一种特殊的 slice 类型，因此获取长度可以用内置的函数 len；同时支持 切片 操作，因此，子串获取很容易。</p>
<h2 id="1-2-字符串比较"><a href="#1-2-字符串比较" class="headerlink" title="1.2  字符串比较"></a>1.2  字符串比较</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Compare 函数，用于比较两个字符串的大小，如果两个字符串相等，返回为 0。如果 a 小于 b ，返回 -1 ，反之返回 1 。不推荐使用这个函数，直接使用 == != &gt; &lt; &gt;= &lt;= 等一系列运算符更加直观。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Compare</span><span class="params">(a, b <span class="keyword">string</span>)</span> <span class="title">int</span></span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//   EqualFold 函数，计算 s 与 t 忽略字母大小写后是否相等。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EqualFold</span><span class="params">(s, t <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>示例：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">a := <span class="string">"gopher"</span></span><br><span class="line">b := <span class="string">"hello world"</span></span><br><span class="line">fmt.Println(strings.Compare(a, b))</span><br><span class="line">fmt.Println(strings.Compare(a, a))</span><br><span class="line">fmt.Println(strings.Compare(b, a))</span><br><span class="line"></span><br><span class="line">fmt.Println(strings.EqualFold(<span class="string">"GO"</span>, <span class="string">"go"</span>))</span><br><span class="line">fmt.Println(strings.EqualFold(<span class="string">"壹"</span>, <span class="string">"一"</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-3-是否存在某个字符或子串"><a href="#1-3-是否存在某个字符或子串" class="headerlink" title="1.3.  是否存在某个字符或子串"></a>1.3.  是否存在某个字符或子串</h2><p>有三个函数做这件事：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 子串 substr 在 s 中，返回 true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(s, substr <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="comment">// chars 中任何一个 Unicode 代码点在 s 中，返回 true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ContainsAny</span><span class="params">(s, chars <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="comment">// Unicode 代码点 r 在 s 中，返回 true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ContainsRune</span><span class="params">(s <span class="keyword">string</span>, r <span class="keyword">rune</span>)</span> <span class="title">bool</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>这里对 <code>ContainsAny</code>函数进行一下说明，看如下例子：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(strings.ContainsAny(<span class="string">"team"</span>, <span class="string">"i"</span>))</span><br><span class="line">fmt.Println(strings.ContainsAny(<span class="string">"failure"</span>, <span class="string">"u &amp; i"</span>))</span><br><span class="line">fmt.Println(strings.ContainsAny(<span class="string">"in failure"</span>, <span class="string">"s g"</span>))</span><br><span class="line">fmt.Println(strings.ContainsAny(<span class="string">"foo"</span>, <span class="string">""</span>))</span><br><span class="line">fmt.Println(strings.ContainsAny(<span class="string">""</span>, <span class="string">""</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>

<p>说明，第二个参数 chars 中任意一个字符（Unicode Code Point）如果在第一个参数 s 中存在，则返回 true。</p>
<p>查看这三个函数的源码，发现它们只是调用了相应的 Index 函数（子串出现的位置），然后和 0 作比较返回 true 或 fale。如，<code>Contains</code>：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(s, substr <span class="keyword">string</span>)</span> <span class="title">bool</span></span> {</span><br><span class="line">  <span class="keyword">return</span> Index(s, substr) &gt;= <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<p>关于 Index 相关函数的实现，我们后面介绍。</p>
<h2 id="1-3-子串出现次数-字符串匹配"><a href="#1-3-子串出现次数-字符串匹配" class="headerlink" title="1.3. 子串出现次数 ( 字符串匹配 )"></a>1.3. 子串出现次数 ( 字符串匹配 )</h2><p>在数据结构与算法中，可能会讲解以下字符串匹配算法：</p>
<ul>
<li>朴素匹配算法</li>
<li>KMP 算法</li>
<li>Rabin-Karp 算法</li>
<li>Boyer-Moore 算法</li>
<li>…</li>
</ul>
<p>在 Go 中，查找子串出现次数(字符串模式匹配)，是通过 <code>Rabin-Karp</code> 算法实现的。Count 函数的签名如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(s, sep <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>在 Count 函数中，处理了几种特殊情况，属于字符匹配预处理的一部分。要注意：当 <code>sep</code> 为空时，Count 的返回值是：<code>utf8.RuneCountInString(s) + 1</code></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(strings.Count(<span class="string">"cheese"</span>, <span class="string">"e"</span>))</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(<span class="string">"谷歌中国"</span>))</span><br><span class="line">fmt.Println(strings.Count(<span class="string">"谷歌中国"</span>, <span class="string">""</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">12</span>  </span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></tbody></table></figure>

<p>Count 是计算子串在字符串中出现的无重叠的次数，比如：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(strings.Count(<span class="string">"fivevev"</span>, <span class="string">"vev"</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-4-字符串分割为-string"><a href="#1-4-字符串分割为-string" class="headerlink" title="1.4. 字符串分割为[]string"></a>1.4. 字符串分割为[]string</h2><p><code>Strings</code>包提供了六个三组函数：Fields 和 FieldsFunc、Split 和 SplitAfter、SplitN 和 SplitAfterN。</p>
<h3 id="1-4-1-Fields-和-FieldsFunc"><a href="#1-4-1-Fields-和-FieldsFunc" class="headerlink" title="1.4.1 Fields 和 FieldsFunc"></a>1.4.1 Fields 和 FieldsFunc</h3><p>这两个函数的签名如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fields</span><span class="params">(s <span class="keyword">string</span>)</span> []<span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FieldsFunc</span><span class="params">(s <span class="keyword">string</span>, f <span class="keyword">func</span>(<span class="keyword">rune</span>)</span> <span class="title">bool</span>) []<span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure>


<p><code>Fields</code> 用一个或多个连续的空格分隔字符串 s，返回子字符串的数组（slice）。如果字符串 s 只包含空格，则返回空列表 ([]string 的长度为 0）。其中，空格的定义是 unicode.IsSpace。</p>
<p>常见间隔符包括：’\t’, ‘\n’, ‘\v’, ‘\f’, ‘\r’, ‘ ‘, U+0085 (NEL), U+00A0 (NBSP)</p>
<p>由于是用空格分隔，因此结果中不会含有空格或空子字符串，例如：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"Fields are: %q"</span>, strings.Fields(<span class="string">"  foo bar  baz   "</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">Fields are: [<span class="string">"foo"</span> <span class="string">"bar"</span> <span class="string">"baz"</span>]</span><br></pre></td></tr></tbody></table></figure>


<p><code>FieldsFunc</code> 用这样的 Unicode 代码点 c 进行分隔：满足 f(c) 返回 true。该函数返回[]string。如果字符串 s 中所有的代码点 (unicode code points) 都满足 f(c) 或者 s 是空，则 FieldsFunc 返回空 slice。</p>
<p>也就是说，我们可以通过实现一个回调函数来指定分隔字符串 s 的字符。比如上面的例子，我们通过 FieldsFunc 来实现：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(strings.FieldsFunc(<span class="string">"  foo bar  baz   "</span>, unicode.IsSpace))</span><br></pre></td></tr></tbody></table></figure>


<p>实际上，Fields 函数就是调用 FieldsFunc 实现的：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fields</span><span class="params">(s <span class="keyword">string</span>)</span> []<span class="title">string</span></span> {</span><br><span class="line">  <span class="keyword">return</span> FieldsFunc(s, unicode.IsSpace)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h3 id="1-4-2-Split-和-SplitAfter、-SplitN-和-SplitAfterN"><a href="#1-4-2-Split-和-SplitAfter、-SplitN-和-SplitAfterN" class="headerlink" title="1.4.2. Split 和 SplitAfter、 SplitN 和 SplitAfterN"></a>1.4.2. Split 和 SplitAfter、 SplitN 和 SplitAfterN</h3><p>四个函数通过调用同一个内部函数实现：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Split</span><span class="params">(s, sep <span class="keyword">string</span>)</span> []<span class="title">string</span></span> { <span class="keyword">return</span> genSplit(s, sep, <span class="number">0</span>, <span class="number">-1</span>) }</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SplitAfter</span><span class="params">(s, sep <span class="keyword">string</span>)</span> []<span class="title">string</span></span> { <span class="keyword">return</span> genSplit(s, sep, <span class="built_in">len</span>(sep), <span class="number">-1</span>) }</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SplitN</span><span class="params">(s, sep <span class="keyword">string</span>, n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> { <span class="keyword">return</span> genSplit(s, sep, <span class="number">0</span>, n) }</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SplitAfterN</span><span class="params">(s, sep <span class="keyword">string</span>, n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> { <span class="keyword">return</span> genSplit(s, sep, <span class="built_in">len</span>(sep), n) }</span><br></pre></td></tr></tbody></table></figure>


<p>都调用了 genSplit 函数。</p>
<p>这四个函数都是通过 sep 进行分割，返回[]string。如果 sep 为空，相当于分成一个个的 UTF-8 字符，如 ：</p>
<p><code>Split("abc","")</code>，得到的是<code>[a b c]</code>。</p>
<p><code>Split(s, sep)</code> 和<code>SplitN(s, sep, -1)</code>等价；</p>
<p><code>SplitAfter(s, sep)</code> 和 <code>SplitAfterN(s, sep, -1)</code> 等价。</p>
<p><code>Split</code> 和 <code>SplitAfter</code>的区别是 Split 会将 s 中的 sep 去掉，而 SplitAfter 会保留 sep。</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, strings.Split(<span class="string">"foo,bar,baz"</span>, <span class="string">","</span>))</span><br><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, strings.SplitAfter(<span class="string">"foo,bar,baz"</span>, <span class="string">","</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="string">"foo"</span> <span class="string">"bar"</span> <span class="string">"baz"</span>]</span><br><span class="line">[<span class="string">"foo,"</span> <span class="string">"bar,"</span> <span class="string">"baz"</span>]</span><br></pre></td></tr></tbody></table></figure>

<p>带 N 的方法可以通过最后一个参数 n 控制返回的结果中的 slice 中的元素个数： </p>
<p>当 n &lt; 0 时，返回所有的子字符串；</p>
<p>当 n == 0 时，返回的结果是 nil；</p>
<p>当 n &gt; 0 时，表示返回的 slice 中最多只有 n 个元素；</p>
<p>其中，最后一个元素不会分割，比如：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, strings.SplitN(<span class="string">"foo,bar,baz"</span>, <span class="string">","</span>, <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="string">"foo"</span> <span class="string">"bar,baz"</span>]</span><br></pre></td></tr></tbody></table></figure>


<p>官方文档提供的例子，输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, strings.Split(<span class="string">"a,b,c"</span>, <span class="string">","</span>))</span><br><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, strings.Split(<span class="string">"a man a plan a canal panama"</span>, <span class="string">"a "</span>))</span><br><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, strings.Split(<span class="string">" xyz "</span>, <span class="string">""</span>))</span><br><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, strings.Split(<span class="string">""</span>, <span class="string">"Bernardo O'Higgins"</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span>]</span><br><span class="line">[<span class="string">""</span> <span class="string">"man "</span> <span class="string">"plan "</span> <span class="string">"canal panama"</span>]</span><br><span class="line">[<span class="string">" "</span> <span class="string">"x"</span> <span class="string">"y"</span> <span class="string">"z"</span> <span class="string">" "</span>]</span><br><span class="line">[<span class="string">""</span>]</span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-5-字符串是否有某个前缀或后缀"><a href="#1-5-字符串是否有某个前缀或后缀" class="headerlink" title="1.5. 字符串是否有某个前缀或后缀"></a>1.5. 字符串是否有某个前缀或后缀</h2><p>两个函数<code>HasPrefix</code>和<code>HasSuffix</code>：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// s 中是否以 prefix 开始</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix <span class="keyword">string</span>)</span> <span class="title">bool</span></span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">len</span>(s) &gt;= <span class="built_in">len</span>(prefix) &amp;&amp; s[<span class="number">0</span>:<span class="built_in">len</span>(prefix)] == prefix</span><br><span class="line">}</span><br><span class="line"><span class="comment">// s 中是否以 suffix 结尾</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasSuffix</span><span class="params">(s, suffix <span class="keyword">string</span>)</span> <span class="title">bool</span></span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">len</span>(s) &gt;= <span class="built_in">len</span>(suffix) &amp;&amp; s[<span class="built_in">len</span>(s)-<span class="built_in">len</span>(suffix):] == suffix</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>如果 prefix 或 suffix 为 “” , 返回值总是 true。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(strings.HasPrefix(<span class="string">"Gopher"</span>, <span class="string">"Go"</span>))</span><br><span class="line">fmt.Println(strings.HasPrefix(<span class="string">"Gopher"</span>, <span class="string">"C"</span>))</span><br><span class="line">fmt.Println(strings.HasPrefix(<span class="string">"Gopher"</span>, <span class="string">""</span>))</span><br><span class="line">fmt.Println(strings.HasSuffix(<span class="string">"Amigo"</span>, <span class="string">"go"</span>))</span><br><span class="line">fmt.Println(strings.HasSuffix(<span class="string">"Amigo"</span>, <span class="string">"Ami"</span>))</span><br><span class="line">fmt.Println(strings.HasSuffix(<span class="string">"Amigo"</span>, <span class="string">""</span>))</span><br></pre></td></tr></tbody></table></figure>

<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-6-字符或子串在字符串中出现的位置"><a href="#1-6-字符或子串在字符串中出现的位置" class="headerlink" title="1.6. 字符或子串在字符串中出现的位置"></a>1.6. 字符或子串在字符串中出现的位置</h2><p><code>Index</code>函数：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 在 s 中查找 sep 的第一次出现，返回第一次出现的索引</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(s, sep <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="comment">// 在 s 中查找字节 c 的第一次出现，返回第一次出现的索引</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IndexByte</span><span class="params">(s <span class="keyword">string</span>, c <span class="keyword">byte</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="comment">// chars 中任何一个 Unicode 代码点在 s 中首次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IndexAny</span><span class="params">(s, chars <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="comment">// 查找字符 c 在 s 中第一次出现的位置，其中 c 满足 f(c) 返回 true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IndexFunc</span><span class="params">(s <span class="keyword">string</span>, f <span class="keyword">func</span>(<span class="keyword">rune</span>)</span> <span class="title">bool</span>) <span class="title">int</span></span></span><br><span class="line"><span class="comment">// Unicode 代码点 r 在 s 中第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IndexRune</span><span class="params">(s <span class="keyword">string</span>, r <span class="keyword">rune</span>)</span> <span class="title">int</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有三个对应的查找最后一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LastIndex</span><span class="params">(s, sep <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LastIndexByte</span><span class="params">(s <span class="keyword">string</span>, c <span class="keyword">byte</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LastIndexAny</span><span class="params">(s, chars <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LastIndexFunc</span><span class="params">(s <span class="keyword">string</span>, f <span class="keyword">func</span>(<span class="keyword">rune</span>)</span> <span class="title">bool</span>) <span class="title">int</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>1.3小节<code>Contain</code> 相关的函数内部调用的是响应的 <code>Index</code> 函数。</p>
<p> <code>IndexFunc</code> 举例：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">han := <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> {</span><br><span class="line">    <span class="keyword">return</span> unicode.Is(unicode.Han, c) <span class="comment">// 汉字</span></span><br><span class="line">}</span><br><span class="line">fmt.Println(strings.IndexFunc(<span class="string">"Hello, world"</span>, han))</span><br><span class="line">fmt.Println(strings.IndexFunc(<span class="string">"Hello, 世界"</span>, han))</span><br></pre></td></tr></tbody></table></figure>


<p>输出：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-7-字符串-JOIN-操作"><a href="#1-7-字符串-JOIN-操作" class="headerlink" title="1.7. 字符串 JOIN 操作"></a>1.7. 字符串 JOIN 操作</h2><p><code>Join</code>函数 实现 字符串或数组连接 ：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Join</span><span class="params">(a []<span class="keyword">string</span>, sep <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>自己实现：</p>
<blockquote>
<p>使用了 <code>bytes</code> 包的 <code>Buffer</code> 类型，避免大量的字符串连接操作（因为 Go 中字符串是不可变的）。</p>
</blockquote>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Join</span><span class="params">(str []<span class="keyword">string</span>, sep <span class="keyword">string</span>)</span> <span class="title">string</span></span> {</span><br><span class="line">  <span class="comment">// 特殊情况应该做处理</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(str) == <span class="number">0</span> {</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(str) == <span class="number">1</span> {</span><br><span class="line">      <span class="keyword">return</span> str[<span class="number">0</span>]</span><br><span class="line">  }</span><br><span class="line">  buffer := bytes.NewBufferString(str[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> _, s := <span class="keyword">range</span> str[<span class="number">1</span>:] {</span><br><span class="line">      buffer.WriteString(sep)</span><br><span class="line">      buffer.WriteString(s)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> buffer.String()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p>标准库的实现：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Join</span><span class="params">(a []<span class="keyword">string</span>, sep <span class="keyword">string</span>)</span> <span class="title">string</span></span> {</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">0</span> {</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">1</span> {</span><br><span class="line">      <span class="keyword">return</span> a[<span class="number">0</span>]</span><br><span class="line">  }</span><br><span class="line">  n := <span class="built_in">len</span>(sep) * (<span class="built_in">len</span>(a) - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ {</span><br><span class="line">      n += <span class="built_in">len</span>(a[i])</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, n)</span><br><span class="line">  bp := <span class="built_in">copy</span>(b, a[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> _, s := <span class="keyword">range</span> a[<span class="number">1</span>:] {</span><br><span class="line">      bp += <span class="built_in">copy</span>(b[bp:], sep)</span><br><span class="line">      bp += <span class="built_in">copy</span>(b[bp:], s)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">string</span>(b)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p>标准库的实现没有用 bytes 包，当然也不会简单的通过 + 号连接字符串。Go 中是不允许循环依赖的，标准库中很多时候会出现代码拷贝，而不是引入某个包。这里 Join 的实现方式挺好，我个人猜测，不直接使用 bytes 包，也是不想依赖 bytes 包（其实 bytes 中的实现也是 copy 方式）。</p>
<p>简单使用示例：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(Join([]<span class="keyword">string</span>{<span class="string">"name=xxx"</span>, <span class="string">"age=xx"</span>}, <span class="string">"&amp;"</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出结果:</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">name=xxx&amp;age=xx</span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-8-字符串重复几次"><a href="#1-8-字符串重复几次" class="headerlink" title="1.8. 字符串重复几次"></a>1.8. 字符串重复几次</h2><p>函数签名如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Repeat</span><span class="params">(s <span class="keyword">string</span>, count <span class="keyword">int</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>将 s 重复 count 次，如果 count 为负数或返回值长度 len(s)*count 超出 string 上限会导致 panic，这个函数使用很简单：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(<span class="string">"ba"</span> + strings.Repeat(<span class="string">"na"</span>, <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">banana</span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-9-字符替换"><a href="#1-9-字符替换" class="headerlink" title="1.9. 字符替换"></a>1.9. 字符替换</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Map</span><span class="params">(mapping <span class="keyword">func</span>(<span class="keyword">rune</span>)</span> <span class="title">rune</span>, <span class="title">s</span> <span class="title">string</span>) <span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>Map 函数，将 s 的每一个字符按照 mapping 的规则做映射替换，如果 mapping 返回值 &lt;0 ，则舍弃该字符。该方法只能对每一个字符做处理，但处理方式很灵活，可以方便的过滤，筛选汉字等。</p>
<p>示例：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">mapping := <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">rune</span></span> {</span><br><span class="line">    <span class="keyword">switch</span> {</span><br><span class="line">    <span class="keyword">case</span> r &gt;= <span class="string">'A'</span> &amp;&amp; r &lt;= <span class="string">'Z'</span>: <span class="comment">// 大写字母转小写</span></span><br><span class="line">        <span class="keyword">return</span> r + <span class="number">32</span></span><br><span class="line">    <span class="keyword">case</span> r &gt;= <span class="string">'a'</span> &amp;&amp; r &lt;= <span class="string">'z'</span>: <span class="comment">// 小写字母不处理</span></span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    <span class="keyword">case</span> unicode.Is(unicode.Han, r): <span class="comment">// 汉字换行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'\n'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span> <span class="comment">// 过滤所有非字母、汉字的字符</span></span><br><span class="line">}</span><br><span class="line">fmt.Println(strings.Map(mapping, <span class="string">"Hello你#￥%……\n（'World\n,好Hello^(&amp;(*界gopher..."</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br><span class="line">hello</span><br><span class="line">gopher</span><br></pre></td></tr></tbody></table></figure>

<h2 id="1-10-字符串子串替换"><a href="#1-10-字符串子串替换" class="headerlink" title="1.10. 字符串子串替换"></a>1.10. 字符串子串替换</h2><p>进行字符串替换时，考虑到性能问题，能不用正则尽量别用，应该用这里的函数。</p>
<p>字符串替换的函数签名如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 用 new 替换 s 中的 old，一共替换 n 个。</span></span><br><span class="line"><span class="comment">// 如果 n &lt; 0，则不限制替换次数，即全部替换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Replace</span><span class="params">(s, old, <span class="built_in">new</span> <span class="keyword">string</span>, n <span class="keyword">int</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="comment">// 该函数内部直接调用了函数 Replace(s, old, new , -1)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReplaceAll</span><span class="params">(s, old, <span class="built_in">new</span> <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>使用示例：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(strings.Replace(<span class="string">"oink oink oink"</span>, <span class="string">"k"</span>, <span class="string">"ky"</span>, <span class="number">2</span>))</span><br><span class="line">fmt.Println(strings.Replace(<span class="string">"oink oink oink"</span>, <span class="string">"oink"</span>, <span class="string">"moo"</span>, <span class="number">-1</span>))</span><br><span class="line">fmt.Println(strings.ReplaceAll(<span class="string">"oink oink oink"</span>, <span class="string">"oink"</span>, <span class="string">"moo"</span>))</span><br></pre></td></tr></tbody></table></figure>

<p>输出：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">oinky oinky oink</span><br><span class="line">moo moo moo</span><br><span class="line">moo moo moo</span><br></pre></td></tr></tbody></table></figure>


<p>如果我们希望一次替换多个，比如我们希望替换 <code>This is &lt;b&gt;HTML&lt;/b&gt;</code> 中的 <code>&lt;</code> 和 <code>&gt;</code> 为 <code>&amp;lt</code>; 和 <code>&amp;gt;</code>;，可以调用上面的函数两次。但标准库提供了另外的方法进行这种替换。</p>
<h2 id="1-11-大小写转换"><a href="#1-11-大小写转换" class="headerlink" title="1.11 大小写转换"></a>1.11 大小写转换</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToLower</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToLowerSpecial</span><span class="params">(c unicode.SpecialCase, s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToUpper</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToUpperSpecial</span><span class="params">(c unicode.SpecialCase, s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>大小写转换包含了 4 个相关函数，<code>ToLower</code>和<code>ToUpper</code> 用于大小写转换。<code>ToLowerSpecial</code>和<code>ToUpperSpecial</code> 可以转换特殊字符的大小写。 举个例子：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(strings.ToLower(<span class="string">"HELLO WORLD"</span>))</span><br><span class="line">fmt.Println(strings.ToLower(<span class="string">"Ā Á Ǎ À"</span>))</span><br><span class="line">fmt.Println(strings.ToLowerSpecial(unicode.TurkishCase, <span class="string">"壹"</span>))</span><br><span class="line">fmt.Println(strings.ToLowerSpecial(unicode.TurkishCase, <span class="string">"HELLO WORLD"</span>))</span><br><span class="line">fmt.Println(strings.ToLower(<span class="string">"Önnek İş"</span>))</span><br><span class="line">fmt.Println(strings.ToLowerSpecial(unicode.TurkishCase, <span class="string">"Önnek İş"</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(strings.ToUpper(<span class="string">"hello world"</span>))</span><br><span class="line">fmt.Println(strings.ToUpper(<span class="string">"ā á ǎ à"</span>))</span><br><span class="line">fmt.Println(strings.ToUpperSpecial(unicode.TurkishCase, <span class="string">"一"</span>))</span><br><span class="line">fmt.Println(strings.ToUpperSpecial(unicode.TurkishCase, <span class="string">"hello world"</span>))</span><br><span class="line">fmt.Println(strings.ToUpper(<span class="string">"örnek iş"</span>))</span><br><span class="line">fmt.Println(strings.ToUpperSpecial(unicode.TurkishCase, <span class="string">"örnek iş"</span>))</span><br></pre></td></tr></tbody></table></figure>


<p>输出结果:</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">hello world</span><br><span class="line">ā á ǎ à</span><br><span class="line">壹</span><br><span class="line">hello world</span><br><span class="line">önnek iş</span><br><span class="line">önnek iş</span><br><span class="line">HELLO WORLD</span><br><span class="line">Ā Á Ǎ À       <span class="comment">// 汉字拼音有效</span></span><br><span class="line">一           <span class="comment">//  汉字无效</span></span><br><span class="line">HELLO WORLD</span><br><span class="line">ÖRNEK IŞ</span><br><span class="line">ÖRNEK İŞ    <span class="comment">// 有细微差别</span></span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-12-标题处理"><a href="#1-12-标题处理" class="headerlink" title="1.12. 标题处理"></a>1.12. 标题处理</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Title</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToTitle</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToTitleSpecial</span><span class="params">(c unicode.SpecialCase, s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>标题处理包含 3 个相关函数，其中 Title 会将 s 每个单词的首字母大写，不处理该单词的后续字符。ToTitle 将 s 的每个字母大写。ToTitleSpecial 将 s 的每个字母大写，并且会将一些特殊字母转换为其对应的特殊大写字母。</p>
<p>举个例子：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">fmt.Println(strings.Title(<span class="string">"hElLo wOrLd"</span>))</span><br><span class="line">fmt.Println(strings.ToTitle(<span class="string">"hElLo wOrLd"</span>))</span><br><span class="line">fmt.Println(strings.ToTitleSpecial(unicode.TurkishCase, <span class="string">"hElLo wOrLd"</span>))</span><br><span class="line">fmt.Println(strings.Title(<span class="string">"āáǎà ōóǒò êēéěè"</span>))</span><br><span class="line">fmt.Println(strings.ToTitle(<span class="string">"āáǎà ōóǒò êēéěè"</span>))</span><br><span class="line">fmt.Println(strings.ToTitleSpecial(unicode.TurkishCase, <span class="string">"āáǎà ōóǒò êēéěè"</span>))</span><br><span class="line">fmt.Println(strings.Title(<span class="string">"dünyanın ilk borsa yapısı Aizonai kabul edilir"</span>))</span><br><span class="line">fmt.Println(strings.ToTitle(<span class="string">"dünyanın ilk borsa yapısı Aizonai kabul edilir"</span>))</span><br><span class="line">fmt.Println(strings.ToTitleSpecial(unicode.TurkishCase, <span class="string">"dünyanın ilk borsa yapısı Aizonai kabul edilir"</span>))</span><br></pre></td></tr></tbody></table></figure>

<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">HElLo WOrLd</span><br><span class="line">HELLO WORLD</span><br><span class="line">HELLO WORLD</span><br><span class="line">Āáǎà Ōóǒò Êēéěè</span><br><span class="line">ĀÁǍÀ ŌÓǑÒ ÊĒÉĚÈ</span><br><span class="line">ĀÁǍÀ ŌÓǑÒ ÊĒÉĚÈ</span><br><span class="line">Dünyanın Ilk Borsa Yapısı Aizonai Kabul Edilir</span><br><span class="line">DÜNYANIN ILK BORSA YAPISI AIZONAI KABUL EDILIR</span><br><span class="line">DÜNYANIN İLK BORSA YAPISI AİZONAİ KABUL EDİLİR</span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-13-修剪"><a href="#1-13-修剪" class="headerlink" title="1.13. 修剪"></a>1.13. 修剪</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 将 s 左侧和右侧中匹配 cutset 中的任一字符的字符去掉</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Trim</span><span class="params">(s <span class="keyword">string</span>, cutset <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="comment">// 将 s 左侧的匹配 cutset 中的任一字符的字符去掉</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimLeft</span><span class="params">(s <span class="keyword">string</span>, cutset <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="comment">// 将 s 右侧的匹配 cutset 中的任一字符的字符去掉</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimRight</span><span class="params">(s <span class="keyword">string</span>, cutset <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="comment">// 如果 s 的前缀为 prefix 则返回去掉前缀后的 string , 否则 s 没有变化。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimPrefix</span><span class="params">(s, prefix <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="comment">// 如果 s 的后缀为 suffix 则返回去掉后缀后的 string , 否则 s 没有变化。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimSuffix</span><span class="params">(s, suffix <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="comment">// 将 s 左侧和右侧的间隔符去掉。常见间隔符包括：'\t', '\n', '\v', '\f', '\r', ' ', U+0085 (NEL)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimSpace</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="comment">// 将 s 左侧和右侧的匹配 f 的字符去掉</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimFunc</span><span class="params">(s <span class="keyword">string</span>, f <span class="keyword">func</span>(<span class="keyword">rune</span>)</span> <span class="title">bool</span>) <span class="title">string</span></span></span><br><span class="line"><span class="comment">// 将 s 左侧的匹配 f 的字符去掉</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimLeftFunc</span><span class="params">(s <span class="keyword">string</span>, f <span class="keyword">func</span>(<span class="keyword">rune</span>)</span> <span class="title">bool</span>) <span class="title">string</span></span></span><br><span class="line"><span class="comment">// 将 s 右侧的匹配 f 的字符去掉</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimRightFunc</span><span class="params">(s <span class="keyword">string</span>, f <span class="keyword">func</span>(<span class="keyword">rune</span>)</span> <span class="title">bool</span>) <span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>包含了 9 个相关函数用于修剪字符串。</p>
<p>举个例子：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">x := <span class="string">"!!!@@@你好,!@#$ Gophers###$$$"</span></span><br><span class="line">fmt.Println(strings.Trim(x, <span class="string">"@#$!%^&amp;*()_+=-"</span>))</span><br><span class="line">fmt.Println(strings.TrimLeft(x, <span class="string">"@#$!%^&amp;*()_+=-"</span>))</span><br><span class="line">fmt.Println(strings.TrimRight(x, <span class="string">"@#$!%^&amp;*()_+=-"</span>))</span><br><span class="line">fmt.Println(strings.TrimSpace(<span class="string">" \t\n Hello, Gophers \n\t\r\n"</span>))</span><br><span class="line">fmt.Println(strings.TrimPrefix(x, <span class="string">"!"</span>))</span><br><span class="line">fmt.Println(strings.TrimSuffix(x, <span class="string">"$"</span>))</span><br><span class="line"></span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> {</span><br><span class="line">    <span class="keyword">return</span> !unicode.Is(unicode.Han, r) <span class="comment">// 非汉字返回 true</span></span><br><span class="line">}</span><br><span class="line">fmt.Println(strings.TrimFunc(x, f))</span><br><span class="line">fmt.Println(strings.TrimLeftFunc(x, f))</span><br><span class="line">fmt.Println(strings.TrimRightFunc(x, f))</span><br></pre></td></tr></tbody></table></figure>

<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">你好,!@#$ Gophers</span><br><span class="line">你好,!@#$ Gophers###$$$</span><br><span class="line">!!!@@@你好,!@#$ Gophers</span><br><span class="line">Hello, Gophers</span><br><span class="line">!!@@@你好,!@#$ Gophers###$$$</span><br><span class="line">!!!@@@你好,!@#$ Gophers###$$</span><br><span class="line">你好</span><br><span class="line">你好,!@#$ Gophers###$$$</span><br><span class="line">!!!@@@你好</span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-14-Replacer-类型"><a href="#1-14-Replacer-类型" class="headerlink" title="1.14. Replacer 类型"></a>1.14. Replacer 类型</h2><p>这是一个结构，没有导出任何字段，实例化通过 func NewReplacer(oldnew …string) *Replacer 函数进行，其中不定参数 oldnew 是 old-new 对，即进行多个替换。如果 oldnew 长度与奇数，会导致 panic.</p>
<p>示例：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">r := strings.NewReplacer(<span class="string">"&lt;"</span>, <span class="string">"&amp;lt;"</span>, <span class="string">"&gt;"</span>, <span class="string">"&amp;gt;"</span>)</span><br><span class="line">fmt.Println(r.Replace(<span class="string">"This is &lt;b&gt;HTML&lt;/b&gt;!"</span>))</span><br></pre></td></tr></tbody></table></figure>

<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">This is &amp;lt;b&amp;gt;HTML&amp;lt;/b&amp;gt;!</span><br></pre></td></tr></tbody></table></figure>


<p>另外，Replacer 还提供了另外一个方法，它在替换之后将结果写入 io.Writer 中。</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Replacer)</span> <span class="title">WriteString</span><span class="params">(w io.Writer, s <span class="keyword">string</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></tbody></table></figure>


<h2 id="1-15-Reader-类型"><a href="#1-15-Reader-类型" class="headerlink" title="1.15. Reader 类型"></a>1.15. Reader 类型</h2><p>看到名字就能猜到，这是实现了 io 包中的接口。它实现了 io.Reader（Read 方法），io.ReaderAt（ReadAt 方法），io.Seeker（Seek 方法），io.WriterTo（WriteTo 方法），io.ByteReader（ReadByte 方法），io.ByteScanner（ReadByte 和 UnreadByte 方法），io.RuneReader（ReadRune 方法） 和 io.RuneScanner（ReadRune 和 UnreadRune 方法）。</p>
<p>Reader 结构如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> {</span><br><span class="line">  s        <span class="keyword">string</span>    <span class="comment">// Reader 读取的数据来源</span></span><br><span class="line">  i        <span class="keyword">int</span> <span class="comment">// current reading index（当前读的索引位置）</span></span><br><span class="line">  prevRune <span class="keyword">int</span> <span class="comment">// index of previous rune; or &lt; 0（前一个读取的 rune 索引位置）</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p>可见 Reader 结构没有导出任何字段，而是提供一个实例化方法：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(s <span class="keyword">string</span>)</span> *<span class="title">Reader</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>该方法接收一个字符串，返回的 Reader 实例就是从该参数字符串读数据。在后面学习了 bytes 包之后，可以知道 bytes.NewBufferString 有类似的功能，不过，如果只是为了读取，NewReader 会更高效。</p>
<p>其他方法不介绍了，都是之前接口的实现，有兴趣的可以看看源码实现，大部分都是根据 i、prevRune 两个属性来控制。</p>
<h2 id="1-16-Builder-类型"><a href="#1-16-Builder-类型" class="headerlink" title="1.16.  Builder 类型"></a>1.16.  Builder 类型</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Builder <span class="keyword">struct</span> {</span><br><span class="line">    addr *Builder <span class="comment">// of receiver, to detect copies by value</span></span><br><span class="line">    buf  []<span class="keyword">byte</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>该类型实现了 io 包下的 Writer, ByteWriter, StringWriter 等接口，可以向该对象内写入数据，Builder 没有实现 Reader 等接口，所以该类型不可读，但提供了 String 方法可以获取对象内的数据。</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 该方法向 b 写入一个字节</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">WriteByte</span><span class="params">(c <span class="keyword">byte</span>)</span> <span class="title">error</span></span></span><br><span class="line"><span class="comment">// WriteRune 方法向 b 写入一个字符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">WriteRune</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br><span class="line"><span class="comment">// WriteRune 方法向 b 写入字节数组 p</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">Write</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br><span class="line"><span class="comment">// WriteRune 方法向 b 写入字符串 s</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">WriteString</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br><span class="line"><span class="comment">// Len 方法返回 b 的数据长度。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span></span><br><span class="line"><span class="comment">// Cap 方法返回 b 的 cap。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">Cap</span><span class="params">()</span> <span class="title">int</span></span></span><br><span class="line"><span class="comment">// Grow 方法将 b 的 cap 至少增加 n (可能会更多)。如果 n 为负数，会导致 panic。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">Grow</span><span class="params">(n <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="comment">// Reset 方法将 b 清空 b 的所有内容。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">Reset</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">// String 方法将 b 的数据以 string 类型返回。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span></span><br></pre></td></tr></tbody></table></figure>


<p>Builder 有 4 个与写入相关的方法，这 4 个方法的 error 都总是为 nil.</p>
<p>Builder 的 cap 会自动增长，一般不需要手动调用 Grow 方法。</p>
<p>String 方法可以方便的获取 Builder 的内容。</p>
<p>举个例子：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">b := strings.Builder{}</span><br><span class="line">_ = b.WriteByte(<span class="string">'7'</span>)</span><br><span class="line">n, _ := b.WriteRune(<span class="string">'夕'</span>)</span><br><span class="line">fmt.Println(n)</span><br><span class="line">n, _ = b.Write([]<span class="keyword">byte</span>(<span class="string">"Hello, World"</span>))</span><br><span class="line">fmt.Println(n)</span><br><span class="line">n, _ = b.WriteString(<span class="string">"你好，世界"</span>)</span><br><span class="line">fmt.Println(n)</span><br><span class="line">fmt.Println(b.Len())</span><br><span class="line">fmt.Println(b.Cap())</span><br><span class="line">b.Grow(<span class="number">100</span>)</span><br><span class="line">fmt.Println(b.Len())</span><br><span class="line">fmt.Println(b.Cap())</span><br><span class="line">fmt.Println(b.String())</span><br><span class="line">b.Reset()</span><br><span class="line">fmt.Println(b.String())</span><br></pre></td></tr></tbody></table></figure>


<p>输出结果：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">31</span></span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">31</span></span><br><span class="line"><span class="number">164</span></span><br><span class="line"><span class="number">7</span>夕Hello, World你好，世界</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://books.studygolang.com/The-Golang-Standard-Library-by-Example/chapter02/02.1.html" target="_blank" rel="noopener">Go语言标准库–strings</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Defer说明</title>
    <url>/2020/09/03/golang-2020-09-03-Go-Defer%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>defer语句是Go中一个非常有用的特性，可以将一个方法延迟到包裹<code>defer</code>的方法返回时执行，在实际应用中，<code>defer</code>可以充当其他语言中<code>try…catch…</code>的角色，<br>也可以用来处理关闭文件句柄等收尾操作。</p>
<h1 id="1-defer使用"><a href="#1-defer使用" class="headerlink" title="1. defer使用"></a>1. defer使用</h1><h2 id="1-1-defer触发的时机"><a href="#1-1-defer触发的时机" class="headerlink" title="1.1 defer触发的时机"></a>1.1 defer触发的时机</h2><blockquote>
<p>A “defer” statement invokes a function whose execution is deferred to the moment the surrounding function returns, either because the surrounding function executed a return statement, reached the end of its function body, or because the corresponding goroutine is panicking.</p>
</blockquote>
<p>官方文档指出，执行defer的时机为：</p>
<ul>
<li>包裹<code>defer</code>的函数返回时</li>
<li>包裹<code>defer</code>的函数执行到末尾时</li>
<li>所在的<code>goroutine</code>发生<code>panic</code>时</li>
</ul>
<h2 id="1-2-defer执行顺序"><a href="#1-2-defer执行顺序" class="headerlink" title="1.2 defer执行顺序"></a>1.2 defer执行顺序</h2><p>当一个方法中有多个defer时， defer会将要延迟执行的方法<code>压栈</code>，当defer被触发时，将所有<code>压栈</code>的方法<code>出栈</code>并执行。<br>所以defer的执行顺序是LIFO的。<br>例如</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stackingDefers</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        fmt.Println(<span class="string">"3"</span>)</span><br><span class="line">    }()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>结果为：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="2-坑"><a href="#2-坑" class="headerlink" title="2. 坑"></a>2. 坑</h1><h2 id="2-1-返回值是否匿名表现不同"><a href="#2-1-返回值是否匿名表现不同" class="headerlink" title="2.1 返回值是否匿名表现不同"></a>2.1 返回值是否匿名表现不同</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 匿名返回值 (int)，输出 0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnValues</span><span class="params">()</span> <span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        result++</span><br><span class="line">        fmt.Println(<span class="string">"defer"</span>)</span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名返回值（result int）， 输出 1</span></span><br><span class="line"><span class="comment">// 因为return与defer是同时触发。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">namedReturnValues</span><span class="params">()</span> <span class="params">(result <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        result++</span><br><span class="line">        fmt.Println(<span class="string">"defer"</span>)</span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>匿名返回执行顺序为：</p>
<ol>
<li><p>将result赋值给返回值(相当于， returnValue=result=0)；</p>
</li>
<li><p>检查到<code>defer</code>，执行defer的语句，变量result值+1(result=1)；</p>
</li>
<li><p>返回函数返回值，returnValue(returnValue=0)。</p>
</li>
</ol>
<p>命名返回值执行顺序为：</p>
<ol>
<li>返回值被声明为<code>result</code>；</li>
<li>检查到<code>defer</code>，执行defer的语句，变量result值+1(result=1)；</li>
<li>返回函数返回值，result(result=1)。</li>
</ol>
<blockquote>
<p>注意与python的浅拷贝区分开</p>
</blockquote>
<h2 id="2-2-for循环中使用可能导致的性能问题"><a href="#2-2-for循环中使用可能导致的性能问题" class="headerlink" title="2.2 for循环中使用可能导致的性能问题"></a>2.2 for循环中使用可能导致的性能问题</h2><p>比如：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferInLoops</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ {</span><br><span class="line">        f, _ := os.Open(<span class="string">"/etc/hosts"</span>)</span><br><span class="line">        <span class="keyword">defer</span> f.Close()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>此处<code>defer f.Close()</code>在创建文件对象后声明，看起来没有什么问题。但是和直接调用<code>f.Close()</code>相比，defer的执行存在着额外的开销。</p>
<p><code>defer</code>会存在两方面的资源开销：</p>
<ul>
<li><code>defer</code>对其后需要的参数进行内存拷贝；</li>
<li>还需要对<code>defer</code>结构进行压栈出栈操作。</li>
</ul>
<p>可以将<code>f.Close()</code>语句前的<code>defer</code>去掉，直接调用<code>f.close()</code>来减少大量<code>defer</code>导致的额外资源消耗。</p>
<h2 id="2-3-必须判断执行成功，再defer释放资源"><a href="#2-3-必须判断执行成功，再defer释放资源" class="headerlink" title="2.3 必须判断执行成功，再defer释放资源"></a>2.3 必须判断执行成功，再defer释放资源</h2><p>如果获取资源的操作返回err参数：</p>
<ul>
<li><p>不使用<code>defer</code>, 可以选择忽略返回的err参数;</p>
</li>
<li><p>使用defer进行延迟释放, 在使用defer之前先判断是否存在err。 </p>
</li>
</ul>
<blockquote>
<p>资源没有获取成功，对资源执行释放操作会导致释放方法执行报错。必须判断是否获取成功，再释放资源。</p>
</blockquote>
<p>正确写法：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">resp, err := http.Get(url)</span><br><span class="line"><span class="comment">// 先判断操作是否成功</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 如果操作成功，再进行Close操作</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-4-调用os-Exit时defer不会被执行"><a href="#2-4-调用os-Exit时defer不会被执行" class="headerlink" title="2.4 调用os.Exit时defer不会被执行"></a>2.4 调用os.Exit时defer不会被执行</h2><p>当发生panic时，所在goroutine的所有defer会被执行，但是当调用os.Exit()方法退出程序时，defer不会执行。</p>
<p>下面例子中<code>defer</code>不会输出：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferExit</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        fmt.Println(<span class="string">"defer"</span>)</span><br><span class="line">    }()</span><br><span class="line">    os.Exit(<span class="number">0</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/79c029c0bd58" target="_blank" rel="noopener">Go语言中defer的一些坑</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-并发实践</title>
    <url>/2020/09/03/golang-2020-09-03-Go-%E5%B9%B6%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><em>内存内实现任务队列</em><br><a href="http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/" target="_blank" rel="noopener">国外(原创)</a><br><a href="https://blog.csdn.net/Jeanphorn/article/details/79018205?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf" target="_blank" rel="noopener">国内(第一抄)</a><br><a href="https://blog.csdn.net/lys07962000/article/details/105645638#commentBox" target="_blank" rel="noopener">国内(第二)</a></p>
<p><em>基于redis实现消息队列</em><br>harbor-trivy-scanner</p>
<p><em>原理</em><br><a href="http://www.shangdixinxi.com/detail-1213119.html" target="_blank" rel="noopener">go语言并发</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-fmt格式化IO</title>
    <url>/2020/09/04/golang-2020-09-04-Go-fmt%E6%A0%BC%E5%BC%8F%E5%8C%96IO/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Tekton使用-使用示例以及遇坑小记</title>
    <url>/2020/09/16/golang-2020-09-16-Go-Tekton%E4%BD%BF%E7%94%A8-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E9%81%87%E5%9D%91%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>打算依托Tekton,作为工作流工具，将以下业务场景用task实现：</p>
<ol>
<li>镜像部署</li>
<li>源码构建+镜像部署</li>
<li>源码文件上传hdfs</li>
<li>微服务依赖关系</li>
</ol>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>k8s集群： </p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Tekton安装，通过官方GitHub仓库中的release.yaml文件部署服务。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f https://github.com/tektoncd/pipeline/releases/download/v0.16./release.yaml</span><br></pre></td></tr></tbody></table></figure>



<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>需要检查这几项, workspace</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/tektoncd/pipeline#read-the-docs" target="_blank" rel="noopener">官方文档入口-select-version</a></p>
<h2 id="nuctl"><a href="#nuctl" class="headerlink" title="nuctl"></a>nuctl</h2><blockquote>
<p>nuctl 是<code>nuclio</code>的客户端, nuctl使用时需要访问docker-daemon, </p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ nuctl get project --verbose</span><br><span class="line">20.10.20 16:53:48.316            nuctl.platform (D) Using kubeconfig {<span class="string">"kubeconfigPath"</span>: <span class="string">"/home/hex/.kube/config"</span>}</span><br><span class="line">20.10.20 16:53:48.324 tl.platform.docker.runner (D) Executing {<span class="string">"command"</span>: <span class="string">"docker version"</span>}</span><br><span class="line">20.10.20 16:53:48.388 tl.platform.docker.runner (D) Command executed successfully {<span class="string">"output"</span>: <span class="string">"Client: Docker Engine - Community\n Version:           19.03.4\n API version:       1.40\n Go version:        go1.12.10\n Git commit:        9013bf583a\n Built:             Fri Oct 18 15:54:09 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          19.03.4\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.12.10\n  Git commit:       9013bf583a\n  Built:            Fri Oct 18 15:52:40 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.2.10\n  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339\n runc:\n  Version:          1.0.0-rc8+dev\n  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657\n docker-init:\n  Version:          0.18.0\n  GitCommit:        fec3683\n"</span>, <span class="string">"stderr"</span>: <span class="string">""</span>, <span class="string">"exitCode"</span>: 0}</span><br></pre></td></tr></tbody></table></figure>
<p>所以需要创建<code>docker-in-docker</code>的服务<br><a href="https://github.com/tektoncd/pipeline/blob/master/examples/v1beta1/taskruns/dind-sidecar.yaml" target="_blank" rel="noopener">task docker-in-docker</a><br><a href="https://github.com/tektoncd/pipeline/issues/1929" target="_blank" rel="noopener">dind issue</a></p>
<h2 id="构建镜像-kaniko"><a href="#构建镜像-kaniko" class="headerlink" title="构建镜像(kaniko)"></a>构建镜像(kaniko)</h2><p><a href="https://hub-preview.tekton.dev/detail/55" target="_blank" rel="noopener">task kaniko</a></p>
<h2 id="task之间传递数据-通过-result-配置"><a href="#task之间传递数据-通过-result-配置" class="headerlink" title="task之间传递数据(通过 result 配置)"></a><code>task</code>之间传递数据(通过 result 配置)</h2><p><a href="https://github.com/tektoncd/pipeline/blob/master/docs/tasks.md#emitting-results" target="_blank" rel="noopener">传出result</a><br><a href="https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#configuring-execution-results-at-the-task-level" target="_blank" rel="noopener">传出result – task级别</a><br><a href="https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#configuring-execution-results-at-the-pipeline-level" target="_blank" rel="noopener">传出result – pipe级别</a></p>
<p><a href="https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#passing-one-tasks-results-into-the-parameters-or-whenexpressions-of-another" target="_blank" rel="noopener">传入result – task级别</a></p>
<h2 id="使用when做任务编排"><a href="#使用when做任务编排" class="headerlink" title="使用when做任务编排"></a>使用<code>when</code>做任务编排</h2><p><a href="https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#guard-task-execution-using-whenexpressions" target="_blank" rel="noopener">任务编排 – when</a></p>
<h2 id="使用runAfter做任务编排"><a href="#使用runAfter做任务编排" class="headerlink" title="使用runAfter做任务编排"></a>使用<code>runAfter</code>做任务编排</h2><p><a href="https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#using-the-runafter-parameter" target="_blank" rel="noopener">任务编排 – runAfter</a></p>
<h2 id="workspace"><a href="#workspace" class="headerlink" title="workspace"></a>workspace</h2><p><a href="https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#specifying-workspaces" target="_blank" rel="noopener">工作空间使用</a></p>
<h2 id="auth"><a href="#auth" class="headerlink" title="auth"></a>auth</h2><p><a href="https://github.com/tektoncd/pipeline/blob/master/docs/auth.md" target="_blank" rel="noopener">Authorization at RunTime</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Gin-项目结构最佳实践</title>
    <url>/2020/09/22/golang-2020-09-22-Go-Gin-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://sodocumentation.net/go/topic/9463/best-practices-on-project-structure" target="_blank" rel="noopener">Gin项目结构最佳实践</a><br><a href="https://medium.com/hackernoon/golang-clean-archithecture-efd6d7c43047" target="_blank" rel="noopener">在Golang尝试清洁架构</a><br><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noopener">The Clean Architecture</a><br><a href="https://learnku.com/go/t/24598" target="_blank" rel="noopener">教程：使用 go 的 gin 和 gorm 框架来构建 RESTful API 微服务</a><br><a href="https://semaphoreci.com/community/tutorials/building-go-web-applications-and-microservices-using-gin" target="_blank" rel="noopener">使用Gin构建Go Web应用程序和微服务</a><br><a href="https://blog.logrocket.com/how-to-build-a-rest-api-with-golang-using-gin-and-gorm/" target="_blank" rel="noopener">How to build a REST API with Golang using Gin and Gorm</a><br><a href="https://studygolang.com/articles/21656" target="_blank" rel="noopener">基于gin构建企业级 golang web 脚手架</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-HDFS-操作hdfs文件系统</title>
    <url>/2020/09/22/golang-2020-09-22-Go-HDFS-%E6%93%8D%E4%BD%9Chdfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/colinmarc/hdfs" target="_blank" rel="noopener">hdfs golang client 非webhdfs</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Keycloak-BearerOnlyToken校验</title>
    <url>/2020/09/22/golang-2020-09-22-Go-Keycloak-BearerOnlyToken%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p><strong>keycloak AccessToken验证过程</strong></p>
<p>1、解码 token（注意是解码，不是解密，因为token是不加密的，只是按照一定规则进行编码，并签名）。</p>
<p>2、取得配置的 publickey（含 kid），或根据配置的keycloak地址和realm信息，调用keycloak的Rest接口（ /realms/{realm-name}/protocol/openid-connect/certs）查询publicKey(含kid)。</p>
<p>3、从步骤2中得到的publicKey中，查找与步骤1中得到的kid匹配的publicKey。</p>
<p>4、如果找不到对应的publicKey，则报异常：Didn’t find publicKey for specified kid。</p>
<p>5、使用publicKey验证签名</p>
<p>6、检查Token中的subject属性是否为空，为空则报异常：Subject missing in token</p>
<p>7、检查配置realm url 与 token中的issuer是否匹配，不匹配则报异常：Invalid token issuer. Expected {realm url}, but was {issuer}</p>
<p>7、检查token是否已过期，已过期，则报异常：Token is not active</p>
<p>token 中的内容</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "exp": 1600417728,       							# Expiration time Token过期时间</span><br><span class="line">  "iat": 1600417428,								# Issued at Token签发时间</span><br><span class="line">  "jti": "541da01d-5fb8-4985-8ef7-9ebd6939c129",	# JWT ID</span><br><span class="line">  "iss": "http://192.168.10.240:8082/auth/realms/icos",	# Issuer 签发者</span><br><span class="line">  "aud": [</span><br><span class="line">    "realm-management",</span><br><span class="line">    "keycloakos",</span><br><span class="line">    <span class="string">"account"</span></span><br><span class="line">  ],</span><br><span class="line">  "sub": "605b699b-65b9-4f63-87ae-fd1f14ff45a7",		# Subject </span><br><span class="line">  "typ": "Bearer",</span><br><span class="line">  "azp": "icosdeploy",</span><br><span class="line">  "session_state": "9b6c82bf-785a-4975-98bb-d5b1f7c04c03",</span><br><span class="line">  "acr": "1",</span><br><span class="line">  "realm_access": {</span><br><span class="line">    "roles": [</span><br><span class="line">      <span class="string">"admin"</span></span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  "resource_access": {</span><br><span class="line">    "realm-management": {</span><br><span class="line">      "roles": [</span><br><span class="line">        <span class="string">"query-groups"</span></span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    "keycloakos": {</span><br><span class="line">      "roles": [</span><br><span class="line">        <span class="string">"admin"</span></span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    "account": {</span><br><span class="line">      "roles": [</span><br><span class="line">        <span class="string">"view-profile"</span></span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "scope": "openid profile email",</span><br><span class="line">  "email_verified": false,</span><br><span class="line">  "name": "a dmin",</span><br><span class="line">  "groups": [],</span><br><span class="line">  "preferred_username": "admin",							# 用户名</span><br><span class="line">  "given_name": "a",</span><br><span class="line">  "family_name": "dmin",</span><br><span class="line">  "email": "admin@123.com"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>





<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://vikaspogu.dev/posts/sso-jwt-golang/" target="_blank" rel="noopener"><strong>Go 使用keycloak进行jwt认证</strong></a></p>
<p><a href="https://stackoverflow.com/questions/58911507/keycloak-bearer-only-clients-why-do-they-exist" target="_blank" rel="noopener"><strong>keycloak bearer-only clients: why do they exist?</strong></a></p>
<p><a href="https://stackoverflow.com/questions/54884938/generate-jwt-token-in-keycloak-and-get-public-key-to-verify-the-jwt-token-on-a-t" target="_blank" rel="noopener">在Keycloak中生成JWT令牌并获取公钥在第三方平台上验证JWT令牌</a></p>
<p><a href="https://www.janua.fr/keycloak-access-token-verification-example/" target="_blank" rel="noopener">Keycloak AccessToken 验证示例</a></p>
<p><a href="https://medium.com/@bcarunmail/securing-rest-api-using-keycloak-and-spring-oauth2-6ddf3a1efcc2" target="_blank" rel="noopener">使用Keycloak和Spring Oauth2保护REST API</a></p>
<p><a href="https://auth0.com/blog/authentication-in-golang/#Authorization-with-Golang" target="_blank" rel="noopener"><strong>golang使用jwt做身份验证</strong></a></p>
<p><a href="https://tools.ietf.org/html/rfc6749#section-4.4" target="_blank" rel="noopener">OAuth 2.0授权框架</a></p>
<p><a href="https://stackoverflow.com/questions/48855122/keycloak-adaptor-for-golang-application" target="_blank" rel="noopener">Keycloak adaptor for golang application  (OIDC package)</a></p>
<p><a href="https://github.com/louketo/louketo-proxy/blob/master/docs/user-guide.md" target="_blank" rel="noopener">github OIDC Proxy</a></p>
<p><a href="https://github.com/markbates/goth" target="_blank" rel="noopener">github goth - 为编写身份验证提供了一种简单、干净和惯用的方法</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Path-文件路径操作汇总</title>
    <url>/2020/09/22/golang-2020-09-22-Go-Path-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h2 id="删除文件目录下所有内容"><a href="#删除文件目录下所有内容" class="headerlink" title="删除文件目录下所有内容"></a>删除文件目录下所有内容</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Golang program to illustrate how to </span></span><br><span class="line"><span class="comment">// remove all the files and directories </span></span><br><span class="line"><span class="comment">// from the default directory </span></span><br><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> { </span><br><span class="line"></span><br><span class="line">	<span class="comment">// Remove all the directories and files </span></span><br><span class="line">	<span class="comment">// Using RemoveAll() function </span></span><br><span class="line">	err := os.RemoveAll(<span class="string">"/Users/anki/Documents/go"</span>) </span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> { </span><br><span class="line">		log.Fatal(err) </span><br><span class="line">	} </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="创建所有"><a href="#创建所有" class="headerlink" title="创建所有"></a>创建所有</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">os.MkdirAll(<span class="string">"/tmp/"</span>,FileMode)</span><br></pre></td></tr></tbody></table></figure>

<h1 id="文件创建或追加内容"><a href="#文件创建或追加内容" class="headerlink" title="文件创建或追加内容"></a>文件创建或追加内容</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">//Write first line</span></span><br><span class="line">    err := ioutil.WriteFile(<span class="string">"temp.txt"</span>, []<span class="keyword">byte</span>(<span class="string">"first line\n"</span>), <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Append second line</span></span><br><span class="line">    file, err := os.OpenFile(<span class="string">"temp.txt"</span>, os.O_APPEND|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        log.Println(err)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line">    <span class="keyword">if</span> _, err := file.WriteString(<span class="string">"second line"</span>); err != <span class="literal">nil</span> {</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Print the contents of the file</span></span><br><span class="line">    data, err := ioutil.ReadFile(<span class="string">"temp.txt"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    }</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(data))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://books.studygolang.com/The-Golang-Standard-Library-by-Example/chapter06/06.2.html" target="_blank" rel="noopener">path/filepath — 兼容操作系统的文件路径操作</a><br><a href="https://golangbyexample.com/append-file-golang/" target="_blank" rel="noopener">Append to an existing file in Go (Golang)</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Slice-切片操作汇总</title>
    <url>/2020/09/22/golang-2020-09-22-Go-Slice-%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="删除切片中元素"><a href="#删除切片中元素" class="headerlink" title="删除切片中元素"></a>删除切片中元素</h1><h2 id="Fast版本-改变顺序"><a href="#Fast版本-改变顺序" class="headerlink" title="Fast版本,改变顺序"></a>Fast版本,改变顺序</h2><blockquote>
<p>此代码复制单个元素，元素长度增加, 运行时间不变。仍是复制单个元素的时间。</p>
</blockquote>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">a := []<span class="keyword">string</span>{<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>}</span><br><span class="line">i := <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove the element at index i from a.</span></span><br><span class="line">a[i] = a[<span class="built_in">len</span>(a)<span class="number">-1</span>] <span class="comment">// Copy last element to index i.</span></span><br><span class="line">a[<span class="built_in">len</span>(a)<span class="number">-1</span>] = <span class="string">""</span>   <span class="comment">// Erase last element (write zero value).</span></span><br><span class="line">a = a[:<span class="built_in">len</span>(a)<span class="number">-1</span>]   <span class="comment">// Truncate slice.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a) <span class="comment">// [A B E D]</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="Slow版本-保持顺序"><a href="#Slow版本-保持顺序" class="headerlink" title="Slow版本,保持顺序"></a>Slow版本,保持顺序</h2><blockquote>
<p>此代码复制len(a) - i - 1元素，元素长度增加, 运行时间呈线性增长。</p>
</blockquote>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">a := []<span class="keyword">string</span>{<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>}</span><br><span class="line">i := <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove the element at index i from a.</span></span><br><span class="line"><span class="built_in">copy</span>(a[i:], a[i+<span class="number">1</span>:]) <span class="comment">// Shift a[i+1:] left one index.</span></span><br><span class="line">a[<span class="built_in">len</span>(a)<span class="number">-1</span>] = <span class="string">""</span>     <span class="comment">// Erase last element (write zero value).</span></span><br><span class="line">a = a[:<span class="built_in">len</span>(a)<span class="number">-1</span>]     <span class="comment">// Truncate slice.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a) <span class="comment">// [A B D E]</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://yourbasic.org/golang/delete-element-slice/" target="_blank" rel="noopener">Slice中删除元素的两种方式</a><br><a href="https://stackoverflow.com/questions/37334119/how-to-delete-an-element-from-a-slice-in-golang" target="_blank" rel="noopener">How to delete an element from a Slice in Golang</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Vault-benchmark方案</title>
    <url>/2020/09/23/golang-2020-09-23-Go-Vault-benchmark%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://medium.com/hashicorp-engineering/hashicorp-vault-performance-benchmark-13d0ea7b703f" target="_blank" rel="noopener">官方博客-VaultPerformanceBenchmark</a><br><a href="https://github.com/rberlind/vault-benchmarking" target="_blank" rel="noopener">GitHub-vault-benchmarking</a><br><a href="https://groups.google.com/forum/#!topic/vault-tool/pF_E0JkYoS4" target="_blank" rel="noopener">GoogleGroups - vaultTool</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Struct-tag深入理解[一]StructTag规则说明</title>
    <url>/2020/10/21/golang-2020-10-21-Go-Struct-tag%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-%E4%B8%80-StructTag%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Go 语言中<code>Struct</code>声明包含三部分: <code>field_name</code>, <code>field_type</code>, <code>field_tag</code>.</p>
<p><code>field_tag</code>的作用:</p>
<ul>
<li><p>可以作为字段后额外的注释或者说明</p>
</li>
<li><p>在反射场景下, <code>reflect</code>包中提供了操作<code>tag</code>的方法, <code>tag</code>的写法需要遵循一定规则.</p>
</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h3 id="Tag-书写规则"><a href="#Tag-书写规则" class="headerlink" title="Tag 书写规则"></a>Tag 书写规则</h3><p><code>tag</code>是一串字符串, 以空格分隔的<code>key:"value"</code>对.</p>
<ul>
<li><code>key</code>: 为非空字符串, 字符串不含控制字符\空格\引号\冒号.</li>
<li><code>value</code>: 以双引号标记的字符串.</li>
<li>以<code>:</code>分隔,并且冒号前后不能有空格.</li>
</ul>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> {</span><br><span class="line">    ServerName <span class="keyword">string</span> <span class="string">`json: "server_name" gorm:"serverName" default:"example"`</span></span><br><span class="line">    ServerIP   <span class="keyword">string</span> <span class="string">`json: "server_ip"`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="reflect获取Tag值"><a href="#reflect获取Tag值" class="headerlink" title="reflect获取Tag值"></a>reflect获取Tag值</h3><p><code>StructTag</code>提供了<code>Get(key string) string</code>方法来获取<code>Tag</code>，示例如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> {</span><br><span class="line">    ServerName <span class="keyword">string</span> <span class="string">`json: "server_name" gorm:"serverName" default:"example"`</span></span><br><span class="line">    ServerIP   <span class="keyword">string</span> <span class="string">`json: "server_ip"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    s := Server{}</span><br><span class="line">    st := reflect.TypeOf(s)</span><br><span class="line"></span><br><span class="line">    fieldServerName := st.Field(<span class="number">0</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"TAG-key=&gt;json     TAG-value=&gt;%v\n"</span>, fieldServerName.Tag.Get(<span class="string">"json"</span>))</span><br><span class="line">    fmt.Printf(<span class="string">"TAG-key=&gt;default  TAG-value=&gt;%v\n"</span>, fieldServerName.Tag.Get(<span class="string">"default"</span>))</span><br><span class="line"></span><br><span class="line">    fieldServerIp := st.Field(<span class="number">1</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"TAG-key=&gt;json     TAG-value=&gt;%v\n"</span>, fieldServerIp.Tag.Get(<span class="string">"json"</span>))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>程序输出如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">TAG-key=&gt;json     TAG-value=&gt;server_name</span><br><span class="line">TAG-key=&gt;<span class="keyword">default</span>  TAG-value=&gt;example</span><br><span class="line">TAG-key=&gt;json     TAG-value=&gt;server_ip</span><br></pre></td></tr></tbody></table></figure>



<h3 id="Tag的作用"><a href="#Tag的作用" class="headerlink" title="Tag的作用"></a>Tag的作用</h3><p>使用反射可以动态的给结构体成员赋值，正是因为有tag，在赋值前可以使用tag来决定赋值的动作。 比如，官方的<code>encoding/json</code>包，可以将一个JSON数据<code>Unmarshal</code>进一个结构体，此过程中就使用了Tag. 该包定义一些规则，只要参考该规则设置tag就可以将不同的JSON数据转换成结构体。</p>
<p>总之：正是基于struct的tag特性，才有了诸如json数据解析、orm映射等等的应用。理解这个关系是至关重要的。或许，你可以定义另一种tag规则，来处理你特有的数据。</p>
<h3 id="Tag使用举例"><a href="#Tag使用举例" class="headerlink" title="Tag使用举例"></a>Tag使用举例</h3><table>
<thead>
<tr>
<th>包</th>
<th>包中关于tag的规则</th>
<th>full example</th>
</tr>
</thead>
<tbody><tr>
<td>json</td>
<td><a href="https://godoc.org/encoding/json#Marshal" target="_blank" rel="noopener">https://godoc.org/encoding/json#Marshal</a></td>
<td>“my_name,omitempty” 声明名字+可省略<br>“,omitempty” 值为空则省略此字段<br>“my_name”  在json中此字段的键<br>“-“  字段始终省略</td>
</tr>
<tr>
<td>default</td>
<td><a href="https://github.com/creasty/defaults#usage" target="_blank" rel="noopener">https://github.com/creasty/defaults#usage</a></td>
<td></td>
</tr>
<tr>
<td>gorm</td>
<td><a href="https://godoc.org/github.com/jinzhu/gorm" target="_blank" rel="noopener">https://godoc.org/github.com/jinzhu/gorm</a></td>
<td><a href="https://www.cnblogs.com/zisefeizhu/p/12788017.html#%E7%BB%93%E6%9E%84%E4%BD%93%E6%A0%87%E8%AE%B0tags" target="_blank" rel="noopener">https://www.cnblogs.com/zisefeizhu/p/12788017.html#%E7%BB%93%E6%9E%84%E4%BD%93%E6%A0%87%E8%AE%B0tags</a></td>
</tr>
<tr>
<td>yaml</td>
<td><a href="https://godoc.org/gopkg.in/yaml.v2" target="_blank" rel="noopener">https://godoc.org/gopkg.in/yaml.v2</a></td>
<td></td>
</tr>
<tr>
<td>xml</td>
<td><a href="https://godoc.org/encoding/xml" target="_blank" rel="noopener">https://godoc.org/encoding/xml</a></td>
<td></td>
</tr>
</tbody></table>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://my.oschina.net/renhc/blog/2045683" target="_blank" rel="noopener">Go struct tag深入理解(华为)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/32279896" target="_blank" rel="noopener">Go语言中的struct tag(知乎)</a></p>
<p><a href="https://github.com/golang/go/wiki/Well-known-struct-tags" target="_blank" rel="noopener">Well known struct tags(golang wiki)</a></p>
<p><a href="https://www.cnblogs.com/zisefeizhu/p/12788017.html#%E7%BB%93%E6%9E%84%E4%BD%93%E6%A0%87%E8%AE%B0tags" target="_blank" rel="noopener">gorm 结构体的相关标记</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Struct-tag深入理解[二]为struct设置default值</title>
    <url>/2020/10/22/golang-2020-10-22-Go-Struct-tag%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-%E4%BA%8C-%E4%B8%BAstruct%E8%AE%BE%E7%BD%AEdefault%E5%80%BC/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://web.archive.org/web/20160818125551/https://joneisen.tumblr.com/post/53695478114/golang-and-default-values" target="_blank" rel="noopener">golang 为struct设置默认值的四种方式</a><br><a href="https://stackoverflow.com/questions/37135193/how-to-set-default-values-in-go-structs" target="_blank" rel="noopener">how-to-set-default-values-in-go-structs(stack overflow)</a></p>
<p><a href="https://github.com/creasty/defaults#usage" target="_blank" rel="noopener">为struct设置默认值的包</a><br><a href="https://github.com/go-playground/validator/issues/263" target="_blank" rel="noopener">validator包不支持也不打算支持default</a><br><a href="https://github.com/leebenson/conform" target="_blank" rel="noopener">struct 数据预处理包</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Struct-tag深入理解[三]为struct设置参数校验validator</title>
    <url>/2020/11/12/golang-2020-11-12-Go-Struct-tag%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-%E4%B8%89-%E4%B8%BAstruct%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8Cvalidator/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>配置读取包--viper</title>
    <url>/2020/04/23/golang-20200423-Go-viper%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%8F%96%E5%8C%85/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://studygolang.com/topics/10444" target="_blank" rel="noopener">专题列表</a></p>
<p><a href="https://medium.com/@bnprashanth256/reading-configuration-files-and-environment-variables-in-go-golang-c2607f912b63" target="_blank" rel="noopener"><strong>Reading Configuration Files and Environment Variables in GO — GoLang</strong></a></p>
<p><a href="https://github.com/BNPrashanth/go-poc-bp/tree/env-var-approach1" target="_blank" rel="noopener"> Example–github–repo </a></p>
<p><a href="https://www.ctolib.com/viper.html" target="_blank" rel="noopener">viper-go应用程序的完整配置解决方案</a></p>
<p><a href="https://blog.wu-boy.com/2017/10/go-configuration-with-viper/" target="_blank" rel="noopener">在go语言使用Viper管理配置</a></p>
<p><a href="https://www.cnblogs.com/cnblogs-wangzhipeng/p/9484460.html" target="_blank" rel="noopener">Viper–方便好用的Golang 配置库</a></p>
<p>问题<br>实例了viper，则相应的配置就必须在实例本身上设置，否则就很可能不生效。<br><a href="https://studygolang.com/articles/11570?fr=sidebar" target="_blank" rel="noopener">viper代码示例</a><br><a href="https://blog.wu-boy.com/2017/10/go-configuration-with-viper/" target="_blank" rel="noopener">在 Go 語言使用 Viper 管理設定檔</a></p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Go</tag>
        <tag>viper</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl 小技巧</title>
    <url>/2019/12/13/kubernetes-20191213-k8s%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<html><head></head><body><h1 id="简化命令行交互-简化应用程序部署语法"><a href="#简化命令行交互-简化应用程序部署语法" class="headerlink" title="简化命令行交互, 简化应用程序部署语法"></a>简化命令行交互, 简化应用程序部署语法</h1><h2 id="1-Kubectl-自动补全"><a href="#1-Kubectl-自动补全" class="headerlink" title="1. Kubectl 自动补全"></a>1. Kubectl 自动补全</h2><p>kubectl 工具本身支持自动补全,只需要简单设置一下即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>
<p>如果没有安装<code>bash-completion</code>, 按如下命令安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install bash-completion</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-自定义-kubectl-get-输出"><a href="#2-自定义-kubectl-get-输出" class="headerlink" title="2. 自定义 kubectl get 输出"></a>2. 自定义 kubectl get 输出</h2><p>kubectl get 相关资源，默认输出为 kubectl 内置，一般我们也可以使用<code>-o json</code>/<code>-o jsonpath=''</code>或者<code>-o yaml</code>查看其完整的资源信息。但是很多时候，我们需要关心的信息并不全面，因此我们需要自定义输出的列，那么可以使用 go-template 来进行实现。</p>
<p>go-template 是 golang 的一种模板，可以参考 <a href="https://link.zhihu.com/?target=https%3A//golang.org/pkg/text/template/">template</a> 的相关说明。</p>
<p>比如仅仅想要查看获取的 pods 中的各个 pod 的 uid，则可以使用以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl get pods --all-namespaces -o go-template=<span class="string">'{{range .items}}{{.metadata.uid}} {{end}}'</span></span><br></pre></td></tr></tbody></table></figure>
<p>比如使用 jsonpath 获取数据</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ISTIO_PILOT_PORT=$(kubectl get -n istio-system service istio-ingressgateway -o jsonpath=<span class="string">'{.spec.ports[?(@.name=="tcp-pilot-grpc-tls")].nodePort}'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">${ISTIO_PILOT_PORT}</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-k8s强制删除提示-Terminating-的namespace"><a href="#3-k8s强制删除提示-Terminating-的namespace" class="headerlink" title="3. k8s强制删除提示 Terminating 的namespace"></a>3. k8s强制删除提示 <code>Terminating</code> 的<code>namespace</code></h2><h3 id="a-首先尝试强制删除参数"><a href="#a-首先尝试强制删除参数" class="headerlink" title="a. 首先尝试强制删除参数"></a>a. 首先尝试强制删除参数</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl delete namespace example-ns -force --grace-period=0</span><br></pre></td></tr></tbody></table></figure>
<h3 id="b-如果不能删除，则采取以下方法"><a href="#b-如果不能删除，则采取以下方法" class="headerlink" title="b. 如果不能删除，则采取以下方法"></a>b. 如果不能删除，则采取以下方法</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl edit namespace example-ns</span><br></pre></td></tr></tbody></table></figure>

<p>将其中<code>spec.finalizers</code>的值删除，也可以设置为[]。保存退出后，namespace就会被删除。</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">finalizers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">controller.cattle.io/namespace-auth</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mars</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">finalizers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">phase:</span> <span class="string">Active</span></span><br></pre></td></tr></tbody></table></figure>
<p>思路：<br>命名空间无法删除通常是因为还有资源在使用这个命名空间，执行<code>kubectl delete namespace xxx</code>时候，虽然显示deleted，但是命令夯死。我们可以查看资源使用情况：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl api-resources --namespaced=<span class="literal">true</span> -o name | xargs -n 1 kubectl get --show-kind --ingore-not-found -n xxxx</span><br></pre></td></tr></tbody></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://mp.weixin.qq.com/s/G8t18WpE_XW69nRmFLZSfg" target="_blank" rel="noopener">Kubernetes 的奇技淫巧</a><br><a href="https://blog.csdn.net/weixin_44267608/article/details/103002124" target="_blank" rel="noopener">删除一直处于terminating状态的namespace</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>运维笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>解析k8s-yaml成client-go中的data-structs</title>
    <url>/2020/05/25/kubernetes-2020-05-25-%E8%A7%A3%E6%9E%90k8s-yaml%E6%88%90client-go%E4%B8%AD%E7%9A%84data-structs/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>开发过程中，需要解析helm-manifest获取到的各种资源的yaml。每个都写映射</p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul>
<li>helm 3</li>
<li>kubernetes-v1.15.6</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>无</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>注意:</p>
<p>k8s版本不同。，资源所在的api接口会有变化。</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> k8s</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"heroku/pkg/api/log"</span></span><br><span class="line">	<span class="string">"k8s.io/apimachinery/pkg/runtime"</span></span><br><span class="line">	<span class="string">"k8s.io/client-go/kubernetes/scheme"</span></span><br><span class="line">	<span class="string">"regexp"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseK8sYaml</span><span class="params">(fileR []<span class="keyword">byte</span>)</span> []<span class="title">runtime</span>.<span class="title">Object</span></span> {</span><br><span class="line"></span><br><span class="line">	acceptedK8sTypes := regexp.MustCompile(<span class="string">`(Role|ClusterRole|RoleBinding|ClusterRoleBinding|ServiceAccount|Deployment|StatefulSet|Service|Ingress|HorizontalPodAutoscaler)`</span>)</span><br><span class="line">	fileAsString := <span class="keyword">string</span>(fileR[:])</span><br><span class="line">	sepYamlfiles := strings.Split(fileAsString, <span class="string">"---"</span>)</span><br><span class="line">	retVal := <span class="built_in">make</span>([]runtime.Object, <span class="number">0</span>, <span class="built_in">len</span>(sepYamlfiles))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, f := <span class="keyword">range</span> sepYamlfiles {</span><br><span class="line">		<span class="keyword">if</span> f == <span class="string">"\n"</span> || f == <span class="string">""</span> {</span><br><span class="line">			<span class="comment">// ignore empty cases</span></span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		checkList := strings.Split(f, <span class="string">"#"</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(checkList) &gt; <span class="number">10</span> {</span><br><span class="line">			<span class="comment">// ignore annotation resource</span></span><br><span class="line">			log.Warn(fmt.Sprintf(<span class="string">"ignore annotation resource: %s"</span>, f[:<span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		decode := scheme.Codecs.UniversalDeserializer().Decode</span><br><span class="line">		obj, groupVersionKind, err := decode([]<span class="keyword">byte</span>(f), <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			log.Warn(fmt.Sprintf(<span class="string">"Error while decoding YAML object. Err was: %s"</span>, err))</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		}</span><br><span class="line">		log.Debug(fmt.Sprintf(<span class="string">"Helm-Manitest:--:%s"</span>, groupVersionKind))</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> !acceptedK8sTypes.MatchString(groupVersionKind.Kind) {</span><br><span class="line">			log.Info(fmt.Sprintf(<span class="string">"The custom-roles configMap contained K8s object types which are not supported! Skipping object with type: %s"</span>, groupVersionKind.Kind))</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			retVal = <span class="built_in">append</span>(retVal, obj)</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> retVal</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringToFile</span><span class="params">(outDir <span class="keyword">string</span>, aut model.Aut)</span> <span class="params">(configFile <span class="keyword">string</span>, err error)</span></span> {</span><br><span class="line">	filename := filepath.Join(outDir, <span class="string">"config"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> data = []<span class="keyword">byte</span>(aut.K8sConf)</span><br><span class="line">	err = ioutil.WriteFile(filename, data, <span class="number">0666</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>, errors.New(fmt.Sprintf(<span class="string">"k8s-config load to tmp Error : %s"</span>, err.Error()))</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> filename, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Show</span><span class="params">(helmRelease <span class="keyword">string</span>, aut model.Aut)</span> <span class="params">(instances []runtime.Object, err error)</span></span> {</span><br><span class="line">	tmp, err := ioutil.TempDir(<span class="string">""</span>, <span class="string">"curator-"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(err, <span class="string">"Error while preparing temp Dir"</span>)</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">defer</span> os.RemoveAll(tmp) <span class="comment">// clean up</span></span><br><span class="line"></span><br><span class="line">	configPath, err := stringToFile(tmp, aut)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	log.Info(<span class="string">"Started Helm-show:"</span>)</span><br><span class="line"></span><br><span class="line">	args := []<span class="keyword">string</span>{</span><br><span class="line">		<span class="string">"--kubeconfig"</span>, configPath,</span><br><span class="line">		<span class="string">"get"</span>,</span><br><span class="line">		<span class="string">"manifest"</span>,</span><br><span class="line">		helmRelease,</span><br><span class="line">		<span class="string">"-n"</span>, aut.Namespace,</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	stdout, err := utils.ExecCMD(<span class="string">"helm"</span>, args)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	instances = k8s.ParseK8sYaml(stdout)</span><br><span class="line">	<span class="keyword">return</span> instances, err</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/kubernetes/client-go/issues/193#issuecomment-343138889" target="_blank" rel="noopener">Support for parsing K8s yaml spec into client-go data structures</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>k8S-使用client-go操作集群</title>
    <url>/2020/05/28/kubernetes-2020-05-28-k8S-%E4%BD%BF%E7%94%A8client-go%E6%93%8D%E4%BD%9C%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://www.huweihuang.com/kubernetes-notes/develop/client-go.html" target="_blank" rel="noopener">第一参考 client-go简介</a></strong></p>
<p><strong><a href="https://github.com/kubernetes/client-go/blob/master/examples/in-cluster-client-configuration/main.go" target="_blank" rel="noopener">client-go官方实例–集群内client配置</a></strong></p>
<p><a href="https://stackoverflow.com/questions/49953980/watch-customresourcedefinitions-crd-with-client-go" target="_blank" rel="noopener">client-go针对crd资源，代码生成器</a></p>
<p><strong><a href="https://gianarb.it/blog/unit-testing-kubernetes-client-in-go" target="_blank" rel="noopener">Unit test kubernetes client in Go</a></strong></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title>k8S-云原生应用标准与架构模型</title>
    <url>/2020/05/29/kubernetes-2020-05-29-k8S-%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E6%A0%87%E5%87%86%E4%B8%8E%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://mp.weixin.qq.com/s?spm=a2c6h.12873639.0.0.66f95747byzLXw&amp;__biz=MzUzNzYxNjAzMg==&amp;mid=2247487823&amp;idx=1&amp;sn=d7423bb8184832333dd780359fa74fe6&amp;chksm=fae51a80cd929396fc10b7491ca3d57530719151652448a45a59317cec15c211b8d73c8119ef&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">4个概念，一个动作，让应用功能管理更简单</a></strong></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title>k8S-理解k8s接口CRI、CNI、CSI</title>
    <url>/2020/05/29/kubernetes-2020-05-29-k8S-%E7%90%86%E8%A7%A3k8s%E6%8E%A5%E5%8F%A3CRI%E3%80%81CNI%E3%80%81CSI/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://caylent.com/understanding-kubernetes-interfaces-cri-cni-csi" target="_blank" rel="noopener">Understanding Kubernetes Interfaces: CRI, CNI, &amp; CSI</a></strong></p>
<p><strong><a href="https://jimmysong.io/kubernetes-handbook/concepts/csi.html" target="_blank" rel="noopener">K8S-handbook–容器存储接口</a></strong></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title>k8S-理解operator以及ServiceCatalog</title>
    <url>/2020/05/29/kubernetes-2020-05-29-k8S-%E7%90%86%E8%A7%A3operator%E4%BB%A5%E5%8F%8AServiceCatalog/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/67567555" target="_blank" rel="noopener"><strong>Kubernetes Operator 快速入门教程</strong></a></p>
<p><a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/service-catalog/#%e7%a4%ba%e4%be%8b%e7%94%a8%e4%be%8b" target="_blank" rel="noopener">ServiceCatalog</a></p>
<p><a href="https://github.com/kubernetes-sigs/service-catalog" target="_blank" rel="noopener">ServiceCatalog-github</a></p>
<p><a href="https://www.openservicebrokerapi.org/" target="_blank" rel="noopener">open service broker API</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title>ServiceCatalog和Operator结合</title>
    <url>/2020/06/29/kubernetes-2020-06-29-ServiceCatalog%E5%92%8COperator%E7%BB%93%E5%90%88/</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>当下流行两种方式来为云原生应用提供后台服务： <code>Operators</code>和<code>Open Services Broker API</code>。本文比较两种技术，并针对性研究如何整合两者协同工作。</p>
</blockquote>
<blockquote>
<p>运行在Kubernetes集群上的工作负载，需要访问许多相同的服务集。因此，Kubernetes社区构建了对OSBAPI规范，并创建了<code>ServiceCatalog</code>项目<br>来提供Kubernetes集群内的服务市场。云计算服务API规范变成了OSBAPI(Open Service Broker API)。<code>Operator</code>是这一领域出现的新技术。</p>
</blockquote>
<h1 id="Operators介绍"><a href="#Operators介绍" class="headerlink" title="Operators介绍"></a>Operators介绍</h1><p>最近一段时间，<code>Operator</code>的人气飙升。原因很简单。<code>Operators</code>允许使用Kubernetes的开发人员直接使用Kubernetes集群中的托管服务。<br>随后，<code>Operator</code>模式经常被用作构建符合<code>OSBAPI</code>的<code>service broker</code>的替代方案。</p>
<p>Operator：</p>
<ol>
<li>是一组自定义资源定义(crd)，具有对其进行操作的自定义控制器。</li>
<li><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1></li>
</ol>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://thenewstack.io/kubernetes-operators-and-the-open-service-broker-api-a-perfect-marriage/" target="_blank" rel="noopener">Operator和OSBAPI的最佳结合</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Minikube--增加外部dns解析</title>
    <url>/2020/08/07/kubernetes-2020-08-07-Minikube-%E5%A2%9E%E5%8A%A0%E5%A4%96%E9%83%A8dns%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h1><p>kubernetes集群并采用Coredns进行解析，集群内部的服务都能通过内部域名进行访问。但是集群内部的coredns与物理机的dns解析不完全统一，<br>coredns不能解析物理机的hostname。k8s-coredns默认配置从本机<code>/etc/resolv.conf</code>获取上游DNS服务器的地址。<br>有两种方式解决这个问题：</p>
<ol>
<li>搭建解析物理机地址的dns服务器，并作为上游dns服务配置给k8s的coredns。</li>
<li>通过coredns自带的<code>hosts</code>插件，手动添加自定义解析记录</li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="1-配置外部dns服务器"><a href="#1-配置外部dns服务器" class="headerlink" title="1. 配置外部dns服务器"></a>1. 配置外部dns服务器</h2><p>搭建coredns服务参考coredns官网，此处只介绍k8s中dns服务器修改上游dns配置，有两种方式：</p>
<ol>
<li>修改<code>/etc/resolv.conf</code>中的nameserver<blockquote>
<p>nameserver地址换成自建的dns服务地址，默认监听53端口。</p>
</blockquote>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nameserver 192.168.100.254</span><br></pre></td></tr></tbody></table></figure></li>
<li>修改coredns配置文件 ConfigMap <code>coredns</code><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl -n kube-system edit configmap coredns</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">Corefile:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">.:53</span> <span class="string">{</span></span><br><span class="line">        <span class="string">errors</span></span><br><span class="line">        <span class="string">health</span></span><br><span class="line">        <span class="string">kubernetes</span> <span class="string">cluster.local</span> <span class="string">in-addr.arpa</span> <span class="string">ip6.arpa</span> <span class="string">{</span></span><br><span class="line">           <span class="string">pods</span> <span class="string">insecure</span></span><br><span class="line">           <span class="string">upstream</span></span><br><span class="line">           <span class="string">fallthrough</span> <span class="string">in-addr.arpa</span> <span class="string">ip6.arpa</span></span><br><span class="line">           <span class="string">ttl</span> <span class="number">30</span></span><br><span class="line">        <span class="string">}</span></span><br><span class="line">        <span class="string">prometheus</span> <span class="string">:9153</span></span><br><span class="line">        <span class="string">proxy</span> <span class="string">.</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.254</span> <span class="comment"># 修改为上游dns服务地址,端口默认53</span></span><br><span class="line">        <span class="string">cache</span> <span class="number">30</span></span><br><span class="line">        <span class="string">loop</span></span><br><span class="line">        <span class="string">reload</span></span><br><span class="line">        <span class="string">loadbalance</span></span><br><span class="line">    <span class="string">}</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">coredns</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></tbody></table></figure>


<p>配置修改后，需要重启coredns服务</p>
<blockquote>
<p>查询coredns 的POD</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl -n kube-system get pods -l k8s-app=kube-dns</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>删除 coredns 让 k8s 重新创建新的 coredns</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl -n kube-system delete pod -l k8s-app=kube-dns</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-通过hosts添加自定义DNS解析记录"><a href="#2-通过hosts添加自定义DNS解析记录" class="headerlink" title="2. 通过hosts添加自定义DNS解析记录"></a>2. 通过hosts添加自定义DNS解析记录</h2><p><code>coredns</code> 自带 <code>hosts</code> 插件， 允许像配置 hosts 一样配置自定义 DNS 解析</p>
<p>修改命名空间 <code>kube-system</code> 下的 configMap <code>coredns</code> </p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl edit configmap coredns -n kube-system</span><br></pre></td></tr></tbody></table></figure>

<p>添加如下设置即可。</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">hosts</span> <span class="string">{</span></span><br><span class="line">    <span class="number">172.21</span><span class="number">.91</span><span class="number">.28</span> <span class="string">cache.redis</span></span><br><span class="line">    <span class="number">172.21</span><span class="number">.91</span><span class="number">.28</span> <span class="string">persistent.redis</span></span><br><span class="line">      </span><br><span class="line">    <span class="string">fallthrough</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure>
<p>修改后文件如下（根据kubernetes 安装方式不同，可能有些许差别）</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">Corefile:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">.:53</span> <span class="string">{</span></span><br><span class="line">        <span class="string">errors</span></span><br><span class="line">        <span class="string">health</span></span><br><span class="line">        <span class="string">kubernetes</span> <span class="string">cluster.local</span> <span class="string">in-addr.arpa</span> <span class="string">ip6.arpa</span> <span class="string">{</span></span><br><span class="line">           <span class="string">pods</span> <span class="string">insecure</span></span><br><span class="line">           <span class="string">upstream</span></span><br><span class="line">           <span class="string">fallthrough</span> <span class="string">in-addr.arpa</span> <span class="string">ip6.arpa</span></span><br><span class="line">           <span class="string">ttl</span> <span class="number">30</span></span><br><span class="line">        <span class="string">}</span></span><br><span class="line">        <span class="string">hosts</span> <span class="string">{</span></span><br><span class="line">        <span class="number">10.10</span><span class="number">.0</span><span class="number">.10</span> <span class="string">reg.chebai.org</span></span><br><span class="line">        <span class="number">10.15</span><span class="number">.0</span><span class="number">.2</span> <span class="string">hub.icos.city</span></span><br><span class="line">        <span class="string">fallthrough</span></span><br><span class="line">        <span class="string">}</span></span><br><span class="line">        <span class="string">prometheus</span> <span class="string">:9153</span></span><br><span class="line">        <span class="string">forward</span> <span class="string">.</span> <span class="string">/etc/resolv.conf</span></span><br><span class="line">        <span class="string">cache</span> <span class="number">30</span></span><br><span class="line">        <span class="string">loop</span></span><br><span class="line">        <span class="string">reload</span></span><br><span class="line">        <span class="string">loadbalance</span></span><br><span class="line">    <span class="string">}</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">coredns</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></tbody></table></figure>
<p>删除命名空间<code>kube-system</code>下的coredns pod，重启dns服务。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/fenglailea/article/details/100577403" target="_blank" rel="noopener">开发服务器 k8s 设置 自定义 dns解析</a><br><a href="https://coredns.io/" target="_blank" rel="noopener">coredns 官网</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>coredns</tag>
      </tags>
  </entry>
  <entry>
    <title>CRD-概念、使用场景、go示例</title>
    <url>/2020/08/13/kubernetes-2020-08-13-CRD-%E6%A6%82%E5%BF%B5%E3%80%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E3%80%81go%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://sq.163yun.com/blog/article/174980128954048512" target="_blank" rel="noopener">kubernetes1.9管中窥豹-CRD概念、使用场景及实例</a><br><a href="https://www.servicemesher.com/blog/kubernetes-crd-quick-start/" target="_blank" rel="noopener">如何从零开始编写一个Kubernetes CRD</a><br><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/" target="_blank" rel="noopener">k8s官网–Custom Resources</a><br><a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/" target="_blank" rel="noopener">k8s官网–使用CRD扩展k8s-API</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-GPU-Operator部署centos7.8</title>
    <url>/2020/09/22/kubernetes-2020-09-22-Kubernetes-GPU-Operator%E9%83%A8%E7%BD%B2centos7-8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/overview.html" target="_blank" rel="noopener">英伟达官方文档</a><br><a href="https://nvidia.github.io/gpu-operator/" target="_blank" rel="noopener">gpu-operator文档地址</a><br><a href="https://developer.nvidia.com/blog/nvidia-gpu-operator-simplifying-gpu-management-in-kubernetes/" target="_blank" rel="noopener">gpu-operator官方架构说明</a><br><a href="https://egallen.com/gpu-operator-openshift-43-openstack-13/" target="_blank" rel="noopener">gpu-operator架构博客</a><br><a href="https://github.com/NVIDIA/gpu-operator" target="_blank" rel="noopener">gpu-operator GitHub地址</a><br><a href="https://github.com/NVIDIA/gpu-operator/issues/73" target="_blank" rel="noopener">gpu-operator issue 在CentOS8部署失败</a><br><a href="https://github.com/NVIDIA/gpu-operator/issues/72" target="_blank" rel="noopener">CentOS 7.8 Support - GLIBC_2.27</a></p>
<p><a href="https://kubernetes.io/zh/docs/tasks/manage-gpus/scheduling-gpus/#deploying-nvidia-gpu-device-plugin" target="_blank" rel="noopener">k8s-gpu-device-plugin</a><br><a href="https://www.kubernetes.org.cn/6574.html" target="_blank" rel="noopener">GPU管理 和 DevicePlugin工作机制</a><br><a href="https://github.com/NVIDIA/k8s-device-plugin/blob/v0.7.0-rc.6/docker/amd64/Dockerfile.centos7" target="_blank" rel="noopener">k8s-device-plugin dockerfile.centos7</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-CertManager解决ingress-tls证书问题</title>
    <url>/2020/11/05/kubernetes-2020-11-05-Kubernetes-certmanager%E8%A7%A3%E5%86%B3ingress-tls%E8%AF%81%E4%B9%A6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>由于需要配置<code>ingress-grpc</code>,nginx-ingress要求tls加密。实现的方式有两种：一种在ingress注解<code>grpcs</code>,之后在pod控制证书；另一种在ingress配置<code>tls</code>。<br>生产环境证书都是运维统一维护，舍弃第一种。所以调研cert-manager用来维护证书。</p>
<p>此处<code>cert-manager</code>用来使用已给的<code>ca</code>为需要证书的服务生成证书、并使用.</p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>K8S：1.15.6<br>CertManager: 1.0.4</p>
<h1 id="部署cert-manager"><a href="#部署cert-manager" class="headerlink" title="部署cert-manager"></a>部署cert-manager</h1><p>两种方式：<br>一种资源清单部署（<a href="https://cert-manager.io/docs/installation/kubernetes/#installing-with-regular-manifests" target="_blank" rel="noopener">install with regular manifests</a>）<br>另一种是helm-chart部署（<a href="https://cert-manager.io/docs/installation/kubernetes/#installing-with-helm" target="_blank" rel="noopener">install with helm</a>）</p>
<p>注意, 默认配置在<code>certificate</code>删除时,它所创建的<code>secret</code>不会被删除; 如果想要<code>Secret</code>同步被删除,需要在部署时指定参数<code>--enable-certificate-owner-ref=true</code>.</p>
<h2 id="1-资源清单部署"><a href="#1-资源清单部署" class="headerlink" title="1. 资源清单部署"></a>1. 资源清单部署</h2><blockquote>
<p>由于工作环境使用的k8s环境版本为1.15.6，&lt;1.16.</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Kubernetes &lt;1.16</span></span><br><span class="line">kubectl apply --validate=<span class="literal">false</span> -f https://github.com/jetstack/cert-manager/releases/download/v1.0.4/cert-manager-legacy.yaml</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-helm-chart部署"><a href="#2-helm-chart部署" class="headerlink" title="2. helm-chart部署"></a>2. helm-chart部署</h2><ol>
<li><p>创建CRD资源</p>
<blockquote>
<p>由于工作环境使用的k8s环境版本为1.15.6，创建crd时使用最新版本.</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply --validate=<span class="literal">false</span> -f https://github.com/jetstack/cert-manager/releases/download/v1.0.4/cert-manager.crds.yaml</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取chart部署</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 chart-repo</span></span><br><span class="line">helm repo add jetstack https://charts.jetstack.io</span><br><span class="line"><span class="comment"># 拉取 v1.0.4 版本chart</span></span><br><span class="line"><span class="comment"># 建议拉取chart,而不是在线安装</span></span><br><span class="line">helm pull jetstack/cert-manager --version=v1.0.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># helm install </span></span><br><span class="line">helm install --name cert-manager --namespace cert-manager cert-manager-v1.0.4.tgz</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h1 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ kubectl get pods --namespace cert-manager</span><br><span class="line"></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">cert-manager-5c6866597-zw7kh               1/1     Running   0          2m</span><br><span class="line">cert-manager-cainjector-577f6d9fd7-tr77l   1/1     Running   0          2m</span><br><span class="line">cert-manager-webhook-787858fcdb-nlzsq      1/1     Running   0          2m</span><br></pre></td></tr></tbody></table></figure>


<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>证书的生成分这几种方式<br>SelfSigned:<br>CA:<br>Vault:</p>
<p>此处选用<code>CA</code>方式签发证书：</p>
<h2 id="1-创建ca并保存进集群，Secret-cert-manager-ca-key-pair"><a href="#1-创建ca并保存进集群，Secret-cert-manager-ca-key-pair" class="headerlink" title="1. 创建ca并保存进集群，Secret:cert-manager:ca-key-pair"></a>1. 创建ca并保存进集群，Secret:cert-manager:ca-key-pair</h2><blockquote>
<p>此处配置的是自签发证书，如果环境中需要更换成合法证书，需要运维在第二步时，根据真实证书创建Secret。 </p>
</blockquote>
<ul>
<li><p>生成自签发证书(ca.crt)和key(ca.key)</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Generate a CA private key</span></span><br><span class="line">openssl genrsa -out ca.key 2048</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Create a self signed Certificate, valid for 10yrs with the 'signing' option set</span></span><br><span class="line">openssl req -x509 -new -nodes -key ca.key -subj <span class="string">"/CN=ICOS.CITY"</span> -days 3650 -reqexts v3_req -extensions v3_ca -out ca.crt</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建<code>Secret</code>保存证书(命名空间: cert-manager; 资源类型: secret; 资源名称: ca-key-pair.)。</p>
<blockquote>
<p>如果使用cluster-issuer，则需要将此secret保存至<code>cert-manager</code>命名空间；<br>如果使用issuer,则需要在每个issuer所在命名空间创建此secret.</p>
</blockquote>
</li>
</ul>
<p>此处以 <code>cluster-issuer</code> 配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl create secret tls ca-key-pair --cert=ca.crt --key=ca.key --namespace=cert-manager</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-创建-cluster-issuer-内容如下-cluster-issuer-yaml-："><a href="#2-创建-cluster-issuer-内容如下-cluster-issuer-yaml-：" class="headerlink" title="2. 创建 cluster-issuer, 内容如下(cluster-issuer.yaml)："></a>2. 创建 <code>cluster-issuer</code>, 内容如下(cluster-issuer.yaml)：</h2><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ca-clusterissuer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ca:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">ca-key-pair</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行下面命令创建</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl create -f cluster-issuer.yaml</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-创建certificate测试，内容如下-example-ca-yaml-："><a href="#3-创建certificate测试，内容如下-example-ca-yaml-：" class="headerlink" title="3. 创建certificate测试，内容如下(example-ca.yaml)："></a>3. 创建<code>certificate</code>测试，内容如下(example-ca.yaml)：</h2><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Certificate</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-ca</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">mars</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 创建名为`example-secret`的secret,保存`ca`与签发的证书.</span></span><br><span class="line">  <span class="attr">secretName:</span> <span class="string">example-secret</span></span><br><span class="line">  <span class="attr">issuerRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ca-clusterissuer</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line">  <span class="comment"># 此处放的是服务集群内部访问地址，</span></span><br><span class="line">  <span class="attr">commonName:</span> <span class="string">example.mars</span></span><br><span class="line">  <span class="attr">organization:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Example</span> <span class="string">CA</span></span><br><span class="line">  <span class="attr">dnsNames:</span></span><br><span class="line">  <span class="comment"># 同namespace访问的服务地址</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">example</span></span><br><span class="line">  <span class="comment"># 集群外部访问地址</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">example.mars.icos.city</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行命令<code>kubectl create -f example-ca.yaml</code><br>查看证书和Secret</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ kubectl -n mars get certificate</span><br><span class="line"><span class="comment"># 证书的状态 READY 为 True。</span></span><br><span class="line">NAME           READY   SECRET             AGE</span><br><span class="line">example-ca     True    example-secret     5d20h</span><br><span class="line"></span><br><span class="line">$ kubectl -n mars get secrets example-secret -o yaml</span><br><span class="line"><span class="comment"># 回显的secret的 data.ca.crt, data.tls.crt, data.tls.key 都有证书或秘钥base64值。</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  ca.crt: LS0tLS1C...EUtLS0tLQo=</span><br><span class="line">  tls.crt: LS0tLS1C...RFLS0tLS0K</span><br><span class="line">  tls.key: LS0tLS1C...0tLS0tCg==</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    cert-manager.io/alt-names: <span class="built_in">test</span>-cert.mars,<span class="built_in">test</span>-cert.icos.city</span><br><span class="line">    cert-manager.io/certificate-name: <span class="built_in">test</span>-cert-ca</span><br><span class="line">    cert-manager.io/common-name: icos.city</span><br><span class="line">    cert-manager.io/issuer-kind: ClusterIssuer</span><br><span class="line">    cert-manager.io/issuer-name: ca-clusterissuer</span><br><span class="line">  <span class="comment"># 在certificate中指定的 `spec.secretName`</span></span><br><span class="line">  name: example-secret</span><br><span class="line">  namespace: mars</span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/tls</span><br><span class="line">``` </span><br><span class="line"><span class="comment">## 4. 容器使用</span></span><br><span class="line">集群中使用证书的场景有以下几个诉求：</span><br><span class="line">1. 非https容器访问https容器，需要信任此自签证书。所以需要将`ca.crt`挂载到非https容器内部；</span><br><span class="line">2. 储存各个服务自身证书的secret中包含三部分，`ca.crt`,`tls.crt`,`tls.key`。</span><br><span class="line">3. 统一的平台部署应用到多个k8s集群，需要每个集群均部署`cert-manager`,并使用同一个`ca`。</span><br><span class="line"></span><br><span class="line">所以采取以下实现。</span><br><span class="line">1. 为每个服务均生成证书，至少包含`同一集群内部访问`和`同一Namespace访问`的证书。并挂载在`/opt/tls/`目录下。</span><br><span class="line">2. 如果服务有对外暴露，多加一个dnsName 为`集群外部访问地址`。</span><br><span class="line">3. 每个服务在固定的容器目录下，均有`ca.crt`,`tls.crt`,`tls.key`文件，只是访问https服务，则只使用`ca.crt`文件。</span><br><span class="line">4. `ca.crt`是公用、一致的； `tls.crt`,`tls.key`是根据每个服务的服务名、ingress签发的。</span><br><span class="line"></span><br><span class="line">```yaml</span><br><span class="line"><span class="comment"># Source: icossense-icosgrpc-service-xadit-001/templates/deployment.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: example-001</span><br><span class="line">  labels:</span><br><span class="line">    app: example-001</span><br><span class="line">    chart: example-001-1.0.0</span><br><span class="line">    release: <span class="string">"RELEASE-NAME"</span></span><br><span class="line">    heritage: <span class="string">"Helm"</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: example-001</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: example-001</span><br><span class="line">      labels:</span><br><span class="line">        app: example-001</span><br><span class="line">        release: <span class="string">"RELEASE-NAME"</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: example-001</span><br><span class="line">        image: <span class="string">"hexpy/example-grpc:latest9"</span></span><br><span class="line">        imagePullPolicy: <span class="string">"Always"</span></span><br><span class="line">        securityContext:</span><br><span class="line">          allowPrivilegeEscalation: <span class="literal">true</span></span><br><span class="line">          runAsNonRoot: <span class="literal">true</span></span><br><span class="line">          capabilities:</span><br><span class="line">            drop: [<span class="string">"NET_ADMIN"</span>, <span class="string">"SYS_TIME"</span>,<span class="string">"CHOWN"</span>,<span class="string">"SYS_ADMIN"</span>]</span><br><span class="line">        ports:</span><br><span class="line">        - name: containerport-0</span><br><span class="line">          protocol: <span class="string">"TCP"</span></span><br><span class="line">          containerPort: 7070</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: example-secret-mount</span><br><span class="line">          mountPath: <span class="string">"/etc/tls"</span></span><br><span class="line">          readOnly: <span class="literal">true</span></span><br><span class="line">      volumes:</span><br><span class="line">      <span class="comment"># 在此`deployment`中, `volumeMounts`中的`name`一致</span></span><br><span class="line">      - name: example-secret-mount</span><br><span class="line">        secret:</span><br><span class="line">          <span class="comment"># 在`certificate`中`spec.secretName`设置的.</span></span><br><span class="line">          secretName: example-secret</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://cert-manager.io/docs/" target="_blank" rel="noopener">官方文档</a><br><a href="https://artifacthub.io/packages/helm/jetstack/cert-manager/1.0.4" target="_blank" rel="noopener">chart</a><br><a href="https://github.com/jetstack/cert-manager" target="_blank" rel="noopener">github</a><br><a href="https://github.com/jetstack/cert-manager/issues/2993" target="_blank" rel="noopener">当证书被删除，Secret会被留下</a><br><a href="https://github.com/jetstack/cert-manager/issues/296" target="_blank" rel="noopener">当证书被删除，Secret会被留下2</a></p>
<p><a href="https://github.com/hex-py/cert-manager-example.git" target="_blank" rel="noopener">github-示例项目</a><br><a href="https://atelierhsn.com/2020/07/cert-manager-ingress/" target="_blank" rel="noopener">Automatic TLS certificates with cert-manager and ingress-nginx</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>CertManager</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-ingress-nginx配置grpc服务</title>
    <url>/2020/11/06/kubernetes-2020-11-06-Kubernetes-ingress-nginx%E9%85%8D%E7%BD%AEgrpc%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>ingress-nginx对于暴露grpc的服务，要求必须tls加密。所以，要么ingress配置grpcs,在服务端自己管理证书；要么ingress配置grpc,在ingress配置统一管理证书。</p>
<p>为便于运维管理证书，此处采用<code>cert-manager</code>统一在ingress配置中。自动生成证书，发布https服务。</p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul>
<li><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1></li>
</ul>
<ol>
<li>生成自签发CA证书，并保存在secret中(供cert-manager签发证书使用)；</li>
<li>配置<code>cluster-issuer</code>,和<code>certificate</code>，使生成Secret，保存证书、ca和私钥；</li>
<li>创建pod,service,ingress, ingress的tls配置使用第二步生成的Secret；</li>
<li>执行命令测试grpc端口是否暴露成功；<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">grpcurl -insecure test.icos.city:443 build.stack.fortune.FortuneTeller/Predict</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>以上1.2步参考cert-manager相关内容<br><a href="https://hex-py.github.io/2020/11/05/kubernetes-2020-11-05-Kubernetes-certmanager%E8%A7%A3%E5%86%B3ingress-tls%E8%AF%81%E4%B9%A6%E9%97%AE%E9%A2%98/">cert-manager hex-博客</a><br><a href="https://github.com/hex-py/cert-manager-example.git" target="_blank" rel="noopener">cert-manager hex-github-示例项目</a></p>
<p>第3,4部参考<code>ingress-nginx</code>的官方示例，<br><a href="https://github.com/kubernetes/ingress-nginx/tree/master/images/grpc-fortune-teller" target="_blank" rel="noopener">IngressNginx官房GRPC示例</a></p>
<p>第3,4部也可参考cert-manager的示例代码测试<br><a href="https://github.com/hex-py/cert-manager-example.git" target="_blank" rel="noopener">cert-manager hex-github-示例项目</a></p>
<p>其他关于grpc的内容，需要参考此链接</p>
<p><a href="https://github.com/grpc/grpc" target="_blank" rel="noopener">grpc_github</a> </p>
<p><a href="https://grpc.io/docs/languages/go/quickstart/" target="_blank" rel="noopener">grpc_go_quick_start</a> </p>
<p><a href="https://grpc.io/docs/languages/python/quickstart/" target="_blank" rel="noopener">grpc python quick-start</a> </p>
<p><a href="https://github.com/grpc/grpc-java" target="_blank" rel="noopener">grpc_java_quick-start</a></p>
<p><a href="https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/grpc" target="_blank" rel="noopener">ingress-nginx-grpcExample</a></p>
<p><a href="https://kubernetes.github.io/ingress-nginx/examples/grpc/" target="_blank" rel="noopener">ingress-nginx-grpc-DOC</a></p>
<p><a href="https://github.com/kubernetes/ingress-nginx/tree/master/images/grpc-fortune-teller" target="_blank" rel="noopener">ingress-nginx-grocExampleImage</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes自动扩展说明--HPA</title>
    <url>/2020/04/23/kubernetes-20200423-Kubernetes%E8%87%AA%E5%8A%A8%E6%89%A9%E5%B1%95%E8%AF%B4%E6%98%8E-HPA/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><h2 id="概念说明："><a href="#概念说明：" class="headerlink" title="概念说明："></a>概念说明：</h2><p>HPA（Horizontal Pod Autoscaler）是kubernetes（以下简称k8s）的一种资源对象，能够根据某些指标对在statefulSet、replicaController、replicaSet等集合中的pod数量进行动态伸缩，使运行在上面的服务对指标的变化有一定的自适应能力。</p>
<p>HPA目前支持四种类型的指标，分别是Resource、Object、External、Pods。其中在稳定版本autoscaling/v1中只支持对CPU指标的动态伸缩，在测试版本autoscaling/v2beta2中支持memory和自定义指标的动态伸缩，并以annotation的方式工作在autoscaling/v1版本中。</p>
<h2 id="问题记录："><a href="#问题记录：" class="headerlink" title="问题记录："></a>问题记录：</h2><ul>
<li><p>从网上直接找hpa的yaml文件，apiVersion一直不对。后改为<code>autoscaling/v1</code>正常，执行命令<code>kubectl api-versions | grep autoscaling | head -n 3</code>可获取，<a href="https://github.com/kubernetes/kubernetes/issues/45076#issuecomment-490665845" target="_blank" rel="noopener">参考链接</a></p>
</li>
<li><p>Statefulset的hpa用命令创建一直失败，无法正常监控到pod资源使用。原因是 <code>spec.scaleTargetRef.apiVersion</code>字段缺失，补上并设置值为<code>apps/v1</code>(所监控的资源所在接口，比如Statefulset的接口为apps/v1)之后正常。<a href="https://github.com/kubernetes/kubernetes/issues/44033#issuecomment-380064796" target="_blank" rel="noopener">参考链接</a></p>
</li>
</ul>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>Kubernetes: v1.15.6</p>
<blockquote>
<p>k8s版本不同，HPA的接口发生了变化。</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>要想使用自动调度，需要安装<code>Metric Server</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.6/components.yaml</span><br></pre></td></tr></tbody></table></figure>

<h2 id="示例yaml"><a href="#示例yaml" class="headerlink" title="示例yaml"></a>示例yaml</h2><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">icos-icosinquery-sit-saas-1-0-0</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">icos-icosinquery-sit-saas-1-0-0</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">currentReplicas:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">desiredReplicas:</span> <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/89453704" target="_blank" rel="noopener">探索Kubernetes HPA</a></p>
<p><a href="https://blog.51cto.com/ylw6006/2113848" target="_blank" rel="noopener">K8S集群基于heapster的HPA测试</a></p>
<p><a href="https://github.com/kubernetes/kubernetes/issues/44033#issuecomment-380064796" target="_blank" rel="noopener">Horizontal StatefulSet/RC Autoscaler</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title>Minikube本地启动</title>
    <url>/2020/04/23/kubernetes-20200423-Minikube%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>minikube 主要是镜像都在k8s.gcr.io上，需要设置proxy。</p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul>
<li>Ubuntu18.04</li>
<li>driver = docker</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h3 id="1-初始配置"><a href="#1-初始配置" class="headerlink" title="1. 初始配置"></a>1. 初始配置</h3><p>验证机器支持虚拟化。执行下面命令，如果输出非空则说明支持。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">grep -E --color <span class="string">'vmx|svm'</span> /proc/cpuinfo</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-安装minikube"><a href="#2-安装minikube" class="headerlink" title="2. 安装minikube"></a>2. 安装minikube</h3><ul>
<li>安装配置kubectl</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载最新版本</span></span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">chmod +x ./kubectl</span><br><span class="line">sudo mv ./kubectl /usr/<span class="built_in">local</span>/bin/kubectl</span><br><span class="line"><span class="comment"># 检查安装</span></span><br><span class="line">kubectl version --client</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li></li>
<li><p>安装minikube</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载最新版本</span></span><br><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 </span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">chmod +x minikube</span><br><span class="line">sudo install minikube /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"><span class="comment"># 检查安装</span></span><br><span class="line">minikube start --driver=docker</span><br><span class="line">minikube status</span><br></pre></td></tr></tbody></table></figure>



<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul>
<li>启动</li>
</ul>
<p>由于在Ubuntu下，参数<code>--image-mirror-country=cn</code>存在bug，所以通过<code>image-repository</code>指定阿里的源进行安装。</p>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>参数说明</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>–driver</td>
<td>常用值说明：<br> virtualbx–使用virtualbox<br>vmware–使用vmware<br>none: 在主机上而不是在虚拟机中运行Kubernetes组件。您需要运行Linux并安装Docker。<br>docker: Docker驱动程序允许您将Kubernetes安装到现有的Docker安装中。在Linux上，这并不需要启用虚拟化。<br>podman: 在PodMan中运行k8s组件。需要安装podman.</td>
<td>使用”docker”，注意一些访问权限的问题。和<a href="https://minikube.sigs.k8s.io/docs/drivers/docker/#known-issues" target="_blank" rel="noopener">局限性</a></td>
</tr>
<tr>
<td>–registry-mirror</td>
<td>手动启动dockerd时，通过–registry-mirror选项，或编辑/etc/docker/daemon.json并添加Registry-mirrors键和值，以使更改持久化。</td>
<td>“<a href="https://registry.docker-cn.com&quot;国内registry-mirror" target="_blank" rel="noopener">https://registry.docker-cn.com"国内registry-mirror</a></td>
</tr>
<tr>
<td>–image-repository</td>
<td>对gcr.io的访问权限有限时，指定拉取镜像的地址。例如registry.cn-hangzhou.aliyuncs.com/google_containers</td>
<td>registry.cn-hangzhou.aliyuncs.com/google_containers</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube start --driver=docker --registry-mirror=https://registry.docker-cn.com --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>停止</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube stop</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>删除（清除本地数据）</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube delete</span><br></pre></td></tr></tbody></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p><a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">install minikube</a></p>
<p><a href="https://kubernetes.io/docs/setup/learning-environment/minikube/#specifying-the-vm-driver" target="_blank" rel="noopener">Installing Kubernetes with Minikube</a></p>
<p><a href="https://github.com/kubernetes/minikube/issues/7052" target="_blank" rel="noopener">minikube启动带参数<code>--image-mirror-country=cn</code>失败</a></p>
<p><a href="https://www.jianshu.com/p/48804c8bb250" target="_blank" rel="noopener">Minikube 安装踩坑记</a></p>
<p>也可以考虑ubuntu出的<a href="https://microk8s.io/" target="_blank" rel="noopener">microk8s</a></p>
</body></html>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>对象存储服务-Minio</title>
    <url>/2020/01/02/persistence-2020-01-02-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1-Minio/</url>
    <content><![CDATA[<html><head></head><body><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>对象存储服务可以用来存储各类文件，公司前端项目中的图片存储采用的是OSS，也采取过<a href="https://github.com/minio/minio" target="_blank" rel="noopener">Minio</a>+<a href="">Restic</a>给虚拟机服务提供定期异地加密备份方案。小记对minio服务的理解。</p>
<h1 id="MinIo简介"><a href="#MinIo简介" class="headerlink" title="MinIo简介"></a>MinIo简介</h1><p>  <code>MinIO</code>是一款基于<code>Go</code>语言的高性能对象存储服务，基于<code>Apache License v2.0</code>开源协议。在<a href="https://github.com/minio/minio" target="_blank" rel="noopener">Github</a>上已有19K+Star。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p>
<p>MinIo可以单机或分布式模式运行。单机Minio服务存在单点故障，通常仅用于测试环境。分布式Minio将多块硬盘（甚至在不同的机器上）组成一个对象存储服务。由于硬盘分布在不同的节点上，分布式Minio避免了单点故障。如果是一个N节点的分布式Minio,只要有N/2节点在线，数据就是安全的。不过你需要至少有N/2+1个节点 Quorum 来创建新的对象。</p>
<p>分布式模式与单机模式搭建的流程基本一样，Minio服务基于命令行传入的参数自动切换成单机模式还是分布式模式。启动一个分布式Minio实例，你只需要把硬盘位置做为参数传给minio server命令即可，然后，需要在所有其它节点运行同样的命令。</p>
<p>Minio服务器将监控数据通过无须认证的端点暴露出来<br>健康检查侦测：存活侦测（/minio/health/live），就绪侦测（/minio/health/ready）<br>Prometheus侦测：/minio/prometheus/metrics</p>
<h1 id="安装及部署"><a href="#安装及部署" class="headerlink" title="安装及部署"></a>安装及部署</h1><h2 id="1-Docker运行MinIo单点模式"><a href="#1-Docker运行MinIo单点模式" class="headerlink" title="1. Docker运行MinIo单点模式"></a>1. Docker运行MinIo单点模式</h2><p>MinIO 需要持久化配置(容器内: /root/.minio)和应用数据(容器内: /data)。传递的参数<code>/data</code>是数据存储目录，如果不存在会在容器启动时在容器的文件系统中创建。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker pull minio/minio</span><br><span class="line">docker run -p 9000:9000 --name minio \</span><br><span class="line">  -v /mnt/data:/data \</span><br><span class="line">  -v /mnt/config:/root/.minio \</span><br><span class="line">  minio/minio server /data</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-Docker-compose运行MinIo分布式模式"><a href="#2-Docker-compose运行MinIo分布式模式" class="headerlink" title="2. Docker-compose运行MinIo分布式模式"></a>2. Docker-compose运行MinIo分布式模式</h2><p>分布式MinIO可以通过<code>Docker Compose</code>或者<code>Swarm mode</code>进行部署,本文docker-compose部署.</p>
<table>
<thead>
<tr>
<th></th>
<th>Docker-Compose部署</th>
<th>Docker-swarm</th>
</tr>
</thead>
<tbody><tr>
<td>节点规划</td>
<td>单个主机，多容器部署</td>
<td>多主机，多容器部署</td>
</tr>
<tr>
<td>优缺点</td>
<td>可以让快速的在机器上快速使用分布式MinIO，非常适合开发\测试环境</td>
<td>提供了更健壮,生产级别的部署.但生产环境更建议部署到k8s中</td>
</tr>
</tbody></table>
<p>Docker Compose允许定义和运行单主机，多容器Docker应用程序。使用Compose，可以使用Compose文件来配置MinIO服务。 然后，使用单个命令，您可以通过你的配置创建并启动所有分布式MinIO实例。 分布式MinIO实例将部署在同一主机上的多个容器中。 适合创建基于分布式MinIO的开发，测试环境。</p>
<p>在Docker Compose上部署分布式MinIO,请下载docker-compose.yaml到你的当前工作目录。执行下面命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. Get docker-compose.yaml</span></span><br><span class="line">wget https://raw.githubusercontent.com/minio/minio/master/docs/orchestration/docker-compose/docker-compose.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. pull image</span></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. container create &amp; up</span></span><br><span class="line">docker-compose up</span><br></pre></td></tr></tbody></table></figure>
<p>Docker compose file中的MinIO服务使用的端口是9001到9004。</p>
<h2 id="3-Kubernetes-Helm"><a href="#3-Kubernetes-Helm" class="headerlink" title="3. Kubernetes-Helm"></a>3. Kubernetes-Helm</h2><p>MinIO生产环境更建议部署再<code>kubernetes</code>,不建议使用<code>Swarm</code>.而且</p>
<ul>
<li><a href="https://github.com/helm/charts/tree/master/stable/minio" target="_blank" rel="noopener">MinIO Helm Chart</a>部署MinIO。</li>
<li>Kubernetes <a href="https://github.com/minio/minio/blob/master/docs/orchestration/kubernetes/README.md" target="_blank" rel="noopener">MinIO参考示例</a> ，通过.yaml文件部署MinIO。</li>
</ul>
<h3 id="3-1前提条件"><a href="#3-1前提条件" class="headerlink" title="3.1前提条件"></a>3.1前提条件</h3><p>部署环境检查</p>
<ul>
<li>默认standaline模式下，需要开启Beta API的Kubernetes 1.4+。</li>
<li>distributed 模式，需要开启Beta API的Kubernetes 1.5+。</li>
<li>底层支持PV provisioner。</li>
<li>helm安装病配置完成。</li>
</ul>
<h3 id="3-2使用Helm-Chart-部署"><a href="#3-2使用Helm-Chart-部署" class="headerlink" title="3.2使用Helm Chart 部署"></a>3.2使用Helm Chart 部署</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">helm install --name=minio --namespace paas stable/minio</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-3分布式节点规划："><a href="#3-3分布式节点规划：" class="headerlink" title="3.3分布式节点规划："></a>3.3分布式节点规划：</h3><ul>
<li>分布式Minio单租户存在最少4个盘最多32个盘的限制。只要遵守分布式Minio的限制，可以组合不同的节点和每个节点几块盘。比如，可以使用2个节点，每个节点4块盘，也可以使用4个节点，每个节点两块盘，诸如此类。</li>
<li>多个节点的存储容量和就是分布式Minio的存储容量。</li>
<li>mode：Minio服务器运行模式(standalone或distributed)</li>
<li>replicas：节点数(仅适用于distributed模式).4 &lt;= x &lt;= 32,默认为4</li>
</ul>
<h3 id="3-4冒烟测试"><a href="#3-4冒烟测试" class="headerlink" title="3.4冒烟测试"></a>3.4冒烟测试</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># curl</span></span><br><span class="line">curl http://&lt;service-name:9000&gt;/minio/health/live</span><br><span class="line">curl http://&lt;service-name:9000&gt;/minio/health/ready</span><br><span class="line"></span><br><span class="line"><span class="comment"># mc client</span></span><br><span class="line">mc config host add &lt;ALIAS&gt; &lt;ENDPOINT&gt; &lt;ACCESS-KEY&gt; &lt;SECRET-KEY&gt;</span><br><span class="line">mc ls &lt;ALIAS&gt;</span><br><span class="line">mc mb &lt;ALIAS&gt;/testbucket</span><br><span class="line">mc ls &lt;ALIAS&gt;</span><br></pre></td></tr></tbody></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>(未完待续)</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.min.io/cn/deploy-minio-on-docker-compose.html" target="_blank" rel="noopener">Docker Compose 部署 MinIO</a><br><a href="https://docs.min.io/cn/deploy-minio-on-kubernetes.html" target="_blank" rel="noopener">Kubernetes 部署 MinIO</a><br><a href="https://github.com/helm/charts/tree/master/stable/minio" target="_blank" rel="noopener">Chart 获取</a></p>
</body></html>]]></content>
      <categories>
        <category>Persistence</category>
      </categories>
      <tags>
        <tag>Persistence</tag>
        <tag>MinIO</tag>
      </tags>
  </entry>
  <entry>
    <title>服务数据备份方案-Restic</title>
    <url>/2020/01/02/persistence-2020-01-02-%E6%9C%8D%E5%8A%A1%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E6%96%B9%E6%A1%88-Restic/</url>
    <content><![CDATA[<html><head></head><body><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>最重要的事: 备份一定要包含恢复脚本，一个不可恢复的备份就是脏数据！！！</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Restic是一个用Go语言编写，安全且高效的备份客户端。它可以将本地文件备份到许多不同的后端存储库，例如本地目录，SFTP服务器或对象存储服务。公司由于Git-Server跑在本地办公网络,需要提供一个异地定期备份的方案,备份数据要求加密存储。选定<code>CronTab+Restic+MinIO</code>备份至华为云虚拟机上。</p>
<ol>
<li>获取Restic并在对象存储服务上初始化存储库。</li>
<li>准备要备份的文件，并将文件备份到存储库。</li>
<li>配置CronTab，自动执行备份以获取每小时快照，并在必要时自动精简旧快照。</li>
</ol>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p><a href="https://github.com/restic/restic/releases/tag/v0.9.3" target="_blank" rel="noopener">Restic可执行文件</a><br>MinIO信息获取</p>
<ul>
<li>访问秘钥: AWS_ACCESS_KEY_ID</li>
<li>秘钥: AWS_SECRET_ACCESS_KEY</li>
<li>服务器URL: RESTIC_REPOSITORY</li>
<li>Bucket名称: RESTIC_REPOSITORY</li>
</ul>
<p>RESTIC_PASSWORD定义Restic将用于加密备份的密码。此加密发生在本地，因此可以备份到不受信环境的异地服务器，并将其复制到安全备份的地方。可以通过KeyPass软件，或者通过openSSL命令:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">openssl rand -base64 24</span><br></pre></td></tr></tbody></table></figure>
<p>环境准备过程如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. Get Restic bin-file</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">curl -LO https://github.com/restic/restic/releases/download/v0.9.6/restic_0.9.6_linux_amd64.bz2</span><br><span class="line"><span class="comment"># Extract Here</span></span><br><span class="line">bzip2 -dk restic*</span><br><span class="line"><span class="comment"># Set file</span></span><br><span class="line">cp restic* /usr/<span class="built_in">local</span>/bin/restic</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/restic</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">restic version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. set Environments to access MinIO-bucket</span></span><br><span class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=<span class="string">"minio-access-key"</span></span><br><span class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=<span class="string">"minio-secret-key"</span></span><br><span class="line"><span class="built_in">export</span> RESTIC_REPOSITORY=<span class="string">"s3:&lt;server-url|eg=http://127.0.0.1:9000&gt;/&lt;bucket-name|eg=restic-git&gt;/"</span></span><br><span class="line"><span class="built_in">export</span> RESTIC_PASSWORD=<span class="string">"&lt;a-strong-password|eg=j8CGOSdz8ibUYK137wtYdVsRoGUp&gt;"</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="1-初始化存储库"><a href="#1-初始化存储库" class="headerlink" title="1. 初始化存储库"></a>1. 初始化存储库</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">restic init</span><br></pre></td></tr></tbody></table></figure>

<h1 id="2-准备备份文件"><a href="#2-准备备份文件" class="headerlink" title="2. 准备备份文件"></a>2. 准备备份文件</h1><p>备份服务为内部开发服务, docker-run 跑在虚拟机上.所以做如下准备:</p>
<ul>
<li>服务的镜像文件</li>
<li>服务的数据文件</li>
<li>服务恢复脚本</li>
</ul>
<h1 id="3-crontab设置定时备份"><a href="#3-crontab设置定时备份" class="headerlink" title="3. crontab设置定时备份"></a>3. crontab设置定时备份</h1><p>最近24小时备份,7天备份,12月备份</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/restic backup -q ./restic-jenkins</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/restic forget -q --prune --keep-hourly 24 --keep-daily 30 --keep-monthly 12</span><br></pre></td></tr></tbody></table></figure>

<h1 id="restic-操作备查"><a href="#restic-操作备查" class="headerlink" title="restic 操作备查"></a>restic 操作备查</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backup</span></span><br><span class="line">restic  backup --tag data /opt/bkp_dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># show snapshots</span></span><br><span class="line">restic snapshots</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore</span></span><br><span class="line">restic  restore &lt;snapshot-id&gt; --target /opt/restore-data</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://cloud.tencent.com/developer/article/1160729" target="_blank" rel="noopener">Restic备份对象存储服务器</a><br><a href="https://github.com/hex-py/restic-backup" target="_blank" rel="noopener">示例参考</a></p>
</body></html>]]></content>
      <categories>
        <category>Persistence</category>
      </categories>
      <tags>
        <tag>Persistence</tag>
        <tag>Restic</tag>
      </tags>
  </entry>
  <entry>
    <title>提供健全的私仓服务-Nexus</title>
    <url>/2020/01/03/persistence-2020-01-03-%E6%8F%90%E4%BE%9B%E5%81%A5%E5%85%A8%E7%9A%84%E7%A7%81%E4%BB%93%E6%9C%8D%E5%8A%A1-Nexus/</url>
    <content><![CDATA[<html><head></head><body><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>最重要的事: 可以提供java\node\python\docker-image\chart的仓储服务，但个人觉得对镜像仓库的支持不足，不如harbor，helm-chart也值相当于原始文件存储的级别。</p>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.环境准备"></a>2.环境准备</h1><h1 id="3-部署"><a href="#3-部署" class="headerlink" title="3.部署"></a>3.部署</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker volume create --name nexus-data</span><br><span class="line">docker run -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3:3.20.1</span><br></pre></td></tr></tbody></table></figure>
<h1 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h1><p>未完</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[nexus]</p>
</body></html>]]></content>
      <categories>
        <category>Persistence</category>
      </categories>
      <tags>
        <tag>Devops</tag>
        <tag>Persistence</tag>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>Registry配置keycloak作为认证服务</title>
    <url>/2020/05/26/persistence-2020-05-26-Registry%E9%85%8D%E7%BD%AEkeycloak%E4%BD%9C%E4%B8%BA%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最重要的事: </p>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.环境准备"></a>2.环境准备</h1><h1 id="3-部署"><a href="#3-部署" class="headerlink" title="3.部署"></a>3.部署</h1><h1 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://developers.redhat.com/blog/2017/10/31/docker-authentication-keycloak/" target="_blank" rel="noopener">Docker Authentication with Keycloak</a></strong></p>
<p><a href="https://github.com/keycloak/keycloak-documentation/blob/master/securing_apps/topics/client-registration.adoc" target="_blank" rel="noopener">Keycloak-doc client registration</a></p>
</body></html>]]></content>
      <categories>
        <category>Persistence</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Persistence</tag>
      </tags>
  </entry>
  <entry>
    <title>Vault集群部署并集成consul</title>
    <url>/2020/05/29/persistence-2020-05-29-Vault%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E5%B9%B6%E9%9B%86%E6%88%90consul/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最重要的事: </p>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.环境准备"></a>2.环境准备</h1><h1 id="3-部署"><a href="#3-部署" class="headerlink" title="3.部署"></a>3.部署</h1><h1 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></body></html>]]></content>
      <categories>
        <category>Persistence</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>Persistence</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB-sharded集群搭建及维护使用</title>
    <url>/2020/11/13/persistence-2020-11-13-MongoDB-sharded%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8A%E7%BB%B4%E6%8A%A4%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>mongodb的搭建主要分<code>sharded-cluster</code>,<code>ha</code>, <code>single-node</code>, 一个<code>ha</code>可以包含primary(1),secondary(0~2),ab</p>
<ol>
<li><p>mongodb使用偶数版本(稳定版本)。比如4.4.1， 而非奇数版本(开发版本)，比如4.3.0。具体详见<a href="https://docs.mongodb.com/manual/reference/versioning/#mongodb-versioning" target="_blank" rel="noopener">mongodb versioning</a></p>
</li>
<li><p>mongodb关于bitnami的sharded部署，普通用户的创建不能使用。因为</p>
</li>
</ol>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.环境准备"></a>2.环境准备</h1><h1 id="3-部署"><a href="#3-部署" class="headerlink" title="3.部署"></a>3.部署</h1><h1 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>官方文档</p>
<p><a href="https://docs.mongodb.com/manual/sharding/" target="_blank" rel="noopener">mongodb官方文档-sharding</a></p>
<p><a href="https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/" target="_blank" rel="noopener">mongodb官方文档-sharding部署</a></p>
<p><a href="https://docs.mongodb.com/manual/administration/sharded-cluster-administration/" target="_blank" rel="noopener">mongodb官方文档-sharded-Cluster管理员文档</a></p>
<p><a href="https://docs.mongodb.com/v3.0/administration/sharded-clusters/" target="_blank" rel="noopener">mongodb官方文档-sharded-Cluster管理员文档v3版本</a></p>
<p><a href="https://docs.mongodb.com/manual/reference/versioning/#mongodb-versioning" target="_blank" rel="noopener">mongodb官方文档-版本说明</a></p>
<p><a href="https://docs.mongodb.com/manual/release-notes/4.4/" target="_blank" rel="noopener">mongodb官方文档-Release Notes</a></p>
<p>部署chart(注意，helm/charts下的mongodb和mongodb-replicaset已不再维护)</p>
<p><a href="https://github.com/bitnami/charts/tree/master/bitnami/mongodb-sharded" target="_blank" rel="noopener">mongodb-部署chart-Mongodb-sharded</a></p>
<p><a href="https://github.com/bitnami/charts/issues/1655#issuecomment-704064736" target="_blank" rel="noopener">数据库初始化，需要等集群正确分片后执行</a><br><a href="https://github.com/bitnami/charts/issues/1655" target="_blank" rel="noopener">(bitnami/mongodb-sharded)custom用户和数据库变量被忽略</a></p>
<p>扫盲博客</p>
<p><a href="https://www.cnblogs.com/xybaby/p/6832296.html#_label_0" target="_blank" rel="noopener">博客–mongodb部署了解mongodb-sharded</a></p>
<p>其他<br><a href="https://help.aliyun.com/document_detail/64561.html" target="_blank" rel="noopener">阿里云mongodb-sharding 注意事项</a></p>
<p><a href="https://www.mongodb.com/blog/post/performance-best-practices-sharding" target="_blank" rel="noopener">Performance Best Practices: Sharding</a></p>
<p><a href="https://geekflare.com/mongodb-sharding-best-practices/" target="_blank" rel="noopener">What is MongoDB Sharding and the Best Practices?</a></p>
<p><a href="https://orangematter.solarwinds.com/2017/09/06/the-basics-of-sharding-in-mongodb/" target="_blank" rel="noopener">The Basics of Sharding in MongoDB</a></p>
</body></html>]]></content>
      <categories>
        <category>Persistence</category>
      </categories>
      <tags>
        <tag>Persistence</tag>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>S3fs-利用s3作为弹性文件存储方案</title>
    <url>/2020/11/18/persistence-2020-11-18-S3fs-%E5%88%A9%E7%94%A8s3%E4%BD%9C%E4%B8%BA%E5%BC%B9%E6%80%A7%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>s3fs使用fuse挂载s3 bucket到Linux或Mac系统,并且支持在Docker容器内部以非特权用户挂载s3 bucket。</p>
<h1 id="安装s3fs"><a href="#安装s3fs" class="headerlink" title="安装s3fs"></a>安装s3fs</h1><p>在容器内使用s3fs,需要在Docker镜像中安装s3fs,以下是主流发行版安装方法:</p>
<ul>
<li><p>Debian 9 and Ubuntu 16.04 or newer:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install s3fs</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>RHEL and CentOS 7 or newer through via EPEL:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install s3fs-fuse</span><br></pre></td></tr></tbody></table></figure>


</li>
</ul>
<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><ol>
<li><p>/etc/fuse.conf文件中配置说明</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td>user_allow_other</td>
<td>允许非root用户使用allow_other 挂载选项</td>
<td>no value</td>
</tr>
</tbody></table>
</li>
</ol>
   <hr>

<ol start="2">
<li><p>挂载选项说明</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td>use_path_request_style</td>
<td>非AWS实现的S3服务,设置此参数,配合url使用</td>
<td>no value</td>
</tr>
<tr>
<td>url</td>
<td>S3服务的URL</td>
<td><a href="http://obs.cn-north-4.myhuaweicloud.com" target="_blank" rel="noopener">http://obs.cn-north-4.myhuaweicloud.com</a></td>
</tr>
<tr>
<td>allow_other</td>
<td>允许非root用户挂载</td>
<td>no vaule</td>
</tr>
</tbody></table>
</li>
</ol>
<hr>

<h1 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h1><ul>
<li><p>通过fstab挂载</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">echo ACCESS_KEY_ID:SECRET_ACCESS_KEY &gt; ~/.passwd-s3fs</span><br><span class="line">sed -i 's/\#user_allow_other/user_allow_other/g' /etc/fuse.conf</span><br><span class="line">mkdir /mnt/s3</span><br><span class="line">rke-test /mnt/s3 fuse.s3fs _netdev,allow_other,use_path_request_style,url=http://obs.cn-north-4.myhuaweicloud.com / 0 0</span><br></pre></td></tr></tbody></table></figure>



</li>
</ul>
<ul>
<li><p>通过命令挂载</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">echo ACCESS_KEY_ID:SECRET_ACCESS_KEY &gt; ~/.passwd-s3fs</span><br><span class="line">sed -i 's/\#user_allow_other/user_allow_other/g' /etc/fuse.conf</span><br><span class="line">mkdir /mnt/s3</span><br><span class="line">s3fs rke-test /mnt/s3 -o _netdev -o allow_other -o use_path_request_style -o url=http://obs.cn-north-4.myhuaweicloud.com</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>容器内命令挂载</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name ranger  --cap-add mknod --cap-add sys_admin --security-opt apparmor:unconfined --device=/dev/fuse reg.chebai.org/paas/ranger:latest</span><br><span class="line">docker exec -it -u 1000 ranger bash</span><br><span class="line">echo ACCESS_KEY_ID:SECRET_ACCESS_KEY &gt; ~/.passwd-s3fs</span><br><span class="line">sed -i 's/\#user_allow_other/user_allow_other/g' /etc/fuse.conf</span><br><span class="line">mkdir /mnt/s3</span><br><span class="line">s3fs rke-test /mnt/s3 -o _netdev -o allow_other -o use_path_request_style -o url=http://obs.cn-north-4.myhuaweicloud.com</span><br></pre></td></tr></tbody></table></figure>


</li>
</ul>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol>
<li><p>确定已成功挂载</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mount | grep s3</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>复制文件到挂载点</p>
</li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cp file /mnt/s3</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>在华为云控制台检查bucket中是否存在该文件</li>
</ol>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ol>
<li><p>fuse: device not found, try ‘modprobe fuse’ first<br><a href="https://github.com/s3fs-fuse/s3fs-fuse/issues/1314#issuecomment-647482118" target="_blank" rel="noopener">k8s中，容器需要设置特权模式。否则会引起此报错</a></p>
</li>
<li><p>启用此功能需要节点安装fuse组件么<br>不需要，只需要容器安装<code>s3fs</code>，调用容器内的fuse组件。fuse是user-space的组件，只需要容器内安装。之后需要特权模式sys-admin。则能正常使用。<br><a href="https://zhuanlan.zhihu.com/p/106719192?utm_source=wechat_session" target="_blank" rel="noopener">用户空间文件系统FUSE工作原理</a></p>
</li>
<li><p>s3fs: credentials file /root/.passwd-s3fs should not have others permissions.<br>文件权限问题，为是s3认证信息保密，将权限由644改为600。<code>chmod 600 ～/.passwd-s3fs</code>。</p>
</li>
<li><p>文件只读性能还可以，但一点有写操作，性能很差。<br>a服务修改了文件，会重新上传文件至s3，其他节点则是从s3同步下修改的文件。</p>
</li>
</ol>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://github.com/s3fs-fuse" target="_blank" rel="noopener">s3fs-fuse github</a><br><a href="https://zhuanlan.zhihu.com/p/106719192?utm_source=wechat_session" target="_blank" rel="noopener">fuse 概念扫盲</a></p>
</body></html>]]></content>
      <categories>
        <category>Persistence</category>
      </categories>
      <tags>
        <tag>Persistence</tag>
      </tags>
  </entry>
  <entry>
    <title>Python资料</title>
    <url>/2019/12/29/python-20191229-Python%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<html><head></head><body><a id="more"></a></body></html>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LDAP-Python 操作库</title>
    <url>/2020/01/08/python-20200108-LDAP-Python%E6%93%8D%E4%BD%9C%E5%BA%93/</url>
    <content><![CDATA[<html><head></head><body><p>运行环境<br>python环境: python3.7</p>
<p>安装包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install ldap3</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Time    : 2019/11/14 5:37 PM</span></span><br><span class="line"><span class="string">@Author  : Hex</span></span><br><span class="line"><span class="string">@File    : ldapBaseApi.py</span></span><br><span class="line"><span class="string">@Software: PyCharm</span></span><br><span class="line"><span class="string"># ApiDocument: https://ldap3.readthedocs.io/</span></span><br><span class="line"><span class="string"># https://ldap3.readthedocs.io/tutorial_operations.html#</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># reload(sys)</span></span><br><span class="line"><span class="comment"># sys.setdefaultencoding('utf8')</span></span><br><span class="line"><span class="keyword">from</span> ldap3 <span class="keyword">import</span> Server, Connection, SUBTREE, ALL_ATTRIBUTES</span><br><span class="line"><span class="keyword">from</span> ldap3.core.exceptions <span class="keyword">import</span> LDAPBindError</span><br><span class="line"><span class="keyword">from</span> ldap3 <span class="keyword">import</span> MODIFY_REPLACE</span><br><span class="line"><span class="keyword">from</span> ldap3.utils.dn <span class="keyword">import</span> safe_rdn</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> APIException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LDAP</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, port, user, password, base_dn)</span>:</span></span><br><span class="line">        dn = <span class="string">"cn=%s,%s"</span> % (user, base_dn)</span><br><span class="line">        self.server = Server(host=host, port=port)</span><br><span class="line">        self.base_dn = base_dn</span><br><span class="line">        self.__conn = Connection(self.server, dn, password, auto_bind=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_ou</span><span class="params">(self, ou, oid)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        参考: https://ldap3.readthedocs.io/tutorial_operations.html#create-an-entry</span></span><br><span class="line"><span class="string">        添加oy</span></span><br><span class="line"><span class="string">        :param ou: 'ou=测试部,dc=domain,dc=com' 或者 'ou=测试子部门,ou=测试部,dc=domain,dc=com'</span></span><br><span class="line"><span class="string">        :param oid: 部门id保存至st中</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__conn.add(ou, <span class="string">'organizationalUnit'</span>, {<span class="string">"st"</span>: oid})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_user</span><span class="params">(self, userid, username, mobile, mail, title, ou_dn, gidnumber=<span class="number">501</span>, alias=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        参考: https://ldap3.readthedocs.io/tutorial_operations.html#create-an-entry</span></span><br><span class="line"><span class="string">        :param userid:     "linan"</span></span><br><span class="line"><span class="string">        :param username:   "姓名" cn=姓名</span></span><br><span class="line"><span class="string">        :param mobile:</span></span><br><span class="line"><span class="string">        :param mail:       "xxx@domain.com"</span></span><br><span class="line"><span class="string">        :param title:</span></span><br><span class="line"><span class="string">        :param ou_dn:     "ou=运维中心,dc=domain,dc=com"</span></span><br><span class="line"><span class="string">        :param gidnumber: 501 默认用户组</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l = self.__conn</span><br><span class="line">        objectclass = [<span class="string">'top'</span>, <span class="string">'person'</span>, <span class="string">'inetOrgPerson'</span>, <span class="string">'posixAccount'</span>]</span><br><span class="line">        add_dn = <span class="string">"cn=%s,%s"</span> % (username, ou_dn)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 也可以随机生成,我先随便写一个值，这个需要自己定义规则</span></span><br><span class="line">        password = <span class="string">'%s@qwe'</span> % userid</span><br><span class="line">        uidNumber = <span class="string">'%s'</span> % userid.strip(<span class="string">"xxx"</span>)</span><br><span class="line">        <span class="comment"># 添加用户</span></span><br><span class="line">        s = l.add(add_dn, objectclass, {<span class="string">'mobile'</span>: mobile,</span><br><span class="line">                                        <span class="string">'sn'</span>: userid,</span><br><span class="line">                                        <span class="string">'mail'</span>: mail,</span><br><span class="line">                                        <span class="string">'userPassword'</span>: password,</span><br><span class="line">                                        <span class="string">'title'</span>: title,</span><br><span class="line">                                        <span class="string">'uid'</span>: username,</span><br><span class="line">                                        <span class="string">'gidNumber'</span>: gidnumber,</span><br><span class="line">                                        <span class="string">'uidNumber'</span>: uidNumber,</span><br><span class="line">                                        <span class="string">'homeDirectory'</span>: <span class="string">'/home/users/%s'</span> % userid,</span><br><span class="line">                                        <span class="string">'loginShell'</span>: <span class="string">'/bin/bash'</span></span><br><span class="line">                                        })</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_oudn_by_st</span><span class="params">(self, st, base_dn=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        根据 st值 获取组织dn</span></span><br><span class="line"><span class="string">        参考: https://ldap3.readthedocs.io/tutorial_searches.html</span></span><br><span class="line"><span class="string">        :param base_dn:</span></span><br><span class="line"><span class="string">        :param st:  部门id</span></span><br><span class="line"><span class="string">        :return: entry</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> base_dn:</span><br><span class="line">            base_dn = self.base_dn</span><br><span class="line">        <span class="comment"># 查询ou 中 返回的信息 attribute 包含 st</span></span><br><span class="line">        status = self.__conn.search(base_dn, <span class="string">'(objectclass=organizationalUnit)'</span>, attributes=[<span class="string">"st"</span>])</span><br><span class="line">        <span class="keyword">if</span> status:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.__conn.entries:</span><br><span class="line">                <span class="keyword">if</span> st:</span><br><span class="line">                    <span class="keyword">if</span> st <span class="keyword">in</span> i.entry_attributes_as_dict[<span class="string">"st"</span>]:</span><br><span class="line">                        <span class="keyword">return</span> i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object_classes_info</span><span class="params">(self, objec_classes)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取 Ldap中 object_classes的必要参数以及其他信息</span></span><br><span class="line"><span class="string">        参考: https://ldap3.readthedocs.io/tutorial_searches.html</span></span><br><span class="line"><span class="string">        :param objec_classes: objec_classes</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(self.server.schema.object_classes[objec_classes])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_userdn_by_mail</span><span class="params">(self, mail, base_dn=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        通过邮箱地址，获取用户dn。部分没有邮箱地址的用户被忽略，不能使用ldap认证</span></span><br><span class="line"><span class="string">        参考: https://ldap3.readthedocs.io/tutorial_searches.html</span></span><br><span class="line"><span class="string">        :param mail:</span></span><br><span class="line"><span class="string">        :param base_dn:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> base_dn:</span><br><span class="line">            base_dn = self.base_dn</span><br><span class="line">        status = self.__conn.search(base_dn,</span><br><span class="line">                                    search_filter=<span class="string">'(mail={})'</span>.format(mail),</span><br><span class="line">                                    search_scope=SUBTREE,</span><br><span class="line">                                    attributes=ALL_ATTRIBUTES,</span><br><span class="line">                                    )</span><br><span class="line">        <span class="keyword">if</span> status:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.__conn.entries:</span><br><span class="line">                <span class="comment"># print(i.entry_dn)</span></span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_userdn_by_args</span><span class="params">(self, base_dn=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        参考: https://ldap3.readthedocs.io/tutorial_searches.html</span></span><br><span class="line"><span class="string">        获取用户dn, 通过 args</span></span><br><span class="line"><span class="string">        可以支持多个参数: get_userdn_by_args(mail="xxx@domain.com", uid="姓名")</span></span><br><span class="line"><span class="string">        会根据 kwargs 生成 search的内容，进行查询: 多个条件是 &amp; and查询</span></span><br><span class="line"><span class="string">        返回第一个查询到的结果,</span></span><br><span class="line"><span class="string">        建议使用唯一标识符进行查询</span></span><br><span class="line"><span class="string">        这个函数基本可以获取所有类型的数据</span></span><br><span class="line"><span class="string">        :param base_dn:</span></span><br><span class="line"><span class="string">        :param kwargs:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        search = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            search += <span class="string">"(%s=%s)"</span> % (k, v)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> base_dn:</span><br><span class="line">            base_dn = self.base_dn</span><br><span class="line">        <span class="keyword">if</span> search:</span><br><span class="line">            search_filter = <span class="string">'(&amp;{})'</span>.format(search)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            search_filter = <span class="string">''</span></span><br><span class="line">        status = self.__conn.search(base_dn,</span><br><span class="line">                                    search_filter=search_filter,</span><br><span class="line">                                    search_scope=SUBTREE,</span><br><span class="line">                                    attributes=ALL_ATTRIBUTES</span><br><span class="line">                                    )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status:</span><br><span class="line">            <span class="keyword">return</span> self.__conn.entries</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_userdn_by_mail</span><span class="params">(self, mail, password)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        验证用户名密码</span></span><br><span class="line"><span class="string">        通过邮箱进行验证密码</span></span><br><span class="line"><span class="string">        :param mail:</span></span><br><span class="line"><span class="string">        :param password:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        entry = self.get_userdn_by_mail(mail=mail)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> entry:</span><br><span class="line">            bind_dn = entry.entry_dn</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                Connection(self.server, bind_dn, password, auto_bind=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> LDAPBindError:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"user: %s not exist! "</span> % mail)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_user_info</span><span class="params">(self, user_dn, action=MODIFY_REPLACE, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param dn: 用户dn 可以通过get_userdn_by_args，get_userdn_by_mail 获取</span></span><br><span class="line"><span class="string">        :param action: MODIFY_REPLACE 对字段原值进行替换  MODIFY_ADD 在指定字段上增加值   MODIFY_DELETE 对指定字段的值进行删除</span></span><br><span class="line"><span class="string">        :param kwargs: 要进行变更的信息内容 uid userPassword mail sn gidNumber uidNumber mobile title</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        allow_key = <span class="string">"uid userPassword mail sn gidNumber uidNumber mobile title"</span>.split(<span class="string">" "</span>)</span><br><span class="line">        update_args = {}</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> allow_key:</span><br><span class="line">                msg = <span class="string">"字段: %s, 不允许进行修改, 不生效"</span> % k</span><br><span class="line">                print(msg)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            update_args.update({k: [(action, [v])]})</span><br><span class="line">        print(update_args)</span><br><span class="line">        status = self.__conn.modify(user_dn, update_args)</span><br><span class="line">        <span class="keyword">return</span> status</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_user_cn</span><span class="params">(self, user_dn, new_cn)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        修改cn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        dn: cn=用户,ou=运维部,ou=研发中心,dc=domain,dc=com</span></span><br><span class="line"><span class="string">        rdn就是 cn=用户</span></span><br><span class="line"><span class="string">        Example:</span></span><br><span class="line"><span class="string">            from ldap3.utils.dn import safe_rdn</span></span><br><span class="line"><span class="string">            safe_rdn('cn=b.smith,ou=moved,ou=ldap3-tutorial,dc=demo1,dc=freeipa,dc=org')</span></span><br><span class="line"><span class="string">            [cn=b.smith]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param dn:</span></span><br><span class="line"><span class="string">        :param new_cn:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        s = self.__conn.modify_dn(user_dn, <span class="string">'cn=%s'</span> % new_cn)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_ou</span><span class="params">(self, dn, new_ou_dn)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        更换所在的OU</span></span><br><span class="line"><span class="string">        :param dn: 要进行变动的DN</span></span><br><span class="line"><span class="string">        :param new_ou_dn:  新的OU DN</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        rdn = safe_rdn(dn)</span><br><span class="line">        print(rdn)</span><br><span class="line">        s = self.__conn.modify_dn(dn, rdn[<span class="number">0</span>], new_superior=new_ou_dn)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_dn</span><span class="params">(self, dn)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        要进行删除的DN</span></span><br><span class="line"><span class="string">        :param dn:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 如果不是以cn开头的需要清理(删除) sub-link</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dn.startswith(<span class="string">"cn"</span>):</span><br><span class="line">            <span class="comment"># 获取dn 下所有 sub Person DN 进行删除</span></span><br><span class="line">            allUserEntry = self.get_userdn_by_args(base_dn=dn, objectClass=<span class="string">"Person"</span>)</span><br><span class="line">            <span class="keyword">if</span> allUserEntry:</span><br><span class="line">                <span class="keyword">for</span> userentry <span class="keyword">in</span> allUserEntry:</span><br><span class="line">                    self.__conn.delete(userentry.entry_dn)</span><br><span class="line">                    print(<span class="string">"deleting ou %s and delete sub Person DN: %s"</span> % (dn, userentry.entry_dn))</span><br><span class="line">            <span class="comment"># 获取dn 下所有 sub    OU进行删除</span></span><br><span class="line">            allOuEntry = self.get_userdn_by_args(base_dn=dn, objectClass=<span class="string">"organizationalUnit"</span>)</span><br><span class="line">            <span class="keyword">if</span> allOuEntry:</span><br><span class="line">                <span class="keyword">for</span> ouEntry <span class="keyword">in</span> reversed(allOuEntry):</span><br><span class="line">                    s = self.__conn.delete(ouEntry.entry_dn)</span><br><span class="line">                    print(<span class="string">"deleting ou %s and delete sub organizationalUnit DN: %s"</span> % (dn, ouEntry.entry_dn))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = self.__conn.delete(dn)</span><br><span class="line">        <span class="comment"># print(self.__conn.result)</span></span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ldap_config = {</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">"10.12.0.23"</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">32616</span>,</span><br><span class="line">        <span class="string">'base_dn'</span>: <span class="string">'dc=service,dc=corp'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'admin'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'xxxxxx'</span>,</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ldapObj = LDAP(**ldap_config)</span><br><span class="line">    <span class="comment"># 同步企业微信 组织架构 to Ldap</span></span><br><span class="line">    <span class="comment"># 同步企业微信 User  To ldap</span></span><br><span class="line">    <span class="comment"># -------------------------------</span></span><br><span class="line">    <span class="comment"># 删除DN, 对DN下的 sub 进行递归删除</span></span><br><span class="line">    <span class="comment"># s = ldapObj.get_oudn_by_st("1")</span></span><br><span class="line">    <span class="comment"># status = ldapObj.delete_dn(s.entry_dn)</span></span><br><span class="line">    <span class="comment"># print(status)</span></span><br><span class="line">    <span class="comment"># -------------------------------</span></span><br><span class="line">    <span class="comment"># 验证用户密码</span></span><br><span class="line">    <span class="comment"># s = ldapObj.authenticate_userdn_by_mail("linan@domain.com", "xxx9999@qwe")</span></span><br><span class="line">    <span class="comment"># - -----------------------------</span></span><br><span class="line">    <span class="comment"># 添加用户</span></span><br><span class="line">    <span class="comment"># s = ldapObj.add_user("xxx9999", "李南", "190283812", "linan@domain.com", "运维",</span></span><br><span class="line">    <span class="comment">#                  ou_dn="ou=运维中心,dc=domain,dc=com")</span></span><br><span class="line">    <span class="comment"># --------------------------------</span></span><br><span class="line">    <span class="comment"># 查询 ou st  组id</span></span><br><span class="line">    <span class="comment"># s = obj.get_oudn_by_st(st="1")</span></span><br><span class="line">    <span class="comment"># --------------------------------</span></span><br><span class="line">    <span class="comment"># 添加OU</span></span><br><span class="line">    <span class="comment"># obj.add_ou("ou=总部,dc=domain,dc=com", 1)</span></span><br><span class="line">    <span class="comment"># obj.add_ou("ou=研发中心,ou=总部,dc=domain,dc=com", 2)</span></span><br><span class="line">    <span class="comment"># --------------------------------</span></span><br><span class="line">    <span class="comment"># 查询用户是否存在 - 通过 mail  获取用户 dn_entry</span></span><br><span class="line">    <span class="comment"># ldapObj.get_userdn_by_mail(mail="linan@domain.com")</span></span><br><span class="line">    <span class="comment"># --------------------------------</span></span><br><span class="line">    <span class="comment"># 根据 参数 查询用户DN   data = [dn_entry, ...] ，多个参数为 &amp;</span></span><br><span class="line">    <span class="comment"># data = ldapObj.get_userdn_by_args(cn="李南",mail="xxxx")</span></span><br><span class="line">    <span class="comment"># --------------------------------</span></span><br><span class="line">    <span class="comment"># 对指定dn 进行参数修改  多个参数可以一起修改</span></span><br><span class="line">    <span class="comment"># s = ldapObj.update_user_info(data[0].entry_dn, userPassword="123456")</span></span><br><span class="line">    <span class="comment"># --------------------------------</span></span><br><span class="line">    <span class="comment"># 对指定DN 变更 OU-DN</span></span><br><span class="line">    <span class="comment"># s = ldapObj.update_user_ou(data[0].entry_dn, s.entry_dn)</span></span><br><span class="line">    <span class="comment"># --------------------------------</span></span><br><span class="line">    <span class="comment"># 对指定DN 修改CN名称</span></span><br><span class="line">    <span class="comment"># ldapObj.update_cn(data[0].entry_dn,new_cn="李南男")</span></span><br><span class="line">    <span class="comment"># --------------------------------</span></span><br><span class="line">    <span class="comment"># 获取objectClass 详细信息</span></span><br><span class="line">    <span class="comment"># ldapObj.get_object_classes_info("organizationalUnit")</span></span><br><span class="line">    <span class="comment"># ldapObj.get_object_classes_info("posixAccount")</span></span><br><span class="line">    <span class="comment"># ldapObj.get_object_classes_info("inetOrgPerson")</span></span><br><span class="line">    <span class="comment"># ldapObj.get_object_classes_info("person")</span></span><br><span class="line">    <span class="comment"># 没有邮箱地址的用户:</span></span><br><span class="line"></span><br><span class="line">    s = ldapObj.get_userdn_by_args(ou=<span class="string">"Product"</span>)</span><br><span class="line">    data = ldapObj.get_userdn_by_args(base_dn=s[<span class="number">0</span>].entry_dn, objectclass=<span class="string">"inetOrgPerson"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        print(i.entry_dn)</span><br><span class="line">    print(s)</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>LDAP</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-RestAPI使用Flask、Flask-RestPlus</title>
    <url>/2020/01/10/python-20200110-Python-RestAPI%E4%BD%BF%E7%94%A8Flask%E3%80%81SwaggerUI%E3%80%81Flask-RestPlus/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>本文概述了使用<code>Flask</code>和<code>Flask-restplus</code>创建<code>REST API</code>所需的步骤。这些工具组合成一个框架，Swagger被整合在<code>Flask-restplus</code>中。</p>
<blockquote>
<ol>
<li>API参数校验</li>
<li>格式化输出（Json）</li>
<li>生成交互式API文档</li>
<li>将python异常转化为Readable http响应。</li>
<li>API文档可导出<code>Swagger</code>格式，也可以导出为<code>Postman-collection</code></li>
</ol>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p><a href="https://flask.readthedocs.io/en/1.1.x" target="_blank" rel="noopener"><em>Flask</em></a>: 轻量级的Python Web框架。<br><a href="https://flask-restplus.readthedocs.io/en/stable" target="_blank" rel="noopener"><em>Flask-RestPlus</em></a> 使开发<code>REST api</code>变得快速和简单。它提供了足够的语法糖，使您的代码易于阅读和维护。它集成<code>Swagger UI</code>为API生成交互式文档。</p>
<h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.环境准备"></a>2.环境准备</h1><ul>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li>
<li><a href="https://virtualenv.pypa.io/en/stable/installation/" target="_blank" rel="noopener">Virtualenv</a></li>
<li>建议python3，python2也可以正常工作</li>
</ul>
<h1 id="3-运行Demo应用"><a href="#3-运行Demo应用" class="headerlink" title="3. 运行Demo应用"></a>3. 运行Demo应用</h1><h2 id="下载示例代码"><a href="#下载示例代码" class="headerlink" title="下载示例代码"></a>下载示例代码</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/work_space/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/hex-py/restplus-api-demo.git</span><br><span class="line"><span class="built_in">cd</span> restplus-api-demo</span><br></pre></td></tr></tbody></table></figure>
<h2 id="构建运行的venv环境"><a href="#构建运行的venv环境" class="headerlink" title="构建运行的venv环境"></a>构建运行的<code>venv</code>环境</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">virtualenv -p `<span class="built_in">which</span> python3` venv</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line">(venv) $ pip install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure>
<h2 id="初始化应用，并启动"><a href="#初始化应用，并启动" class="headerlink" title="初始化应用，并启动"></a>初始化应用，并启动</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">(venv) $ python setup.py develop</span><br><span class="line">(venv) $ python rest_api_demo/app.py</span><br></pre></td></tr></tbody></table></figure>
<p>访问地址<code>http://localhost:8888/api/</code>，可以查看API文档如下:</p>
<p><img alt="restplus-api-listing-methods" data-src="https://tvax1.sinaimg.cn/large/006hT4w1ly1garkp5nhwwj30l50badhz.jpg"></p>
<h1 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h1><h2 id="4-1-HelloWorld举例"><a href="#4-1-HelloWorld举例" class="headerlink" title="4.1 HelloWorld举例"></a>4.1 HelloWorld举例</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Resource, Api</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)                  <span class="comment">#  Create a Flask WSGI application</span></span><br><span class="line">api = Api(app)                         <span class="comment">#  Create a Flask-RESTPlus API</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@api.route('/hello')                   #  Create a URL route to this resource</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span><span class="params">(Resource)</span>:</span>            <span class="comment">#  Create a RESTful resource</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span>                     <span class="comment">#  Create GET endpoint</span></span><br><span class="line">        <span class="keyword">return</span> {<span class="string">'hello'</span>: <span class="string">'world'</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)                <span class="comment">#  Start a development server</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="4-2应用目录结构规划"><a href="#4-2应用目录结构规划" class="headerlink" title="4.2应用目录结构规划"></a>4.2应用目录结构规划</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">├── api                         #</span><br><span class="line">│   ├── blog                    #  Blog-related API directory</span><br><span class="line">│   │   ├── business.py         #</span><br><span class="line">│   │   ├── endpoints           #  API namespaces and REST methods</span><br><span class="line">│   │   │   ├── categories.py   #</span><br><span class="line">│   │   │   └── posts.py        #</span><br><span class="line">│   │   ├── parsers.py          #  Argument parsers</span><br><span class="line">│   │   └── serializers.py      #  Output serializers</span><br><span class="line">│   └── restplus.py             #  API bootstrap file</span><br><span class="line">├── app.py                      #  Application bootstrap file</span><br><span class="line">├── database                    #</span><br><span class="line">│   └── models.py               #  Definition of SQLAlchemy models</span><br><span class="line">├── db.sqlite                   #</span><br><span class="line">└── settings.py                 #  Global app settings</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><code>Rest API</code> 定义放在文件<code>rest_api_demo/api/restplus.py</code><br><code>Flask app</code> 的配置和实例化放在文件<code>rest_api_demo/app.py</code></p>
</blockquote>
<p>重点注意的是<code>app.py</code>文件的<code>initialize_app</code>函数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_app</span><span class="params">(flask_app)</span>:</span></span><br><span class="line">    configure_app(flask_app)</span><br><span class="line"></span><br><span class="line">    blueprint = Blueprint(<span class="string">'api'</span>, __name__, url_prefix=<span class="string">'/api'</span>)</span><br><span class="line">    api.init_app(blueprint)</span><br><span class="line">    api.add_namespace(blog_posts_namespace)</span><br><span class="line">    api.add_namespace(blog_categories_namespace)</span><br><span class="line">    flask_app.register_blueprint(blueprint)</span><br><span class="line"></span><br><span class="line">    db.init_app(flask_app)</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<ol>
<li><code>Blueprint</code> 注册<code>/api</code>URL前缀的路由；这样就可以通过前缀区分不同部分或不同版本的api。 </li>
<li><code>add_namespace</code> api本身也分为多个namespace， 每个ns都有自己的<code>URL-prefix</code>，在<code>/api/blog/endpoints</code>目录下配置。</li>
</ol>
</blockquote>
<h2 id="4-3-定义-API"><a href="#4-3-定义-API" class="headerlink" title="4.3 定义 API"></a>4.3 定义 API</h2><p><code>api</code>=<code>namespace</code>+<code>resource</code>+<code>method</code></p>
<p><code>rest_api_demo/api/blog/endpoints/categories.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">ns = api.namespace(<span class="string">'blog/categories'</span>, description=<span class="string">'Operations related to blog categories'</span>)</span><br><span class="line">                                                                        <span class="comment">#</span></span><br><span class="line">                                                                        <span class="comment">#</span></span><br><span class="line"><span class="meta">@ns.route('/')                                                          #</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryCollection</span><span class="params">(Resource)</span>:</span>                                     <span class="comment">#</span></span><br><span class="line">                                                                        <span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span>                                                      <span class="comment"># 1. Retrieve a list of categories</span></span><br><span class="line">        <span class="string">"""Returns list of blog categories."""</span>                          <span class="comment"># curl -X GET 'http://localhost:8888/api/blog/categories/'</span></span><br><span class="line">        <span class="keyword">return</span> get_all_categories()                                     <span class="comment">#</span></span><br><span class="line">                                                                        <span class="comment">#</span></span><br><span class="line"><span class="meta">    @api.response(201, 'Category successfully created.')                #</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span>                                                     <span class="comment"># 2. Create a new category</span></span><br><span class="line">        <span class="string">"""Creates a new blog category."""</span>                              <span class="comment"># POST 'http://localhost:8888/api/blog/categories/'</span></span><br><span class="line">        create_category(request.json)                                   <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">201</span>                                                <span class="comment">#</span></span><br><span class="line">                                                                        <span class="comment">#</span></span><br><span class="line">                                                                        <span class="comment">#</span></span><br><span class="line"><span class="meta">@ns.route('/&lt;int:id&gt;')                                                  #</span></span><br><span class="line"><span class="meta">@api.response(404, 'Category not found.')                               #</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryItem</span><span class="params">(Resource)</span>:</span>                                           <span class="comment">#</span></span><br><span class="line">                                                                        <span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, id)</span>:</span>                                                  <span class="comment"># 3. Retrieve category with ID 1</span></span><br><span class="line">        <span class="string">"""Returns details of a category."""</span>                            <span class="comment"># GET 'http://localhost:8888/api/blog/categories/1'</span></span><br><span class="line">        <span class="keyword">return</span> get_category(id)                                         <span class="comment">#</span></span><br><span class="line">                                                                        <span class="comment">#</span></span><br><span class="line"><span class="meta">    @api.response(204, 'Category successfully updated.')                #</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, id)</span>:</span>                                                  <span class="comment"># 4. Update the category with ID 1</span></span><br><span class="line">        <span class="string">"""Updates a blog category."""</span>                                  <span class="comment"># PUT 'http://localhost:8888/api/blog/categories/1'</span></span><br><span class="line">        update_category(id, request.json)                               <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">204</span>                                                <span class="comment">#</span></span><br><span class="line">                                                                        <span class="comment">#</span></span><br><span class="line"><span class="meta">    @api.response(204, 'Category successfully deleted.')                #</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, id)</span>:</span>                                               <span class="comment"># 5. Delete the category with ID 1</span></span><br><span class="line">        <span class="string">"""Deletes blog category."""</span>                                    <span class="comment"># DELETE 'http://localhost:8888/api/blog/categories/1'</span></span><br><span class="line">        delete_category(id)                                             <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">204</span>                                                <span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<ol>
<li><code>api.namespace()</code> 创建某个<code>URL-prefix</code>的namespace， 其中<code>description</code>的内容会在api文档中。</li>
<li><code>@ns.route()</code> 将URLs与函数绑定，可以指定路径参数。比如<code>@ns.route('/&lt;int:id&gt;')</code>。<code>string:</code>(default),<code>path:</code>,<code>int:</code>,<code>float:</code>,<code>uuid:</code></li>
<li>每个<code>Resource</code> 都是一个类，类包含的方法与<code>http-method</code>对应。包括：<code>get</code>, <code>post</code>, <code>put</code>, <code>delete</code>, <code>patch</code>, <code>options</code>, <code>head</code>.</li>
<li><code>@api.response</code> 声明每个方法的返回<code>状态码</code>+<code>信息</code></li>
</ol>
</blockquote>
<p>上面代码生成的api文档页面如下图：</p>
<p><img alt="restplus-api-method-details" data-src="https://tvax3.sinaimg.cn/large/006hT4w1ly1garlv7336jj30l40jh76m.jpg"></p>
<p>Swagger UI文档还包括一个可以设置参数的表单。如果需要一个请求体，它的格式可以指定。 点击<code>Try it out！</code>按钮，将会给后端服务发请求，并显示response信息。</p>
<h2 id="4-4-参数-method校验"><a href="#4-4-参数-method校验" class="headerlink" title="4.4 参数+method校验"></a>4.4 参数+method校验</h2><p>上面提到了在<code>path</code>中用<code>&lt;&gt;</code>传参，下面介绍:</p>
<blockquote>
<ol>
<li>request请求中传参(?xx=xxx)</li>
<li>headers中传参(–heads HOST=xxx)</li>
<li>form表单中(in request body)<br>所以需要用到<code>RequestParser</code>对象，可以通过函数<code>add_argument()</code>来声明参数以及参数的类型。</li>
</ol>
</blockquote>
<h3 id="4-4-1-通用配置"><a href="#4-4-1-通用配置" class="headerlink" title="4.4.1 通用配置"></a>4.4.1 通用配置</h3><p><code>rest_api_demo/api/blog/parsers.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> reqparse</span><br><span class="line"></span><br><span class="line">pagination_arguments = reqparse.RequestParser()</span><br><span class="line">pagination_arguments.add_argument(<span class="string">'page'</span>, type=int, required=<span class="literal">False</span>)</span><br><span class="line">pagination_arguments.add_argument(<span class="string">'per_page'</span>, type=int, required=<span class="literal">False</span>,</span><br><span class="line">                                  choices=[<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>], default=<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>然后通过装饰器<code>@api.expect</code>，将这个parser与方法绑定。</p>
<p><code>rest_api_demo/api/blog/endpoints/posts.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ns.route('/')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsCollection</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @api.expect(pagination_arguments, validate=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br></pre></td></tr></tbody></table></figure>
<p>配置了参数校验后，Swagger-UI会显示一个form表单来校验参数。</p>
<blockquote>
<ol>
<li>参数校验可以通过<code>@api.expect</code>的参数<code>validate</code>来启用或关闭。(分别在每个方法上做设置)</li>
<li>全局启用/关闭 <code>app.config['RESTPLUS_VALIDATE'] = True</code>。(在开发时，debug使用)</li>
</ol>
</blockquote>
<h3 id="4-4-2-add-argument参数说明"><a href="#4-4-2-add-argument参数说明" class="headerlink" title="4.4.2 add_argument参数说明"></a>4.4.2 <a href="https://flask-restplus.readthedocs.io/en/stable/api.html#module-flask_restplus.reqparse" target="_blank" rel="noopener"><code>add_argument</code>参数说明</a></h3><ol>
<li><p><code>type</code> allowed value： <code>int</code>,<code>str</code>,<code>bool</code>.</p>
</li>
<li><p><code>location</code> 声明参数在哪儿, allowed value： <code>headers</code>, <code>form</code>, <code>json</code>…</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'args1'</span>, location=<span class="string">'headers'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'args2'</span>, location=<span class="string">'form'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'args2'</span>, location=<span class="string">'json'</span>)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><code>action</code> 多值参数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'args1'</span>, type=int, action=<span class="string">'append'</span>, required=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><code>choise</code> 可选值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">pagination_arguments.add_argument(<span class="string">'pages'</span>, choices=[<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="4-5-json对象的值校验和说明"><a href="#4-5-json对象的值校验和说明" class="headerlink" title="4.5 json对象的值校验和说明"></a>4.5 json对象的值校验和说明</h2><h3 id="4-5-1-通用配置"><a href="#4-5-1-通用配置" class="headerlink" title="4.5.1 通用配置"></a>4.5.1 通用配置</h3><p>通过<code>api.model()</code>列出所有期望的字段来定义对象的格式。每个字段都有一个关联的类型(e.g. <code>String</code>, <code>Integer</code>, <code>DateTime</code>)</p>
<p><code>rest_api_demo/api/blog/serializers.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> fields</span><br><span class="line"><span class="keyword">from</span> rest_api_demo.api.restplus <span class="keyword">import</span> api</span><br><span class="line"></span><br><span class="line">blog_post = api.model(<span class="string">'Blog post'</span>, {</span><br><span class="line">    <span class="string">'id'</span>: fields.Integer(description=<span class="string">'The unique identifier of a blog post'</span>),</span><br><span class="line">    <span class="string">'title'</span>: fields.String(required=<span class="literal">True</span>, description=<span class="string">'Article title'</span>),</span><br><span class="line">    <span class="string">'body'</span>: fields.String(required=<span class="literal">True</span>, description=<span class="string">'Article content'</span>),</span><br><span class="line">    <span class="string">'status'</span>: fields.String(required=<span class="literal">True</span>, enum=[<span class="string">'DRAFT'</span>, <span class="string">'PUBLISHED'</span>, <span class="string">'DELETED'</span>]),</span><br><span class="line">    <span class="string">'pub_date'</span>: fields.DateTime,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<p>将定义的校验model绑定给指定的<code>Resource</code>, 通过<code>@api.expect(blog_post)</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ns.route('/')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostCollection</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @api.response(201, 'Blog post successfully created.')</span></span><br><span class="line"><span class="meta">    @api.expect(blog_post)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-5-2-fields参数说明"><a href="#4-5-2-fields参数说明" class="headerlink" title="4.5.2 fields参数说明"></a>4.5.2 <a href="https://github.com/noirbizarre/flask-restplus/blob/0.9.2/flask_restplus/fields.py#L355-L609" target="_blank" rel="noopener"><code>fields</code>参数说明</a></h3><h4 id="公共参数选项："><a href="#公共参数选项：" class="headerlink" title="公共参数选项："></a>公共参数选项：</h4><blockquote>
<ol>
<li><code>required</code>: <code>True/False</code>是否必填项;</li>
<li><code>default</code>: 该字段的默认值;</li>
<li><code>description</code>: 该字段说明(会在SwaggerUI中显示);</li>
<li><code>example</code>: 字段值示例(会在SwaggerUI中显示);</li>
</ol>
</blockquote>
<h4 id="更具体的校验参数选项"><a href="#更具体的校验参数选项" class="headerlink" title="更具体的校验参数选项"></a>更具体的校验参数选项</h4><h5 id="字符串类型-包括String-："><a href="#字符串类型-包括String-：" class="headerlink" title="字符串类型(包括String)："></a>字符串类型(包括<code>String</code>)：</h5><blockquote>
<p><code>min_length</code> 和 <code>max_length</code>: 字符串最大或最小长度。<br><code>pattern</code>: 正则表达式。<br>举例(字符串长度5&lt;=len&lt;=200, 必填, 正则: 小写字母+数字+符号’-‘)：</p>
</blockquote>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'slug'</span>: fields.String(required=<span class="literal">True</span>, pattern=<span class="string">'^[a-z0-9-]+$'</span>, min_length=<span class="number">5</span>, max_length=<span class="number">200</span>)</span><br></pre></td></tr></tbody></table></figure>

<h5 id="数字类型-包括Integer-Float-Fixed-Arbitrary-："><a href="#数字类型-包括Integer-Float-Fixed-Arbitrary-：" class="headerlink" title="数字类型(包括Integer,Float,Fixed,Arbitrary)："></a>数字类型(包括<code>Integer</code>,<code>Float</code>,<code>Fixed</code>,<code>Arbitrary</code>)：</h5><blockquote>
<ol>
<li><code>min</code> 和 <code>max</code>: 该字段最大值或最小值, 包括边界值, 即 <code>min</code>&lt;<code>value</code>&lt;<code>max</code>;</li>
<li><code>exclusiveMin</code> and <code>exclusiveMax</code>: 该字段最大值或最小值, 但不包过边界值, 即 <code>exclusiveMin</code>&lt;<code>value</code>&lt;<code>exclusiveMax</code>;</li>
<li><code>multiple</code>: 该字段必须是多值;</li>
</ol>
</blockquote>
<h4 id="嵌套类型配置"><a href="#嵌套类型配置" class="headerlink" title="嵌套类型配置"></a>嵌套类型配置</h4><ol>
<li><code>API-model</code>的一个字段可以使用另一个<code>API-model</code>作为它的期望值。然后提供一个JSON对象作为该字段的有效值。</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'details'</span>: fields.Nested(blog_post_details)</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><code>API-model</code>的一个字段是一个值列表，甚至是一个嵌套对象列表。</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'item_ids'</span>: fields.List(fields.Integer),</span><br><span class="line"><span class="string">'items'</span>: fields.List(fields.Nested(blog_post))</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Model继承"><a href="#Model继承" class="headerlink" title="Model继承"></a>Model继承</h4><p>相似的<code>API-model</code>可以使用继承来扩展带有其他字段的<code>API-model</code>的定义。在下面的示例中，父类：通用分页API模型<code>pagination</code>，子类：更具体的博客文章分页<code>page_of_blog_posts</code>。使用<code>api.inherit()</code>方法继承父类。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">pagination = api.model(<span class="string">'A page of results'</span>, {</span><br><span class="line">    <span class="string">'page'</span>: fields.Integer(description=<span class="string">'Number of this page of results'</span>),</span><br><span class="line">    <span class="string">'pages'</span>: fields.Integer(description=<span class="string">'Total number of pages of results'</span>),</span><br><span class="line">    <span class="string">'per_page'</span>: fields.Integer(description=<span class="string">'Number of items per page of results'</span>),</span><br><span class="line">    <span class="string">'total'</span>: fields.Integer(description=<span class="string">'Total number of results'</span>),</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">page_of_blog_posts = api.inherit(<span class="string">'Page of blog posts'</span>, pagination, {</span><br><span class="line">    <span class="string">'items'</span>: fields.List(fields.Nested(blog_post))</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-6-处理输出json对象"><a href="#4-6-处理输出json对象" class="headerlink" title="4.6 处理输出json对象"></a>4.6 处理输出json对象</h2><p>可以根据上文提的 <code>API-model</code>定义，通过方法<code>@api.marshal_with(model)</code>将生成一个与<code>model</code>定义相同的json对象返回。值对应可以是两种方式：</p>
<blockquote>
<ol>
<li>被装饰函数返回一个<code>object</code>，<code>object</code>具有跟model中字段名相同的属性;</li>
<li>被装饰函数返回一个<code>dict</code>，<code>dict</code>具有跟model中字段名相同的<code>key</code>;</li>
</ol>
</blockquote>
<p>例如，方法返回与<code>API-model</code>具有相同字段的<code>SQLAlchemy ORM对象</code>。</p>
<p><code>rest_api_demo/api/blog/endpoints/categories.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ns.route('/&lt;int:id&gt;')</span></span><br><span class="line"><span class="meta">@api.response(404, 'Category not found.')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryItem</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @api.marshal_with(category_with_posts)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns a category with a list of posts.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Category.query.filter(Category.id == id).one()</span><br></pre></td></tr></tbody></table></figure>
<p>如果返回值是<code>list</code>, 使用装饰器<code>@api.marshal_list_with(model)</code>.</p>
<p><code>attribute</code>: 显式声明值来自于函数返回对象的哪个字段;</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'firstName'</span>: fields.String(attribute=<span class="string">'first_name'</span>),</span><br></pre></td></tr></tbody></table></figure>

<p>通过<code>attribute</code>参数，可以提取嵌套在对象结构深处的值:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'firstName'</span>: fields.String(attribute=<span class="string">'user.first_name'</span>),</span><br></pre></td></tr></tbody></table></figure>

<p>更复杂的情形, 使用<code>lambda</code>函数提取值:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'fullName'</span>: fields.String(attribute=<span class="keyword">lambda</span> x: <span class="string">'{} {}'</span>.format(x.first_name, x.last_name)),</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-7-处理Errors"><a href="#4-7-处理Errors" class="headerlink" title="4.7 处理Errors"></a>4.7 处理<code>Errors</code></h2><p>通过函数<code>api.abort()</code>抛出异常</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">api.abort(code=<span class="number">400</span>, message=<span class="string">"Sorry, Dave. I'm afraid I can't do that."</span>)</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>如果没有显式地自己处理错误，Flask将捕获异常并将其转换为一个HTTP 500错误页面。</p>
</blockquote>
<p>通过装饰器<code>@api.errorhandler</code>重写默认的错误处理函数<br><code>rest_api_demo/api/restplus.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@api.errorhandler(NoResultFound)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">database_not_found_error_handler</span><span class="params">(e)</span>:</span></span><br><span class="line">    log.warning(traceback.format_exc())</span><br><span class="line">    <span class="keyword">return</span> {<span class="string">'message'</span>: <span class="string">'A database result was required but none was found.'</span>}, <span class="number">404</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>Flask debug模式下，上面<code>default_error_handler</code>不会生效。异常只会触发<code>Werkzeug interactive debugger</code>页面。</p>
</blockquote>
<h2 id="4-8-重置数据库"><a href="#4-8-重置数据库" class="headerlink" title="4.8 重置数据库"></a>4.8 重置数据库</h2><p>如果删除数据库<code>db.sqlite</code>文件或只是想将数据库重置为空状态，可以在Python控制台中输入以下命令。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> rest_api_demo.app <span class="keyword">import</span> initialize_app, app</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> rest_api_demo.database <span class="keyword">import</span> reset_database</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>initialize_app(app)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> app.app_context():</span><br><span class="line"><span class="meta">... </span>    reset_database()</span><br></pre></td></tr></tbody></table></figure>




<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://shop.oreilly.com/product/0636920021575.do" target="_blank" rel="noopener">Rest API Design Rulebook</a><br><a href="https://flask-restplus.readthedocs.io/en/stable/swagger.html#export-swagger-specifications" target="_blank" rel="noopener">flask-restplus stable文档</a><br><a href="https://flask-restplus.readthedocs.io/en/stable/swagger.html#export-swagger-specifications" target="_blank" rel="noopener">api export to Postman</a><br><a href="https://flask-restplus.readthedocs.io/en/stable/postman.html" target="_blank" rel="noopener">api export to PostMan</a></p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>RestAPI</tag>
        <tag>Flask</tag>
        <tag>Swagger</tag>
        <tag>Web Develop</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令备忘录</title>
    <url>/2020/06/22/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2019-06-22-hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<html><head></head><body><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><strong><a href="https://oakland.github.io/2016/05/02/hexo-%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E4%B8%80%E7%AF%87%E6%96%B0%E7%9A%84post/" target="_blank" rel="noopener">Hexo生成Post: post、page、draft</a></strong></p>
<p><a href="https://novnan.github.io/Hexo/hexo-draft/" target="_blank" rel="noopener">Hexo文章保存为草稿</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">Hexo+Github博客搭建小白教程</a></p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>个人工具</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>为博客添加 Gitalk 评论插件</title>
    <url>/2017/12/19/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2019-06-23-hexo-%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于 <strong>Disqus</strong> 对于国内网路的支持十分糟糕，很多人反映 Disqus 评论插件一直加载不出来。而我一直是处于翻墙状态的~（话说你们做程序员的都不翻墙用Google的吗😅，哈哈，吐嘈下）</p>
<p>针对这个问题，我添加了<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a> 评论插件。在此，非常感谢 <a href="https://github.com/FeDemo" target="_blank" rel="noopener">@FeDemo</a> 的推荐 。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Gitalk-评论插件"><a href="#Gitalk-评论插件" class="headerlink" title="Gitalk 评论插件"></a>Gitalk 评论插件</h2><p>首先来看看 Gitalk 的界面和功能：</p>
<p><a href="https://gitalk.github.io/" target="_blank" rel="noopener"><img alt="" data-src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm4u3j0lmj30nk0kl40i.jpg"></a></p>
<p>gitalk 使用 Github 帐号登录，界面干净整洁，最喜欢的一点是支持 <code>MarkDown语法</code>。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Gitalk 是一个利用 Github API,基于 Github issue 和 Preact 开发的评论插件，在 Gitalk 之前还有一个 <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a> 插件也是基于这个原理开发的,不过 gitment 已经很久没人维护了。</p>
<p>可以看到在 gitalk 的评论框进行评论时，其实就是在对应的 issue 上提问题。</p>
<p><img alt="gitalk评论框" data-src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm5916av1j30i209rab7.jpg"></p>
<p><img alt="Github issue" data-src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm596ggkfj30mx0gfjuk.jpg"></p>
<h2 id="集成-Gitalk"><a href="#集成-Gitalk" class="headerlink" title="集成 Gitalk"></a>集成 Gitalk</h2><p>到这里，你应该对 Gitalk 有个大致的了解了，现在，开始集成 gitalk 插件吧。</p>
<p>将这段代码插入到你的网站：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Gitalk 评论 start  --&gt;</span></span><br><span class="line">{% if site.gitalk.enable %}</span><br><span class="line"><span class="comment">&lt;!-- Link Gitalk 的支持文件  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/gitalk@latest/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk({</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// gitalk的主要参数</span></span></span><br><span class="line"><span class="javascript">		clientID: <span class="string">`Github Application clientID`</span>,</span></span><br><span class="line"><span class="javascript">		clientSecret: <span class="string">`Github Application clientSecret`</span>,</span></span><br><span class="line"><span class="javascript">		repo: <span class="string">`存储你评论 issue 的 Github 仓库名`</span>,</span></span><br><span class="line"><span class="actionscript">		owner: <span class="string">'Github 用户名'</span>,</span></span><br><span class="line"><span class="actionscript">		admin: [<span class="string">'Github 用户名'</span>],</span></span><br><span class="line"><span class="actionscript">		id: <span class="string">'页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签'</span>,</span></span><br><span class="line">    </span><br><span class="line">    });</span><br><span class="line"><span class="actionscript">    gitalk.render(<span class="string">'gitalk-container'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">{% endif %}</span><br><span class="line"><span class="comment">&lt;!-- Gitalk end --&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>我们需要关心的就是配置下面几个参数：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">clientID:</span> <span class="string">`Github</span> <span class="string">Application</span> <span class="string">clientID`,</span></span><br><span class="line"><span class="attr">clientSecret:</span> <span class="string">`Github</span> <span class="string">Application</span> <span class="string">clientSecret`,</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">`Github</span> <span class="string">仓库名`,//存储你评论</span> <span class="string">issue</span> <span class="string">的</span> <span class="string">Github</span> <span class="string">仓库名（建议直接用</span> <span class="string">GitHub</span> <span class="string">Page</span> <span class="string">的仓库名）</span></span><br><span class="line"><span class="attr">owner:</span> <span class="string">'Github 用户名'</span><span class="string">,</span></span><br><span class="line"><span class="attr">admin:</span> <span class="string">['Github</span> <span class="string">用户名'],</span> <span class="string">//这个仓库的管理员，可以有多个，用数组表示，一般写自己,</span></span><br><span class="line"><span class="attr">id:</span> <span class="string">'window.location.pathname'</span><span class="string">,</span> <span class="string">//页面的唯一标识，gitalk</span> <span class="string">会根据这个标识自动创建的issue的标签,我们使用页面的相对路径作为标识</span></span><br></pre></td></tr></tbody></table></figure>
<p>当然，还有其他很多参数，有兴趣的话可以 <a href="https://github.com/gitalk/gitalk#options" target="_blank" rel="noopener"> 点这里</a>。</p>
<p>比如我就增加了这个全屏遮罩的参数。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">distractionFreeMode: true,</span><br></pre></td></tr></tbody></table></figure>

<h2 id="创建-Github-Application"><a href="#创建-Github-Application" class="headerlink" title="创建 Github Application"></a>创建 Github Application</h2><p>Gitalk 需要一个 <strong>Github Application</strong>，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里申请</a>。</p>
<p>填写下面参数：</p>
<p><img alt="" data-src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jaib6fj30jo0gaacs.jpg"></p>
<p>点击创建</p>
<p>获取 <code>Client ID</code> 和 <code>Client Secret</code> 填入你的我们 Gitalk 参数中</p>
<p><img alt="" data-src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jrzff6j30lc0budhp.jpg"></p>
<p>当你参数都设置好，将代码推送到 Github 仓库后，没什么问题的话，当你点击进入你的博客页面后就会出现评论框了。</p>
<p>当你用 github 帐号登录（管理员），并且第一次加载该会比较慢，因为第一次加载会自动在你 <code>repo</code> 的仓库下创建对应 issue。</p>
<p>比如说这样：</p>
<p><img alt="" data-src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmm867n88cj30l809mjse.jpg"></p>
<p><img alt="" data-src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmm8a0i0jkj30rr0ct42t.jpg"></p>
<p>当然，你也可以手动创建issue作为 gitalk评论容器。只要有 <code>Gitalk</code> 标签 和 <code>id</code> 对应标签就可以。比我我自己创建的 <a href="https://github.com/qiubaiying/qiubaiying.github.io/issues/38" target="_blank" rel="noopener">About issue</a> 。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最后说几句吐嘈几句， Gitalk 需要你点开每篇文章的页面才会创建对应的 issue,对我来说真是个糟糕的体验（文章有点多~）。</p>
<p>当然，也有解决办法，这篇 <a href="https://draveness.me/git-comments-initialize" target="_blank" rel="noopener">自动初始化 Gitalk 和 Gitment 评论</a>，就解决了这个问题。</p>
<p>最后，<a href="https://github.com/qiubaiying/qiubaiying.github.io" target="_blank" rel="noopener">给个 star 吧</a>~</p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>简记 Ansible 使用</title>
    <url>/2019/12/13/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2019-12-13-Ansible-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-ubuntu-18-04-install-Ansible"><a href="#1-ubuntu-18-04-install-Ansible" class="headerlink" title="1. ubuntu 18.04 install Ansible"></a>1. ubuntu 18.04 install Ansible</h1><p><code>software-properties-common</code> package installed. This software will make it easier to manage this and other independent software repositories:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install software-properties-common</span><br></pre></td></tr></tbody></table></figure>

<p>Then add the Ansible PPA by typing the following command:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt-add-repository ppa:ansible/ansible</span><br></pre></td></tr></tbody></table></figure>

<p>install Ansible</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install ansible</span><br></pre></td></tr></tbody></table></figure>

<h1 id="2-config-ssh-access-to-ansible-hosts"><a href="#2-config-ssh-access-to-ansible-hosts" class="headerlink" title="2. config ssh access to ansible-hosts"></a>2. config ssh access to ansible-hosts</h1><h1 id="3-ansible-注意"><a href="#3-ansible-注意" class="headerlink" title="3. ansible 注意"></a>3. ansible 注意</h1><ol>
<li>ansible 主机需要安装 pip install netaddr，因为 playbook 依赖</li>
<li>ansible 主机需要安装 apt install sshpass ，因为使用密码连接</li>
<li>ansible 主机需要安装 apt install zip unzip 因为 playbook 需要解压文件</li>
<li>ansible 主机需要配置 ansible 的<code>host_key_checking</code>(/etc/ansible/ansible.cfg)为<code>False</code>，因为所有主机都是第一次连接，还没有主机指纹在<code>known_hosts</code>中，需要忽略</li>
</ol>
<h1 id="4-测试Ansible-Hosts连通性方法"><a href="#4-测试Ansible-Hosts连通性方法" class="headerlink" title="4. 测试Ansible-Hosts连通性方法"></a>4. 测试Ansible-Hosts连通性方法</h1><ol>
<li><code>vi /etc/ansible/hosts</code>追加以下内容，IP地址即为要测试的机器<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[test]</span></span><br><span class="line">10.8.2.95 ansible_ssh_user=root ansible_ssh_pass=Qloud@123 docker_registry=true</span><br></pre></td></tr></tbody></table></figure></li>
<li>执行以下命令，用<code>ping</code>模块进行测试。<code>test</code>为上面为hosts配置的主机组名字。<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ansible -i /etc/ansible/hosts <span class="built_in">test</span> -m ping</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h1 id="5-Ansible-的一些约定"><a href="#5-Ansible-的一些约定" class="headerlink" title="5. Ansible 的一些约定"></a>5. Ansible 的一些约定</h1><ol>
<li><p>inventory 主机清单<br> <code>-i</code>参数指定主机清单。例如<code>ansible-playbook -i inventory.py nomad.yaml</code></p>
<p>1.1 静态inventory，通过静态配置文件<code>inventory.json</code>配置。</p>
<p>1.2 动态inventory，通过动态生成脚本<code>inventory.py</code>生成。</p>
</li>
<li><p>roles目录必须与playbook文件同级，并且文件夹名必须为<code>roles</code>。playbook文件中通过<code>roles</code>下的各个文件夹名字引用role<br> 例如 </p>
 <figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">mirrors</span> <span class="string">and</span> <span class="string">initialization</span>         </span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span>                                       </span><br><span class="line">  <span class="attr">roles:</span>                                           <span class="comment"># roles/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yum-mirrors</span>                                  <span class="comment">#   |-- yum-mirrors/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">initialization</span>                               <span class="comment">#   |-- initializations/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker-registry</span>                              <span class="comment">#   |-- docker-registry/</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>单个role目录结构说明。</p>
 <figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">├──</span> <span class="string">install_nginx.yml</span>              <span class="comment"># playbook 文件和 roles 目录应该处于平级目录</span></span><br><span class="line"><span class="string">└──</span> <span class="string">roles</span>                          <span class="comment"># 存放所有角色的的目录</span></span><br><span class="line">    <span class="string">└──</span> <span class="string">nginx</span>                      <span class="comment"># nginx 角色</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">├──</span> <span class="string">defaults</span>               <span class="comment"># 设定默认变量</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">│</span>   <span class="string">└──</span> <span class="string">main.yml</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">├──</span> <span class="string">files</span>                  <span class="comment"># 存放由 copy 或 script 模块等调用的文件</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">│</span>   <span class="string">└──</span> <span class="string">index.html</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">├──</span> <span class="string">handlers</span>               <span class="comment"># 触发器任务</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">│</span>   <span class="string">└──</span> <span class="string">main.yml</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">├──</span> <span class="string">meta</span>                   <span class="comment"># 定义当前角色的特殊设定及其依赖关系</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">├──</span> <span class="string">tasks</span>                  <span class="comment"># 定义任务，它是 role 的基本元素</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">│</span>   <span class="string">└──</span> <span class="string">main.yml</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">├──</span> <span class="string">templates</span>              <span class="comment"># templates 模块查找所需要模板文件的目录</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">│</span>   <span class="string">└──</span> <span class="string">nginx.conf.j2</span></span><br><span class="line">    <span class="string">│</span>   <span class="string">└──</span> <span class="string">vars</span>                   <span class="comment"># 定义变量</span></span><br><span class="line">    <span class="string">│</span>       <span class="string">└──</span> <span class="string">main.yml</span></span><br><span class="line">    <span class="string">└──</span> <span class="string">php</span>                        <span class="comment"># php 角色</span></span><br><span class="line">        <span class="string">└──</span> <span class="string">...</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>playbook文件的定义中，优先级: <code>role</code> &gt; <code>task</code>; 如果<code>task-A</code>必须要在某<code>role-B</code>之前执行，需要将<code>task-A</code>封装为<code>role-A</code>，放到<code>role-B</code>之前。</p>
</li>
<li><p><code>task</code>中常用的模块</p>
<table>
<thead>
<tr>
<th>模块名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ping</td>
<td>检查指定节点机器是否还能连通</td>
</tr>
<tr>
<td>command</td>
<td>执行命令模块，可以不填，是ansible默认的模块，命令中无法使用变量，管道。</td>
</tr>
<tr>
<td>shell</td>
<td>启动一个子shell执行命令，执行的命令中有管道或者变量，就需要使用shell模块。</td>
</tr>
<tr>
<td>script</td>
<td>将本机的shell脚本在被管理主机运行</td>
</tr>
<tr>
<td>copy</td>
<td>将本机复制文件到远程位置</td>
</tr>
<tr>
<td>service</td>
<td>用于控制远程主机的服务</td>
</tr>
<tr>
<td>cron</td>
<td>用于管理定时任务</td>
</tr>
<tr>
<td>file</td>
<td>用于远程主机上的文件操作</td>
</tr>
<tr>
<td>yum</td>
<td>使用yum包管理器来管理软件包</td>
</tr>
<tr>
<td>user、group</td>
<td>user、goup分别请求：useradd、userdel、usermod；groupadd、groupdel、groupmod</td>
</tr>
<tr>
<td>filesystem</td>
<td>在块设备上创建文件系统</td>
</tr>
<tr>
<td>get_url</td>
<td>下载文件</td>
</tr>
<tr>
<td>synchronize</td>
<td>同步文件模块</td>
</tr>
</tbody></table>
</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-ubuntu-18-04" target="_blank" rel="noopener">Install Ansible on Ubuntu 18.04</a></p>
<p><a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html" target="_blank" rel="noopener">官方文档</a><br><a href="https://ansible-tran.readthedocs.io/en/latest/docs/intro_inventory.html" target="_blank" rel="noopener">中文文档</a></p>
<p><a href="https://blog.csdn.net/yongchaocsdn/article/details/78750469" target="_blank" rel="noopener">ansible Ad-Hoc命令集</a></p>
<p><a href="https://yangjinheng.github.io/2017/03/20/Linux/Ansible/" target="_blank" rel="noopener">金恒博客</a></p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>运维笔记</tag>
        <tag>Python</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm2018 破解</title>
    <url>/2019/12/13/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2019-12-13-Pycharm-free/</url>
    <content><![CDATA[<html><head></head><body><h1 id="下载补丁文件"><a href="#下载补丁文件" class="headerlink" title="下载补丁文件"></a>下载补丁文件</h1><p><a href="https://pan.baidu.com/s/1mcQM8CLUnweY02ahKEr4PQ" target="_blank" rel="noopener">补丁文件地址：</a></p>
<p>下载补丁文件后放置到任一目录下,建议放在pycharm安装目录, egg: <code>/home/hex/apps/pycharm-2018.3.6/</code></p>
<h1 id="修改pycharm文件-安装目录bin下-pycharm64-vmoptions-和-pycharm-vmoptions-文件末尾追加一下内容"><a href="#修改pycharm文件-安装目录bin下-pycharm64-vmoptions-和-pycharm-vmoptions-文件末尾追加一下内容" class="headerlink" title="修改pycharm文件,安装目录bin下 pycharm64.vmoptions 和 pycharm.vmoptions, 文件末尾追加一下内容"></a>修改pycharm文件,安装目录bin下 <code>pycharm64.vmoptions</code> 和 <code>pycharm.vmoptions</code>, 文件末尾追加一下内容</h1><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># 格式为 -javaagent:补丁的文件地址</span><br><span class="line">-javaagent:/home/hex/apps/pycharm-2018.3.6/JetbrainsCrack-release-enc.jar</span><br></pre></td></tr></tbody></table></figure>

<h1 id="启动pycharm-输入如下-Activation-code"><a href="#启动pycharm-输入如下-Activation-code" class="headerlink" title="启动pycharm, 输入如下 Activation code"></a>启动pycharm, 输入如下 <code>Activation code</code></h1><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ThisCrackLicenseId-{</span><br><span class="line">“licenseId”:”1”,</span><br><span class="line">“licenseeName”:”Hex”,</span><br><span class="line">“assigneeName”:”Hex”,</span><br><span class="line">“assigneeEmail”:”892120992@qq.com”,</span><br><span class="line">“licenseRestriction”:””,</span><br><span class="line">“checkConcurrentUse”:false,</span><br><span class="line">“products”:[</span><br><span class="line">{“code”:”II”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”DM”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”AC”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”RS0”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”WS”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”DPN”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”RC”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”PS”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”DC”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”RM”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”CL”,”paidUpTo”:”2099-12-31”},</span><br><span class="line">{“code”:”PC”,”paidUpTo”:”2099-12-31”}</span><br><span class="line">],</span><br><span class="line">“hash”:”2911276/0”,</span><br><span class="line">“gracePeriodDays”:7,</span><br><span class="line">“autoProlongated”:false}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>个人工具</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04安装SecureCRT.</title>
    <url>/2019/12/26/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2019-12-26-Ubuntu-18-04%E5%AE%89%E8%A3%85SecureCRT/</url>
    <content><![CDATA[<html><head></head><body><h1 id="SecureCRT-SecureFX-8-5-4安装使用"><a href="#SecureCRT-SecureFX-8-5-4安装使用" class="headerlink" title="SecureCRT/SecureFX 8.5.4安装使用"></a>SecureCRT/SecureFX 8.5.4安装使用</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h2><p><a href="https://www.vandyke.com/download/index.html" target="_blank" rel="noopener">官网下载地址</a><br>直接到官网上下载即可，下载过程可能会提示要先注册，直接注册，然后再下载。<br>我直接下载的是最新版secureCRT+secureFX的合体包：scrt-sfx-8.5.4-1942.ubuntu16-64.x86_64.deb</p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>sudo dpkg -i scrt-sfx-8.5.4-1942.ubuntu16-64.x86_64.deb<br>如果安装过程中因为缺少依赖而安装失败，只需要通过命令：apt-get install -f即可完成依赖的安装。</p>
<h2 id="3-破解"><a href="#3-破解" class="headerlink" title="3.破解"></a>3.破解</h2><p>破解文件下载：<a href="https://share.weiyun.com/5Mc38uB" target="_blank" rel="noopener">https://share.weiyun.com/5Mc38uB</a> 密码：yetp32</p>
<p>secureCRT破解</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/bin/SecureCRT 路径如果不知道,请自行find</span></span><br><span class="line">sudo  perl securecrt_forgeek_crack.pl /usr/bin/SecureCRT</span><br></pre></td></tr></tbody></table></figure>
<p>打开SecureCRT，会弹出配置存放路径，点OK，跳出激活界面，还有30天过期什么的。</p>
<pre><code>a. 点Enter License Data，跳出一个文本框，不用输任何东西!!! 直接点下一步

b. 他肯定报错，说license无效，不用管，

c. 点左下角的 Enter Licence Manually, 然后要求输入各种信息，照着上面命令执行完的output信息复制粘贴上去就行。下面是举例:

Name:REIZ
Company:Toyota
Serial Number: 请复制卡号  03-52-039026
License Key:请复制密码  AAS4RS X1MU15 G9S6WV VTA5TV ACXK55 1JKW75 8R8Z5Z PK4FXJ
Issue Date:  08-08-2088</code></pre><p>SecureFX破解</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo perl securefx_forgeek_crack.pl /usr/bin/SecureFX</span><br></pre></td></tr></tbody></table></figure>
<p>打开SecureFX，参考SecureCRT激活步骤.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.52pojie.cn/thread-1000970-1-1.html" target="_blank" rel="noopener">linux破解资源</a><br><a href="https://blog.csdn.net/MrDmmm/article/details/89527261" target="_blank" rel="noopener">Windows破解资源</a></p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>个人工具</tag>
        <tag>Ubuntu</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu系统配置+常用工具使用</title>
    <url>/2020/05/29/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-04-23-Ubuntu-18-04-%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最重要的事: </p>
<h1 id="GoTTY–将终端共享为web应用"><a href="#GoTTY–将终端共享为web应用" class="headerlink" title="GoTTY–将终端共享为web应用"></a>GoTTY–将终端共享为web应用</h1><blockquote>
<p>GoTTY是一个简单的命令行工具，可以将CLI工具转换为web应用程序</p>
</blockquote>
<p><a href="https://github.com/yudai/gotty#quick-sharing-on-tmux" target="_blank" rel="noopener">使用场景</a>：</p>
<ol>
<li>共享ssh   <code>gotty ssh 127.0.0.1</code></li>
<li>共享ssh，并共享session   <code>gotty -w tmux new -s test</code></li>
<li>共享docker，提供一个隔离的环境 <code>gotty -w docker run -it --rm busybox</code></li>
</ol>
<h1 id="Tmux–终端多路复用器"><a href="#Tmux–终端多路复用器" class="headerlink" title="Tmux–终端多路复用器"></a>Tmux–终端多路复用器</h1><blockquote>
<p>通过tmux可以在一个终端上轻松地切换多个程序，分离它们(它们在后台运行)并重新连接到另一个终端.</p>
</blockquote>
<ol>
<li><p>新建 session<br>命令<code>tmux new -s</code> 如 <code>tmux new -s &lt;session-name&gt;</code> </p>
</li>
<li><p>离开 session</p>
<p>命令 <code>tmux detach</code> ； 快捷键 <code>ctrl + b</code> 然后 按 <code>d</code></p>
</li>
<li><p>查看 session 列表</p>
<p>命令<code>tmux ls</code> ；快捷键操作 <code>ctrl + b</code> 然后 按<code>s</code> 列出所有的 session</p>
</li>
<li><p>进入 session</p>
<p>离开 session 之后，有时候我们还需要对某个 session 进行操作，这时候可以通过如下的操作：<br><code>tmux attach -t &lt;session-name&gt;</code></p>
</li>
<li><p>关闭 session</p>
<p>如果需要关闭 session, 可以通过执行如下的命令即可：<br><code>tmux kill-session -t &lt;session-name&gt;</code></p>
</li>
<li><p>切换 session</p>
<p>  执行命令,可以从当前的 session 快速切换到另一个 session：<br>  <code>tmux switch -t</code></p>
</li>
<li><p>重命名 session</p>
<p>   命令<code>tmux rename-session -t</code> 快捷键 <code>ctrl +d</code> 然后 按<code>$</code> 来重命名当前的session 。</p>
</li>
<li><p>切换窗口</p>
<blockquote>
<p>在同一个会话的多个窗口之间可以通过如下快捷键进行切换:</p>
</blockquote>
<p>快捷键<code>ctrl+b</code> 然后 按<code>p</code> (previous的首字母) 切换到上一个window。</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>n</code> (next的首字母) 切换到下一个window。</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>0</code> 切换到0号window，依次类推，可换成任意窗口序号</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>w</code> (windows的首字母) 列出当前session所有window，通过上、下键切换窗口</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>l</code> (字母L的小写)相邻的window切换</p>
<p>快捷键<code>ctrl+b</code>  然后 按<code>&amp;</code></p>
</li>
<li><p>分屏</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>%</code>， 垂直分屏</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>"</code>， 水平分屏</p>
</li>
<li><p>切换pane</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>o</code>， 依次切换当前窗口下的各个pane。</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>Up</code>|<code>Down</code>|<code>Left</code>|<code>Right</code> 根据按箭方向，选择切换到某个pane。</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>Space (空格键)</code>， 对当前窗口下的所有pane重新排列布局，每按一次，换一种样式。</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>z</code> ，最大化当前pane。再按一次后恢复。</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>x</code>，关闭pane：</p>
</li>
<li><p>帮助：</p>
<p>快捷键<code>ctrl+b</code> 然后 按<code>？</code></p>
</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>ubuntu配置<br><a href="https://blog.csdn.net/qq_24406903/article/details/86358105" target="_blank" rel="noopener">ubuntu18.10给应用程序添加快捷键</a><br><a href="https://zhuanlan.zhihu.com/p/46973701" target="_blank" rel="noopener">Linux 让终端走代理的几种方法</a><br>[ubuntu18.04 ]<br><a href="https://askubuntu.com/questions/1031699/open-in-terminal-in-ubuntu-18-04" target="_blank" rel="noopener">安装工具，’Open in Terminal’</a></p>
<p>常用工具使用</p>
<p>破坏性测试工具：<a href="https://github.com/pingcap/chaos-mesh" target="_blank" rel="noopener">chaos-mesh</a></p>
<p>Kafaka客户端工具：<a href="https://github.com/birdayz/kaf" target="_blank" rel="noopener">kaf</a></p>
<p>k8s切换集群、命名空间工具：<a href="https://github.com/ahmetb/kubectx" target="_blank" rel="noopener">kubectx</a>    <a href="https://blog.csdn.net/qq_19734597/article/details/98175134" target="_blank" rel="noopener">博客</a><br>k8s自动合并kubeconfig工具： <a href="https://blog.csdn.net/weixin_34026276/article/details/89572904" target="_blank" rel="noopener">mergeKubeConfig</a> </p>
<p>完美替换terraform，支持Go和Python：<a href="https://www.pulumi.com/docs/intro/cloud-providers/vsphere/" target="_blank" rel="noopener">pulumi</a></p>
<p>终端共享为WEB应用：<strong><a href="https://github.com/yudai/gotty" target="_blank" rel="noopener">gotty</a></strong></p>
<p>终端共享为WEB应用：<a href="https://github.com/maxmcd/webtty" target="_blank" rel="noopener">webtty</a></p>
<p>终端多路复用器：<a href="https://github.com/tmux/tmux/wiki" target="_blank" rel="noopener">tmux</a></p>
<p>DevOPS工具：<br>独立编译镜像(without connect to docker-daemon)工具: <a href="https://github.com/GoogleContainerTools/kaniko#how-does-kaniko-work" target="_blank" rel="noopener">kaniko</a></p>
<p>文件传输工具: <a href="https://github.com/schollz/croc?utm_source=gold_browser_extension" target="_blank" rel="noopener">croc</a></p>
<p><a href="https://blog.csdn.net/weixin_41585557/article/details/83895584?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-83895584.nonecase&amp;utm_term=linux%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90999" target="_blank" rel="noopener">Linux权限详解</a></p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>个人工具</tag>
        <tag>GoTTY</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu常见安装软件方式(ded、appimage、snap)说明.md</title>
    <url>/2020/04/23/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-04-23-Ubuntu-%E5%B8%B8%E8%A7%81%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%96%B9%E5%BC%8F-ded%E3%80%81appimage%E3%80%81snap-%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最重要的事: </p>
<h1 id="1-安装软件"><a href="#1-安装软件" class="headerlink" title="1.安装软件"></a>1.安装软件</h1><h2 id="1-1-通过软件中心安装"><a href="#1-1-通过软件中心安装" class="headerlink" title="1.1 通过软件中心安装"></a>1.1 通过软件中心安装</h2><p><strong>Show Applications &gt;&gt; Search Ubuntu software center</strong>.</p>
<h2 id="1-2-安装-deb文件"><a href="#1-2-安装-deb文件" class="headerlink" title="1.2 安装.deb文件"></a>1.2 安装.deb文件</h2><p><a href="https://www.ubuntupit.com/cant-install-deb-files-ubuntu-heres-possible-ways-install-deb-packages/" target="_blank" rel="noopener">所有安装deb文件的方式</a></p>
<h3 id="1-2-1-双击安装"><a href="#1-2-1-双击安装" class="headerlink" title="1.2.1 双击安装"></a>1.2.1 双击安装</h3><p>双击<code>.deb</code>安装包，进入软件中心安装软件。</p>
<h3 id="1-2-2-dpkg命令安装"><a href="#1-2-2-dpkg命令安装" class="headerlink" title="1.2.2 dpkg命令安装"></a>1.2.2 dpkg命令安装</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">dpkg -i XXX.deb</span><br><span class="line"><span class="comment">## 如果您得到任何依赖项错误，请运行下面的命令。它将修复所有的错误</span></span><br><span class="line">apt install -f</span><br><span class="line"><span class="comment">## 删除应用</span></span><br><span class="line">dpkg -r packagename.deb</span><br><span class="line"><span class="comment">## 重新配置/修复deb安装</span></span><br><span class="line">dpkg-reconfigure packagename</span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-2-3-apt命令安装"><a href="#1-2-3-apt命令安装" class="headerlink" title="1.2.3 apt命令安装"></a>1.2.3 apt命令安装</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## 还有一种方法可以在Ubuntu系统上安装deb文件，apt-get工具。</span></span><br><span class="line"></span><br><span class="line">sudo apt install ./name.deb</span><br></pre></td></tr></tbody></table></figure>



<h2 id="1-3-snap安装"><a href="#1-3-snap安装" class="headerlink" title="1.3 snap安装"></a>1.3 snap安装</h2><p>​        Canonical为在任何Linux发行版上安装应用程序提供了跨平台的解决方案。这是一个通用的包管理系统，它提供了在任何Linux系统上运行软件所需的所有依赖项和库。</p>
<p>​        Ubuntu18.04之后都默认支持Snaps包。如果是Ubuntu 16.04和更老的版本环境，则在终端中运行以下命令来安装Snap包管理环境。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install snapd</span><br></pre></td></tr></tbody></table></figure>

<p>执行以下命令，通过snap安装软件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo snap install &lt;package&gt;</span><br></pre></td></tr></tbody></table></figure>



<h2 id="1-4-安装AppImage包"><a href="#1-4-安装AppImage包" class="headerlink" title="1.4 安装AppImage包"></a>1.4 安装AppImage包</h2><p>​        Deb软件包和RPM文件格式分别用于在Debian或Ubuntu和基于Fedora / SUSE的Linux发行版上安装软件。 对于应用程序开发人员来说，存在一个问题，他们必须为各种Linux发行版维护多个软件包。 为了克服这个问题，AppImage出现了，它为所有Linux发行版提供了通用的软件包管理系统。<br>​        AppImage文件格式类似于Windows系统中使用的.exe文件。但随着。AppImage格式，没有提取或安装，你删除AppImage，软件就会从Ubuntu中删除，双击AppImage就会运行该应用程序。</p>
<p>运行软件包，只用通过下面三步：</p>
<ul>
<li>下载<code>.appimage</code>格式的软件包。</li>
<li>给次文件可执行权限。点击软件&gt;&gt;属性&gt;&gt;权限标签&gt;&gt;使其可执行，检查允许作为程序执行文件。</li>
<li>双击运行。</li>
</ul>
<h3 id="1-5-通过apt命令安装"><a href="#1-5-通过apt命令安装" class="headerlink" title="1.5 通过apt命令安装"></a>1.5 通过apt命令安装</h3><p>​        Ubuntu Linux上安装软件的另一种简单方法。就像从Ubuntu软件中心安装软件一样，命令行也类似于它。唯一不同的是Ubuntu软件中心是基于图形用户界面，apt命令是基于命令行界面。许多软件都提供了apt命令来安装软件 。</p>
<p>​       例如，Chromium浏览器有两种方式，Ubuntu软件中心和apt命令，可以在Ubuntu上安装它。如果你想安装它，那么去Ubuntu软件中心，通过关键字Chromium进行搜索，或者在终端中输入这个简单的apt命令。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## 创建应用</span></span><br><span class="line">sudo apt install -y chromium-browser</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除应用</span></span><br><span class="line">sudo apt chromium-browser</span><br></pre></td></tr></tbody></table></figure>



<h3 id="1-6-通过PPA安装应用"><a href="#1-6-通过PPA安装应用" class="headerlink" title="1.6 通过PPA安装应用"></a>1.6 通过PPA安装应用</h3><p>​        PPA个人软件包存档是另一种简单的方式来安装软件在Ubuntu Linux。许多开发人员希望直接向最终用户提供他们的软件的最新版本。在这种情况下，PPA可以作为Ubuntu官方软件仓库使用，需要一个月的时间在Ubuntu软件中心包含任何尖端软件。所以很多Ubuntu用户可能不会等待那么长时间，而是可以使用PPA立即安装最新版本。</p>
<p>举例：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:embrosyn/cinnamon</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install cinnamon</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>注意，这里总共遵循了三个命令。第一个用于将PPA知识库添加到系统s源列表中，第二个用于更新软件列表的缓存，最后一个用于使用PPA apt命令安装特定的软件。</p>
</blockquote>
<h1 id="2-常用软件"><a href="#2-常用软件" class="headerlink" title="2. 常用软件"></a>2. 常用软件</h1><p><strong>免费的密码管理软件：</strong> <code>Bitwarden</code></p>
<p><strong>Redis可视化工具：</strong> <code>Redis Desktop Manager</code></p>
<p><strong>OpenLDAP可视化工具：</strong></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.ubuntupit.com/how-to-install-software-in-ubuntu-linux-a-complete-guide-for-newbie/" target="_blank" rel="noopener">ubuntu安装软件说明</a></p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>个人工具</tag>
        <tag>ubuntu</tag>
        <tag>snap</tag>
        <tag>appimage</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04初始开发环境搭建</title>
    <url>/2020/06/10/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-05-10-Ubuntu-18-04%E5%88%9D%E5%A7%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最重要的事: 本文包括</p>
<ol>
<li>初始包安装；</li>
<li>安装翻墙软件；</li>
<li>安装docker；</li>
<li>安装Goland开发环境gvm+golang-1.13；</li>
<li>安装前端环境npm-nodejs-yarn；</li>
<li>docker运行微信；</li>
<li>安装finalshell；</li>
<li>安装Goland并激活；</li>
<li>安装其他，postman、typora、git-client、docker-compose等；</li>
</ol>
<h1 id="初始包安装"><a href="#初始包安装" class="headerlink" title="初始包安装"></a>初始包安装</h1><p>必备工具</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install openssh-server curl unrar net-tools</span><br></pre></td></tr></tbody></table></figure>

<p>为Gland准备</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install libcanberra-gtk-module openjdk-11-jre-headless</span><br></pre></td></tr></tbody></table></figure>

<p>为前端和Golang编译安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install curl git mercurial make binutils bison gcc build-essential</span><br></pre></td></tr></tbody></table></figure>

<p>为搜狗输入法准备</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install fcitx-bin fcitx-table</span><br></pre></td></tr></tbody></table></figure>



<h1 id="显卡驱动（draft）"><a href="#显卡驱动（draft）" class="headerlink" title="显卡驱动（draft）"></a>显卡驱动（draft）</h1><p>卸载已存在驱动旧组件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get purge nvidia*</span><br><span class="line">sudo apt-get autoremove</span><br><span class="line"><span class="comment"># 删除/etc/apt/sources.list.d下的相关记录</span></span><br><span class="line">sudo dpkg -P cuda-repo-ubuntu1404</span><br></pre></td></tr></tbody></table></figure>

<p>下载驱动</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget http://us.download.nvidia.com/XFree86/Linux-x86_64/384.69/NVIDIA-Linux-x86_64-384.69.run</span><br></pre></td></tr></tbody></table></figure>

<p>安装依赖</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 用来编译驱动</span></span><br><span class="line">sudo apt install build-essential</span><br><span class="line"><span class="comment"># 用来支持32位系统(可选)</span></span><br><span class="line">sudo apt install gcc-multilib</span><br><span class="line"><span class="comment"># 用来提供dkms支持</span></span><br><span class="line">sudo apt install dkms</span><br><span class="line"><span class="comment"># 带图形显示的系统必须装，但一般都装过了(因为你已经能看到桌面，说明已经装好了)。server版的机器不用装(可选)</span></span><br><span class="line">sudo apt install xorg xorg-dev</span><br></pre></td></tr></tbody></table></figure>

<p>安装驱动</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get nvidia-375 nvidia-modprobe</span><br></pre></td></tr></tbody></table></figure>



<h1 id="安装配置翻墙软件"><a href="#安装配置翻墙软件" class="headerlink" title="安装配置翻墙软件"></a>安装配置翻墙软件</h1><ol>
<li>下载Qv2ray软件包</li>
<li>下载v2ray核心软件包</li>
<li>集成并配置订阅地址</li>
<li>chrome配置</li>
</ol>
<h1 id="安装配置Docker"><a href="#安装配置Docker" class="headerlink" title="安装配置Docker"></a>安装配置Docker</h1><ol>
<li>卸载机器上docker组件</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>安装Docker</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>解决Docker命令和socket文件权限问题</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将操作的用户加入docker组中</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">${USER}</span></span><br><span class="line"><span class="comment"># 注销重新登录，或者执行下面命令来使改变生效</span></span><br><span class="line">newgrp docker</span><br><span class="line"><span class="comment"># 执行下面命令测试</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li><p>配置国内镜像加速</p>
<p>创建或修改 <code>/etc/docker/daemon.json</code>：</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://1nj0zren.mirror.aliyuncs.com"</span>,</span><br><span class="line">        <span class="string">"https://docker.mirrors.ustc.edu.cn"</span>,</span><br><span class="line">        <span class="string">"http://f1361db2.m.daocloud.io"</span>,</span><br><span class="line">        <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>重启docker服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure>

<p>执行<code>docker info</code>命令，查看配置是否已生效。</p>
</li>
</ol>
<h1 id="GVM-Go1-13"><a href="#GVM-Go1-13" class="headerlink" title="GVM+Go1.13"></a>GVM+Go1.13</h1><ol>
<li>安装GVM</li>
</ol>
<blockquote>
<p>如果下载超时的话，就尝试下搭个梯子。系统proxy不想配的话，就chrome配置好SwitchOMG，通过浏览器下载脚本。</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>安装go1.4</li>
</ol>
<blockquote>
<p>Go 1.5+从工具链中删除了C编译器，并用Go编写的代码替换了它们。 实现了自举。为了编译Go 1.5+，请确保先安装Go 1.4</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gvm install go1.4 -B</span><br><span class="line">gvm use go1.4</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>安装go1.13</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT_BOOTSTRAP=<span class="variable">$GOROOT</span></span><br><span class="line">gvm intall go1.13</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>others</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地版本</span></span><br><span class="line">gvm list</span><br><span class="line"><span class="comment"># 查看所有版本</span></span><br><span class="line">gvm listall</span><br><span class="line"><span class="comment"># 卸载gvm和所有go</span></span><br><span class="line">gvm implode</span><br></pre></td></tr></tbody></table></figure>



<h1 id="前端环境"><a href="#前端环境" class="headerlink" title="前端环境"></a>前端环境</h1><ol>
<li>安装nvm</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载脚本并执行</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br><span class="line"><span class="comment"># 使修改在当前回话生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br><span class="line"><span class="comment"># 检查nvm安装</span></span><br><span class="line">nvm --version</span><br><span class="line"><span class="comment"># list所有可用的nodejs版本(安装lts版本)</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"><span class="comment"># list所有已安装的nodejs</span></span><br><span class="line">nvm list</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>安装nodejs</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvm install 10.15</span><br><span class="line"><span class="comment"># select 安装的nodejs</span></span><br><span class="line">nvm use 10.15</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>安装yarn，npm</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm i -g npm --registry https://registry.npm.taobao.org</span><br><span class="line">npm i -g yarn --registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置yarn</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org -g</span><br><span class="line">yarn config <span class="built_in">set</span> sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br><span class="line"><span class="comment"># 设置npm</span></span><br><span class="line"><span class="built_in">export</span> NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>



<h1 id="运行微信"><a href="#运行微信" class="headerlink" title="运行微信"></a>运行微信</h1><blockquote>
<p>运行时有报错<code>MIT-SHM</code>，增加参数–ipc=host解决问题。</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker container run -d wechat \</span><br><span class="line">  --device /dev/snd \</span><br><span class="line">  -v /tmp/.X11-unix:/tmp/.X11-unix \</span><br><span class="line">  -v <span class="variable">${XDG_RUNTIME_DIR}</span>/pulse/native:<span class="variable">${XDG_RUNTIME_DIR}</span>/pulse/native \</span><br><span class="line">  -v <span class="variable">$HOME</span>:<span class="variable">$HOME</span> \</span><br><span class="line">  -v <span class="variable">$HOME</span>/WeChatFiles:/WeChatFiles \</span><br><span class="line">  -e DISPLAY=unix<span class="variable">${DISPLAY}</span> \</span><br><span class="line">  -e XMODIFIERS=@im=fcitx \</span><br><span class="line">  -e QT_IM_MODULE=fcitx \</span><br><span class="line">  -e GTK_IM_MODULE=fcitx \</span><br><span class="line">  -e AUDIO_GID=`getent group audio | cut -d: -f3` \</span><br><span class="line">  -e VIDEO_GID=`getent group video | cut -d: -f3` \</span><br><span class="line">  -e GID=`id -g` \</span><br><span class="line">  -e UID=`id -u` \</span><br><span class="line">  -e DPI=120 \</span><br><span class="line">  --ipc=host \</span><br><span class="line">  hoking007/wechat:latest</span><br></pre></td></tr></tbody></table></figure>



<h1 id="终端管理工具-–-FinalShell"><a href="#终端管理工具-–-FinalShell" class="headerlink" title="终端管理工具 – FinalShell"></a>终端管理工具 – FinalShell</h1><p>一键安装</p>
<blockquote>
<p>安装路径<code>/usr/lib/FinalShell/</code></p>
<p>配置文件路径<code>/home/$USER/.finalshell/</code></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">rm -f finalshell_install_linux.sh</span><br><span class="line">wget www.hostbuf.com/downloads/finalshell_install_linux.sh</span><br><span class="line">chmod +x finalshell_install_linux.sh</span><br><span class="line">./finalshell_install_linux.sh</span><br></pre></td></tr></tbody></table></figure>



<h1 id="安装配置Goland（draft）"><a href="#安装配置Goland（draft）" class="headerlink" title="安装配置Goland（draft）"></a>安装配置Goland（draft）</h1><p>下载安装包</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol>
<li>安装最新git-client</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:git-core/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># if `add-apt-repository` not found</span></span><br><span class="line"><span class="comment">## ubuntu 14.04</span></span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line"><span class="comment">## ubuntu 13.10 or earlier</span></span><br><span class="line">sudo apt-get install python-software-properties</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>安装最新docker-compose</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. remove the old version:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## If installed via apt-get</span></span><br><span class="line">sudo apt-get remove docker-compose</span><br><span class="line"><span class="comment">## If installed via curl</span></span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">## If installed via pip</span></span><br><span class="line">pip uninstall docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. install latest docker-compose</span></span><br><span class="line"></span><br><span class="line">VERSION=$(curl --silent https://api.github.com/repos/docker/compose/releases/latest | jq .name -r)</span><br><span class="line">DESTINATION=/usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/<span class="variable">${VERSION}</span>/docker-compose-$(uname -s)-$(uname -m) -o <span class="variable">$DESTINATION</span></span><br><span class="line">sudo chmod 755 <span class="variable">$DESTINATION</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>安装typora</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install typora</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>安装postman</li>
</ol>
<p>通过软件中心安装。</p>
<ol start="5">
<li>安装wps</li>
</ol>
<p>通过软件中心安装。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>显卡驱动</p>
<p><a href="https://gist.github.com/wangruohui/df039f0dc434d6486f5d4d098aa52d07" target="_blank" rel="noopener">安装NVIDIA驱动和CUDA在Linux上</a></p>
<p><a href="https://www.maketecheasier.com/install-nvidia-drivers-ubuntu/" target="_blank" rel="noopener">安装最新版NVIDIA驱动在Ubuntu上</a></p>
<p>GVM+GO</p>
<p><a href="https://github.com/moovweb/gvm/tree/6ecd46d8b58c18f2a7bd5a1ab604cb57443cd35c#a-note-on-compiling-go-15" target="_blank" rel="noopener">GVM-github</a></p>
<p><a href="https://github.com/moovweb/gvm/tree/6ecd46d8b58c18f2a7bd5a1ab604cb57443cd35c#debianubuntu" target="_blank" rel="noopener">安装golang的依赖-linux</a></p>
<p><a href="https://github.com/moovweb/gvm#a-note-on-compiling-go-15" target="_blank" rel="noopener">GVM安装go1.4报错”go: command not found”</a></p>
<p>Qv2ray</p>
<p><a href="https://qv2ray.github.io/getting-started/step1.html" target="_blank" rel="noopener">Qv2ray-git博客</a></p>
<p><a href="https://github.com/Alvin9999/new-pac/wiki" target="_blank" rel="noopener">翻墙相关的git项目  new-pac</a></p>
<p>Docker</p>
<p><a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">官方文档-在Ubuntu上安装Docker-Engine</a></p>
<p><a href="https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noopener">官方文档-在Ubuntu非root用户相关配置</a></p>
<p><a href="https://blog.csdn.net/ternence_hsu/article/details/103949074" target="_blank" rel="noopener">Docker hub 设置代理服务器</a></p>
<p>前端</p>
<p><a href="https://hackernoon.com/how-to-install-node-js-on-ubuntu-16-04-18-04-using-nvm-node-version-manager-668a7166b854" target="_blank" rel="noopener">使用nvm安装nodejs</a></p>
<p><a href="https://blog.csdn.net/jaket5219999/article/details/87882747#commentBox" target="_blank" rel="noopener">apt安装nodejs并配置</a></p>
<p>微信</p>
<p><a href="https://zhuanlan.zhihu.com/p/91327545?utm_source=wechat_session" target="_blank" rel="noopener">知乎-wine安装微信和QQ</a></p>
<p><a href="https://github.com/bestwu/docker-wechat" target="_blank" rel="noopener">微信docker镜像-github</a></p>
<p><a href="https://github.com/Hoking007/docker-deepin-wechat" target="_blank" rel="noopener">微信docker镜像-github-高分屏显示问题</a></p>
<p><strong><a href="https://github.com/jessfraz/dockerfiles/issues/359" target="_blank" rel="noopener">微信docker镜像-github-<code>MIT-SHM</code> error solutions</a></strong></p>
<p><a href="https://newtoypia.blogspot.com/2018/07/docker-gui.html" target="_blank" rel="noopener">使用docker运行GUI工具</a></p>
<p><a href="https://stackoverflow.com/questions/16296753/can-you-run-gui-applications-in-a-docker-container" target="_blank" rel="noopener">使用docker运行GUI应用-stack-overflow</a></p>
<p><strong><a href="https://github.com/osrf/docker_images/issues/21" target="_blank" rel="noopener">GUI不工作–报错<code>MIT-SHM</code></a></strong></p>
<p>终端管理工具</p>
<p><a href="http://www.hostbuf.com/t/1059.html" target="_blank" rel="noopener">FinalShell官网-Linux安装</a></p>
<p><a href="https://www.cnblogs.com/byx1024/p/12144199.html" target="_blank" rel="noopener">FinalShell博客–使用说明</a></p>
<p><a href="https://blog.csdn.net/mandagod/article/details/103663763" target="_blank" rel="noopener">FinalShell博客–建立隧道</a></p>
<p>gotty+ssh/tmux实现web-xshell,并协同</p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>个人工具</tag>
        <tag>ubuntu18.04</tag>
        <tag>docker</tag>
        <tag>GVM</tag>
        <tag>Goland</tag>
        <tag>node</tag>
        <tag>postman</tag>
        <tag>typora</tag>
        <tag>finalshell</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm配置Sftp远程开发</title>
    <url>/2019/12/13/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-05-13-Pycharm-%E9%85%8D%E7%BD%AESftp%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<html><head></head><body><h1 id="配置pycharm-同步代码至docker容器"><a href="#配置pycharm-同步代码至docker容器" class="headerlink" title="配置pycharm 同步代码至docker容器"></a>配置pycharm 同步代码至docker容器</h1><p><a href="https://zhuanlan.zhihu.com/p/52827335" target="_blank" rel="noopener">参考连接</a></p>
<h2 id="容器配置"><a href="#容器配置" class="headerlink" title="容器配置"></a>容器配置</h2><ol>
<li>22端口暴露： <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name chartbackend -d -p 5556:5555 -p8022:22 reg.qloudhub.com/qloudpaas/chartbackend:latest4</span><br></pre></td></tr></tbody></table></figure></li>
<li>安装配置ssh服务 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 16.04</span></span><br><span class="line">apt install openssh-server</span><br><span class="line"></span><br><span class="line">sed -i<span class="string">'s/PermitRootLogin prohibit-password/PermitRootLogin yes/'</span> /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># sed 's@sessions*requireds*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd</span></span><br><span class="line"><span class="comment"># echo "export VISIBLE=now" &gt;&gt; /etc/profile</span></span><br><span class="line">service ssh restart</span><br></pre></td></tr></tbody></table></figure></li>
<li>设置容器用户名密码 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">passwd</span><br><span class="line"><span class="comment"># 查看用户</span></span><br><span class="line">whoami</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="pycharm配置"><a href="#pycharm配置" class="headerlink" title="pycharm配置"></a>pycharm配置</h2><ol>
<li>add sftp server<blockquote>
<p>PyCharm  Tools &gt; Deployment &gt; Configuration</p>
</blockquote>
</li>
</ol>
<p><img alt="picture_sftp_setting_connect" data-src="https://tva1.sinaimg.cn/large/006hT4w1ly1g9v745f0xaj30md0iwgmi.jpg"></p>
<p><img alt="picture_sftp_setting_mapping" data-src="https://tvax4.sinaimg.cn/large/006hT4w1ly1g9v74l9kpaj30mb0ivmxx.jpg"></p>
<ol start="2">
<li>set project interpreter use sftp’s<blockquote>
<p>点击 PyCharm 的 File &gt; Setting &gt; Project &gt; Project Interpreter 右边的设置按钮新建一个项目的远程解释器：</p>
</blockquote>
</li>
</ol>
<p><img alt="picture_project_interpreter_use_sftp" data-src="https://tva3.sinaimg.cn/large/006hT4w1ly1g9v73161thj30yl0jidic.jpg"></p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>个人工具</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Gland使用技巧</title>
    <url>/2020/05/25/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-05-25-Gland-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><ul>
<li>最重要的事: </li>
</ul>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><ul>
<li>goland激活</li>
<li>golang创建桌面图标</li>
<li>goland配置go-template</li>
<li>goland使用live-template生成Swagger的注解</li>
<li>goland使用git-bash作为Terminal</li>
</ul>
<h1 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.jetbrains.com/go/2018/12/14/go-templates-made-easy/?_ga=2.92277531.766463060.1589277937-434880970.1582637428" target="_blank" rel="noopener">Go templates made easy</a></p>
<p><a href="https://blog.jetbrains.com/go/2020/05/19/video-recording-and-qa-of-build-a-microservice-in-go-with-goland-in-an-hour-webinar/" target="_blank" rel="noopener">Video Recording and Q&amp;A of Build a Microservice in Go with GoLand in an Hour webinar</a></p>
<p><a href="https://blog.csdn.net/weixin_40596063/article/details/90897864" target="_blank" rel="noopener">Idea 配置Live Templet 自动生成swagger注释模板</a></p>
<p><a href="https://www.cnblogs.com/lqyy/p/9390441.html" target="_blank" rel="noopener">IntelliJ IDEA 如何设置类头注释和方法注释</a></p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>个人工具</tag>
        <tag>goland</tag>
      </tags>
  </entry>
  <entry>
    <title>Git最佳实践+常用命令</title>
    <url>/2020/05/29/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-05-29-Git-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最重要的事: </p>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.cnblogs.com/cnblogsfans/p/5075073.html" target="_blank" rel="noopener">Git使用最佳实践</a></p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>draft</tag>
        <tag>个人工具</tag>
      </tags>
  </entry>
  <entry>
    <title>翻墙--chrome无法同步Google账号</title>
    <url>/2020/08/05/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-08-05-%E7%BF%BB%E5%A2%99-chrome%E6%97%A0%E6%B3%95%E5%90%8C%E6%AD%A5google%E8%B4%A6%E5%8F%B7/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最重要的事: </p>
<ol>
<li>Qv2ray开代理<br>本人使用Qv2ray</li>
</ol>
<ul>
<li>设置系统代理</li>
<li>勾选SOCKS设置，并填写端口<code>1088</code>，UDP本地IP<code>127.0.0.1</code>。</li>
</ul>
<ol start="2">
<li><p>设置docker代理配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d/</span><br><span class="line">sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></tbody></table></figure>
<p>将以下内容填入文件<code>http-proxy.conf</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment="ALL_PROXY=socks5://127.0.0.1:1088"</span><br><span class="line">NO_PROXY=localhost,127.0.0.1,reg.chebai.org,hub.icos.city,icosdop.service.rd,icos.city</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重启docker服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">root@:~<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">root@:~<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl show --property=Environment docker</span><br><span class="line">Environment=ALL_PROXY=socks5://127.0.0.1:1080 NO_PROXY=localhost,127.0.0.1,reg.chebai.org,hub.icos.city,icosdop.service.rd,icos.city</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>docker pull 谷歌仓库镜像</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">root@:~<span class="comment"># docker pull gcr.io/google_containers/pause-amd64:3.0</span></span><br><span class="line">3.0: Pulling from google_containers/pause-amd64</span><br><span class="line">a3ed95caeb02: Pull complete </span><br><span class="line">f11233434377: Pull complete </span><br><span class="line">Digest: sha256:163ac025575b775d1c0f9bf0bdd0f086883171eb475b5068e7defa4ca9e76516</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> gcr.io/google_containers/pause-amd64:3.0</span><br><span class="line">root@:~<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">stephenlu/pause-amd64                  3.0                 78ba6fae6829        3 weeks ago         747 kB</span><br><span class="line">gcr.io/google_containers/pause-amd64   3.0                 99e59f495ffa        20 months ago       747 kB</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>minikube启动k8s集群</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube start</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="使用国内proxy启动"><a href="#使用国内proxy启动" class="headerlink" title="使用国内proxy启动"></a>使用国内proxy启动</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube start --registry-mirror=https://registry.docker-cn.com</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">minikube start --vm-driver=none --registry-mirror=https://registry.docker-cn.com --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/StephenLu0422/article/details/78924694" target="_blank" rel="noopener">docker使用代理pull gcr仓库镜像</a><br><a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy" target="_blank" rel="noopener">docker官方文档设置HTTP/HTTPS Proxy</a></p>
<h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>docker 配置 no_proxy 无法使用 通配模式。</p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>个人工具</tag>
        <tag>v2ray</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>翻墙--docker拉取镜像</title>
    <url>/2020/08/05/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-08-05-%E7%BF%BB%E5%A2%99-docker%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最重要的事: </p>
<ol>
<li>Qv2ray开代理<br>本人使用Qv2ray</li>
</ol>
<ul>
<li>设置系统代理</li>
<li>勾选SOCKS设置，并填写端口<code>1088</code>，UDP本地IP<code>127.0.0.1</code>。</li>
</ul>
<ol start="2">
<li><p>设置docker代理配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d/</span><br><span class="line">sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></tbody></table></figure>
<p>将以下内容填入文件<code>http-proxy.conf</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment="ALL_PROXY=socks5://127.0.0.1:1088"</span><br><span class="line">NO_PROXY=localhost,127.0.0.1,reg.chebai.org,hub.icos.city,icosdop.service.rd,icos.city</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重启docker服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">root@:~<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">root@:~<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl show --property=Environment docker</span><br><span class="line">Environment=ALL_PROXY=socks5://127.0.0.1:1080 NO_PROXY=localhost,127.0.0.1,reg.chebai.org,hub.icos.city,icosdop.service.rd,icos.city</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>docker pull 谷歌仓库镜像</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">root@:~<span class="comment"># docker pull gcr.io/google_containers/pause-amd64:3.0</span></span><br><span class="line">3.0: Pulling from google_containers/pause-amd64</span><br><span class="line">a3ed95caeb02: Pull complete </span><br><span class="line">f11233434377: Pull complete </span><br><span class="line">Digest: sha256:163ac025575b775d1c0f9bf0bdd0f086883171eb475b5068e7defa4ca9e76516</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> gcr.io/google_containers/pause-amd64:3.0</span><br><span class="line">root@:~<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">stephenlu/pause-amd64                  3.0                 78ba6fae6829        3 weeks ago         747 kB</span><br><span class="line">gcr.io/google_containers/pause-amd64   3.0                 99e59f495ffa        20 months ago       747 kB</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>minikube启动k8s集群</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube start</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="使用国内proxy启动"><a href="#使用国内proxy启动" class="headerlink" title="使用国内proxy启动"></a>使用国内proxy启动</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube start --registry-mirror=https://registry.docker-cn.com</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">minikube start --vm-driver=none --registry-mirror=https://registry.docker-cn.com --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/StephenLu0422/article/details/78924694" target="_blank" rel="noopener">docker使用代理pull gcr仓库镜像</a><br><a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy" target="_blank" rel="noopener">docker官方文档设置HTTP/HTTPS Proxy</a></p>
<h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>docker 配置 no_proxy 无法使用 通配模式。</p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>个人工具</tag>
        <tag>docker</tag>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Ubuntu18.04-grub导致开机异常</title>
    <url>/2020/09/22/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-09-22-Ubuntu-18-04-grub%E5%AF%BC%E8%87%B4%E5%BC%80%E6%9C%BA%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>最重要的事: </p>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/adf1fbbadff5" target="_blank" rel="noopener">ubuntu出现”/dev/disk/by-uuid/xxxxxxxxx does not exist. Dropping to a shell “的恢复之路</a><br><a href="https://blog.csdn.net/qinxinger/article/details/94589521" target="_blank" rel="noopener">ALERT! UUID=xxxxxxxxx does not exist. Dropping to a shell!</a></p>
<p><a href="https://blog.csdn.net/u013066730/article/details/82497631" target="_blank" rel="noopener">卸载不能用的grub image</a></p>
<p><a href="https://askubuntu.com/questions/1273121/ubuntu-20-04-does-not-boot-after-kernel-grub-update" target="_blank" rel="noopener">https://askubuntu.com/questions/1273121/ubuntu-20-04-does-not-boot-after-kernel-grub-update</a><br><a href="https://askubuntu.com/questions/1273758/kernel-panic-after-update-from-16-04-lts-to-18-04-lts-virtual-machine-lubuntu" target="_blank" rel="noopener">https://askubuntu.com/questions/1273758/kernel-panic-after-update-from-16-04-lts-to-18-04-lts-virtual-machine-lubuntu</a><br><a href="https://www.reddit.com/r/zfs/comments/ilthfp/zfs_zvols_and_lvm_partitions_created_thru_libvirt/" target="_blank" rel="noopener">https://www.reddit.com/r/zfs/comments/ilthfp/zfs_zvols_and_lvm_partitions_created_thru_libvirt/</a></p>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>个人工具</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT-配置proxy并忽略内网仓库</title>
    <url>/2020/12/28/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7-2020-12-28-GIT-%E9%85%8D%E7%BD%AEproxy%E5%B9%B6%E5%BF%BD%E7%95%A5%E5%86%85%E7%BD%91%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<html><head></head><body><h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p>实现的状态</p>
<ul>
<li>github仓库走代理</li>
<li>内网仓库不走代理</li>
</ul>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>由于github仓库拉取缓慢，所以配置了代理； 但内网仓库拉取也走了代理，导致出现以下报错</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hex@hex-pc:~/example-repo$ git pull </span><br><span class="line">fatal: unable to access <span class="string">'https://git.service.rd/plugins/git/example-repo.git/'</span>: gnutls_handshake() failed: The TLS connection was non-properly terminated.</span><br></pre></td></tr></tbody></table></figure>

<h1 id="解决办法-推荐"><a href="#解决办法-推荐" class="headerlink" title="解决办法(推荐)"></a>解决办法(推荐)</h1><p>git是可以根据环境变量的配置，声明代理并将内网地址配置不走代理，实现此功能，但要注意格式。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:10800/</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:10800/</span><br><span class="line"><span class="built_in">export</span> all_proxy=socks://127.0.0.1:1088/</span><br><span class="line"><span class="built_in">export</span> ftp_proxy=http://127.0.0.1:10800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明内网不走proxy的服务 声明域名作为通配，以空格分隔。</span></span><br><span class="line"><span class="built_in">export</span> no_proxy=<span class="string">".service.rd .icos.city 127.0.0.1 localhost"</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="修改本地库-local配置"><a href="#修改本地库-local配置" class="headerlink" title="修改本地库-local配置"></a>修改本地库-local配置</h1><p>也可以针对仓库设置git config。可以设置本地库全局配置，也可以只设置单一远端。</p>
<ol>
<li><p>已有仓库,进入仓库目录下，并添加一个“空”代理（仓库级别）。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --add http.proxy <span class="string">""</span></span><br></pre></td></tr></tbody></table></figure>
<p>在仓库目录下<code>&lt;repo_path&gt;/.git/config</code>，会出现以下内容</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = true</span><br><span class="line">	bare = false</span><br><span class="line">	logallrefupdates = true</span><br><span class="line">[remote "origin"]</span><br><span class="line">	url = https://git.service.rd/plugins/git/example.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch "master"]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/master</span><br><span class="line">[http]</span><br><span class="line">	proxy =</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>已有仓库，进入仓库目录下，添加一个”空“代理（固定remote级别）。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --add remote.&lt;name&gt;.proxy <span class="string">""</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行下面命令查看</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --get remote.&lt;name&gt;.proxy</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h1 id="修改全局配置（只能针对单库）"><a href="#修改全局配置（只能针对单库）" class="headerlink" title="修改全局配置（只能针对单库）"></a>修改全局配置（只能针对单库）</h1><p>修改 <code>~/.gitconfig</code>文件，增加以下内容</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">   sslVerify = true</span><br><span class="line">[http "https://git.service.rd/plugins/git/example-repo.git"]</span><br><span class="line">   sslVerify = false</span><br><span class="line">   ptoxy =</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>个人工具</category>
      </categories>
      <tags>
        <tag>个人工具</tag>
      </tags>
  </entry>
  <entry>
    <title>下一步研究方向</title>
    <url>/2019/12/29/%E6%8F%90%E4%B8%8A%E6%97%A5%E7%A8%8B-20191229-%E4%B8%8B%E4%B8%80%E6%AD%A5%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91/</url>
    <content><![CDATA[<html><head></head><body><p>有待准备完善的博客计划：</p>
<ul>
<li>persistence:<ul>
<li>minio</li>
<li>restic</li>
<li>mongodb</li>
<li>redis</li>
<li>kafka</li>
<li>postgresql</li>
<li>dbaas</li>
<li>consul</li>
<li>vault</li>
<li>nomad</li>
<li>ElasticSearch</li>
<li>zookeeper</li>
<li>rook-ceph</li>
<li>GlusterFS</li>
</ul>
</li>
<li>Kubernetes<ul>
<li>监控<ul>
<li>prometheus</li>
<li>grafana</li>
<li>promethus operator</li>
</ul>
</li>
<li>k8s deployment</li>
<li>k8s Resource详解</li>
<li>k8s 源码阅读</li>
<li>knative</li>
<li>faas</li>
<li>k8s operator</li>
<li>ambassador</li>
<li>istio</li>
<li>consul-connect</li>
<li>gloo</li>
</ul>
</li>
<li>Devops<ul>
<li>docker</li>
<li>jenkins</li>
<li>gitlab</li>
<li>gogs</li>
<li>drone</li>
<li>pipeline</li>
<li>join with k8s</li>
</ul>
</li>
<li>自动化工具<ul>
<li>ansible</li>
<li>terraform</li>
</ul>
</li>
<li>个人工具<ul>
<li>Pycharm</li>
<li>Postman</li>
<li>SecureCRT</li>
<li>Git</li>
<li>在线json数据结构定义[Golang]。</li>
</ul>
</li>
<li>Python<ul>
<li>代码块<ul>
<li>jinjia2</li>
<li>gitClient</li>
<li>chartmuseum api</li>
<li>apscheduler</li>
<li>socket-client + socket-server</li>
</ul>
</li>
<li>架构<ul>
<li>Raft-gossip分布式python实现</li>
</ul>
</li>
<li>设计模式</li>
<li>算法实现</li>
<li>部署<ul>
<li>venv</li>
<li>docker</li>
</ul>
</li>
</ul>
</li>
<li>Golang<ul>
<li>架构<ul>
<li>Raft-gossip分布式Golang实现</li>
</ul>
</li>
</ul>
</li>
<li>vue</li>
<li>计算机原理<ul>
<li>网络<ul>
<li>dns</li>
<li>bgp</li>
<li>证书</li>
<li>ssl</li>
</ul>
</li>
<li>编译原理</li>
<li>编程思想</li>
<li>linux</li>
</ul>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>提上日程</category>
      </categories>
      <tags>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s源码阅读</title>
    <url>/2019/12/29/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-20191229-k8s%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<html><head></head><body><ul>
<li><a href="https://blog.tianfeiyu.com/source-code-reading-notes/" target="_blank" rel="noopener">kubernetes源码阅读</a></li>
<li>Docker源码</li>
<li>flask源码</li>
<li>DBaas源码</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>源码阅读</category>
      </categories>
      <tags>
        <tag>Source Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Tree</title>
    <url>/2019/12/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86-20191230-tree/</url>
    <content><![CDATA[<html><head></head><body><ul>
<li>计算机原理<ul>
<li>网络<ul>
<li>dns</li>
<li>bgp</li>
<li>证书</li>
<li>ssl</li>
</ul>
</li>
<li>编译原理</li>
<li>编程思想</li>
<li>linux</li>
</ul>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>计算机原理</category>
      </categories>
      <tags>
        <tag>计算机原理</tag>
      </tags>
  </entry>
</search>
